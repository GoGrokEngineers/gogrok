PRAGMA foreign_keys=OFF;
BEGIN TRANSACTION;
CREATE TABLE IF NOT EXISTS "django_migrations" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "app" varchar(255) NOT NULL, "name" varchar(255) NOT NULL, "applied" datetime NOT NULL);
INSERT INTO django_migrations VALUES(1,'contenttypes','0001_initial','2024-10-08 15:42:57.025012');
INSERT INTO django_migrations VALUES(2,'auth','0001_initial','2024-10-08 15:42:57.066175');
INSERT INTO django_migrations VALUES(3,'admin','0001_initial','2024-10-08 15:42:57.075243');
INSERT INTO django_migrations VALUES(4,'admin','0002_logentry_remove_auto_add','2024-10-08 15:42:57.085723');
INSERT INTO django_migrations VALUES(5,'admin','0003_logentry_add_action_flag_choices','2024-10-08 15:42:57.091971');
INSERT INTO django_migrations VALUES(6,'contenttypes','0002_remove_content_type_name','2024-10-08 15:42:57.108289');
INSERT INTO django_migrations VALUES(7,'auth','0002_alter_permission_name_max_length','2024-10-08 15:42:57.128844');
INSERT INTO django_migrations VALUES(8,'auth','0003_alter_user_email_max_length','2024-10-08 15:42:57.137721');
INSERT INTO django_migrations VALUES(9,'auth','0004_alter_user_username_opts','2024-10-08 15:42:57.143962');
INSERT INTO django_migrations VALUES(10,'auth','0005_alter_user_last_login_null','2024-10-08 15:42:57.152660');
INSERT INTO django_migrations VALUES(11,'auth','0006_require_contenttypes_0002','2024-10-08 15:42:57.154064');
INSERT INTO django_migrations VALUES(12,'auth','0007_alter_validators_add_error_messages','2024-10-08 15:42:57.160436');
INSERT INTO django_migrations VALUES(13,'auth','0008_alter_user_username_max_length','2024-10-08 15:42:57.169658');
INSERT INTO django_migrations VALUES(14,'auth','0009_alter_user_last_name_max_length','2024-10-08 15:42:57.178121');
INSERT INTO django_migrations VALUES(15,'auth','0010_alter_group_name_max_length','2024-10-08 15:42:57.188067');
INSERT INTO django_migrations VALUES(16,'auth','0011_update_proxy_permissions','2024-10-08 15:42:57.193816');
INSERT INTO django_migrations VALUES(17,'auth','0012_alter_user_first_name_max_length','2024-10-08 15:42:57.202445');
INSERT INTO django_migrations VALUES(18,'sessions','0001_initial','2024-10-08 15:42:57.206086');
INSERT INTO django_migrations VALUES(19,'task','0001_initial','2024-10-28 14:24:27.856244');
INSERT INTO django_migrations VALUES(20,'competition','0001_initial','2024-10-28 14:24:27.886501');
INSERT INTO django_migrations VALUES(21,'competition','0002_alter_competition_six_digit_link','2024-10-28 14:24:27.900704');
INSERT INTO django_migrations VALUES(22,'competition','0003_competition_difficulty_competition_task','2024-10-28 14:24:27.957002');
INSERT INTO django_migrations VALUES(23,'competition','0004_delete_participant','2024-10-28 14:24:27.987472');
INSERT INTO django_migrations VALUES(24,'competition','0005_remove_competition_duration_and_more','2024-10-28 14:24:28.028182');
INSERT INTO django_migrations VALUES(25,'competition','0006_alter_competition_duration_minutes','2024-10-28 14:24:28.052786');
INSERT INTO django_migrations VALUES(26,'competition','0007_alter_competition_duration_minutes','2024-10-28 14:24:28.071123');
INSERT INTO django_migrations VALUES(27,'task','0002_task_description','2024-10-28 14:24:28.087543');
INSERT INTO django_migrations VALUES(28,'task','0003_alter_task_description','2024-10-28 14:24:28.104145');
INSERT INTO django_migrations VALUES(29,'task','0004_remove_task_description','2024-10-28 14:24:28.118845');
INSERT INTO django_migrations VALUES(30,'task','0005_task_description','2024-10-28 14:24:28.135225');
INSERT INTO django_migrations VALUES(31,'test_case','0001_initial','2024-10-28 14:24:28.156427');
INSERT INTO django_migrations VALUES(32,'test_case','0002_alter_testcase_task','2024-10-28 14:24:28.169164');
INSERT INTO django_migrations VALUES(33,'test_case','0003_alter_testcase_input_alter_testcase_input_type_and_more','2024-10-30 11:51:56.739994');
INSERT INTO django_migrations VALUES(34,'test_case','0004_delete_testcase','2024-10-30 14:11:54.763498');
INSERT INTO django_migrations VALUES(35,'test_case','0005_initial','2024-10-30 14:11:54.791499');
INSERT INTO django_migrations VALUES(36,'test_case','0006_alter_testcase_task','2024-11-03 09:38:35.649129');
INSERT INTO django_migrations VALUES(37,'competition','0008_delete_competition','2024-11-20 12:19:14.242557');
CREATE TABLE IF NOT EXISTS "auth_group_permissions" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "group_id" integer NOT NULL REFERENCES "auth_group" ("id") DEFERRABLE INITIALLY DEFERRED, "permission_id" integer NOT NULL REFERENCES "auth_permission" ("id") DEFERRABLE INITIALLY DEFERRED);
CREATE TABLE IF NOT EXISTS "auth_user_groups" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "user_id" integer NOT NULL REFERENCES "auth_user" ("id") DEFERRABLE INITIALLY DEFERRED, "group_id" integer NOT NULL REFERENCES "auth_group" ("id") DEFERRABLE INITIALLY DEFERRED);
CREATE TABLE IF NOT EXISTS "auth_user_user_permissions" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "user_id" integer NOT NULL REFERENCES "auth_user" ("id") DEFERRABLE INITIALLY DEFERRED, "permission_id" integer NOT NULL REFERENCES "auth_permission" ("id") DEFERRABLE INITIALLY DEFERRED);
CREATE TABLE IF NOT EXISTS "django_admin_log" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "object_id" text NULL, "object_repr" varchar(200) NOT NULL, "action_flag" smallint unsigned NOT NULL CHECK ("action_flag" >= 0), "change_message" text NOT NULL, "content_type_id" integer NULL REFERENCES "django_content_type" ("id") DEFERRABLE INITIALLY DEFERRED, "user_id" integer NOT NULL REFERENCES "auth_user" ("id") DEFERRABLE INITIALLY DEFERRED, "action_time" datetime NOT NULL);
CREATE TABLE IF NOT EXISTS "django_content_type" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "app_label" varchar(100) NOT NULL, "model" varchar(100) NOT NULL);
INSERT INTO django_content_type VALUES(1,'admin','logentry');
INSERT INTO django_content_type VALUES(2,'auth','permission');
INSERT INTO django_content_type VALUES(3,'auth','group');
INSERT INTO django_content_type VALUES(4,'auth','user');
INSERT INTO django_content_type VALUES(5,'contenttypes','contenttype');
INSERT INTO django_content_type VALUES(6,'sessions','session');
INSERT INTO django_content_type VALUES(7,'competition','competition');
INSERT INTO django_content_type VALUES(8,'task','task');
INSERT INTO django_content_type VALUES(9,'test_case','testcase');
INSERT INTO django_content_type VALUES(10,'competition','competitionstatisticsmodel');
CREATE TABLE IF NOT EXISTS "auth_permission" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "content_type_id" integer NOT NULL REFERENCES "django_content_type" ("id") DEFERRABLE INITIALLY DEFERRED, "codename" varchar(100) NOT NULL, "name" varchar(255) NOT NULL);
INSERT INTO auth_permission VALUES(1,1,'add_logentry','Can add log entry');
INSERT INTO auth_permission VALUES(2,1,'change_logentry','Can change log entry');
INSERT INTO auth_permission VALUES(3,1,'delete_logentry','Can delete log entry');
INSERT INTO auth_permission VALUES(4,1,'view_logentry','Can view log entry');
INSERT INTO auth_permission VALUES(5,2,'add_permission','Can add permission');
INSERT INTO auth_permission VALUES(6,2,'change_permission','Can change permission');
INSERT INTO auth_permission VALUES(7,2,'delete_permission','Can delete permission');
INSERT INTO auth_permission VALUES(8,2,'view_permission','Can view permission');
INSERT INTO auth_permission VALUES(9,3,'add_group','Can add group');
INSERT INTO auth_permission VALUES(10,3,'change_group','Can change group');
INSERT INTO auth_permission VALUES(11,3,'delete_group','Can delete group');
INSERT INTO auth_permission VALUES(12,3,'view_group','Can view group');
INSERT INTO auth_permission VALUES(13,4,'add_user','Can add user');
INSERT INTO auth_permission VALUES(14,4,'change_user','Can change user');
INSERT INTO auth_permission VALUES(15,4,'delete_user','Can delete user');
INSERT INTO auth_permission VALUES(16,4,'view_user','Can view user');
INSERT INTO auth_permission VALUES(17,5,'add_contenttype','Can add content type');
INSERT INTO auth_permission VALUES(18,5,'change_contenttype','Can change content type');
INSERT INTO auth_permission VALUES(19,5,'delete_contenttype','Can delete content type');
INSERT INTO auth_permission VALUES(20,5,'view_contenttype','Can view content type');
INSERT INTO auth_permission VALUES(21,6,'add_session','Can add session');
INSERT INTO auth_permission VALUES(22,6,'change_session','Can change session');
INSERT INTO auth_permission VALUES(23,6,'delete_session','Can delete session');
INSERT INTO auth_permission VALUES(24,6,'view_session','Can view session');
INSERT INTO auth_permission VALUES(25,7,'add_competition','Can add competition');
INSERT INTO auth_permission VALUES(26,7,'change_competition','Can change competition');
INSERT INTO auth_permission VALUES(27,7,'delete_competition','Can delete competition');
INSERT INTO auth_permission VALUES(28,7,'view_competition','Can view competition');
INSERT INTO auth_permission VALUES(29,8,'add_task','Can add task');
INSERT INTO auth_permission VALUES(30,8,'change_task','Can change task');
INSERT INTO auth_permission VALUES(31,8,'delete_task','Can delete task');
INSERT INTO auth_permission VALUES(32,8,'view_task','Can view task');
INSERT INTO auth_permission VALUES(33,9,'add_testcase','Can add test case');
INSERT INTO auth_permission VALUES(34,9,'change_testcase','Can change test case');
INSERT INTO auth_permission VALUES(35,9,'delete_testcase','Can delete test case');
INSERT INTO auth_permission VALUES(36,9,'view_testcase','Can view test case');
INSERT INTO auth_permission VALUES(37,10,'add_competitionstatisticsmodel','Can add competition statistics model');
INSERT INTO auth_permission VALUES(38,10,'change_competitionstatisticsmodel','Can change competition statistics model');
INSERT INTO auth_permission VALUES(39,10,'delete_competitionstatisticsmodel','Can delete competition statistics model');
INSERT INTO auth_permission VALUES(40,10,'view_competitionstatisticsmodel','Can view competition statistics model');
CREATE TABLE IF NOT EXISTS "auth_group" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "name" varchar(150) NOT NULL UNIQUE);
CREATE TABLE IF NOT EXISTS "auth_user" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "password" varchar(128) NOT NULL, "last_login" datetime NULL, "is_superuser" bool NOT NULL, "username" varchar(150) NOT NULL UNIQUE, "last_name" varchar(150) NOT NULL, "email" varchar(254) NOT NULL, "is_staff" bool NOT NULL, "is_active" bool NOT NULL, "date_joined" datetime NOT NULL, "first_name" varchar(150) NOT NULL);
INSERT INTO auth_user VALUES(1,'pbkdf2_sha256$870000$l3Tgk1HQc1QzzzomnEaM6X$eyznm6ZXyjsZILyNwB2gH4X9EP7FGATbIU4E09Fg+4s=','2024-10-09 15:01:28.327978',1,'admin','','',1,1,'2024-10-09 15:00:24.051162','');
CREATE TABLE IF NOT EXISTS "django_session" ("session_key" varchar(40) NOT NULL PRIMARY KEY, "session_data" text NOT NULL, "expire_date" datetime NOT NULL);
INSERT INTO django_session VALUES('1adunzskfds98ghva99ypwv2xfa6xr69','.eJxVjMsOwiAQRf-FtSEwvF269xvIwIBUDU1KuzL-uzbpQrf3nHNfLOK2triNssSJ2JlJdvrdEuZH6TugO_bbzPPc12VKfFf4QQe_zlSel8P9O2g42rcGAy54XaVAV6QXKpPzyehiUwIlwGOwWCHIrEihLYYQRA6-BlMNWc3eH8XGN3o:1syYBs:-ZaTzhq5oG5urePpBYD7L0JZncSUO2s0asItDnC6r9I','2024-10-23 15:01:28.329625');
CREATE TABLE IF NOT EXISTS "task_task" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "title" varchar(200) NOT NULL, "difficulty" varchar(50) NOT NULL, "description" text NOT NULL);
INSERT INTO task_task VALUES(1,'Two Sum','Easy',replace('Given an array of integers `nums` and an integer `target`, return indices of the two numbers such that they add up to `target`.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\n\nYou can return the answer in any order.\n\n\nExample 1:\nInput: nums = [2,7,11,15], target = 9\nOutput: [0,1]\nOutput: Because nums[0] + nums[1] == 9, we return [0, 1].\n\nExample 2:\nInput: nums = [3,2,4], target = 6\nOutput: [1,2]\n\nExample 3:\nInput: nums = [3,3], target = 6\nOutput: [0,1]\n\nConstraints:\n`2 <= nums.length <= 103`\n`-109 <= nums[i] <= 109`\n`-109 <= target <= 109`\nOnly one valid answer exists.','\n',char(10)));
INSERT INTO task_task VALUES(2,'Single Number','Easy',replace('Given a non-empty array of integers `nums`, every element appears twice except for one. Find that single one.\n\nFollow up: Could you implement a solution with a linear runtime complexity and without using extra memory?\n\nExample 1:\nInput: nums = [2,2,1]\nOutput: 1\n\nExample 2:\nInput: nums = [4,1,2,1,2]\nOutput: 4\n\nExample 3:\nInput: nums = [1]\nOutput: 1\n\nConstraints:\n`1 <= nums.length <= 3 * 104`\n`-3 * 104 <= nums[i] <= 3 * 104`\nEach element in the array appears twice except for one element which appears only once.','\n',char(10)));
INSERT INTO task_task VALUES(3,'Plus One','Easy',replace('Given a non-empty array of decimal digits representing a non-negative integer, increment one to the integer.\n\nThe digits are stored such that the most significant digit is at the head of the list, and each element in the array contains a single digit.\n\nYou may assume the integer does not contain any leading zero, except the number 0 itself.\n\n\nExample 1:\nInput: digits = [1,2,3]\nOutput: [1,2,4]\nExplanation: The array represents the integer 123.\n\n\nExample 2:\nInput: digits = [4,3,2,1]\nOutput: [4,3,2,2]\nExplanation: The array represents the integer 4321.\n\n\nExample 3:\nInput: digits = [0]\nOutput: [1]\n\nConstraints:\n`1 <= digits.length <= 100`\n`0 <= digits[i] <= 9`','\n',char(10)));
INSERT INTO task_task VALUES(4,'Rotate Array','Medium',replace('Given an array, rotate the array to the right by `k` steps, where `k` is non-negative.\n\n\nExample 1:\nInput: nums = [1,2,3,4,5,6,7], k = 3\nOutput: [5,6,7,1,2,3,4]\nExplanation:\nrotate 1 steps to the right: [7,1,2,3,4,5,6]\nrotate 2 steps to the right: [6,7,1,2,3,4,5]\nrotate 3 steps to the right: [5,6,7,1,2,3,4]\n\nExample 2:\nInput: nums = [-1,-100,3,99], k = 2\nOutput: [3,99,-1,-100]\nExplanation: \nrotate 1 steps to the right: [99,-1,-100,3]\nrotate 2 steps to the right: [3,99,-1,-100]\n\nConstraints:\n`1 <= nums.length <= 2 * 104`\n`-231 <= nums[i] <= 231 - 1`\n`0 <= k <= 105`\nFollow up:\nTry to come up with as many solutions as you can. There are at least three different ways to solve this problem.\n\nCould you do it in-place with `O(1)` extra space?','\n',char(10)));
INSERT INTO task_task VALUES(5,'Contains Duplicate','Easy',replace('Given an integer array `nums`, return `true` if any value appears at least twice in the array, and return `false` if every element is distinct.\n\n\nExample 1:\nInput: nums = [1,2,3,1]\nOutput: true\n\nExample 2:\nInput: nums = [1,2,3,4]\nOutput: false\n\nExample 3:\nInput: nums = [1,1,1,3,3,4,3,2,4,2]\nOutput: true\n\nConstraints:\n`1 <= nums.length <= 105`\n`-109 <= nums[i] <= 109`','\n',char(10)));
INSERT INTO task_task VALUES(6,'Move Zeroes','Easy',replace('Given an integer array `nums`, move all `0`''s to the end of it while maintaining the relative order of the non-zero elements.\n\nNote that you must do this in-place without making a copy of the array.\n\n\nExample 1:\nInput: nums = [0,1,0,3,12]\nOutput: [1,3,12,0,0]\n\nExample 2:\nInput: nums = [0]\nOutput: [0]\n\nConstraints:\n`1 <= nums.length <= 104`\n`-231 <= nums[i] <= 231 - 1`\nFollow up: Could you minimize the total number of operations done?','\n',char(10)));
INSERT INTO task_task VALUES(7,'Reverse String','Easy',replace('Write a function that reverses a string. The input string is given as an array of characters `s`.\n\n\nExample 1:\nInput: s = ["h","e","l","l","o"]\nOutput: ["o","l","l","e","h"]\n\nExample 2:\nInput: s = ["H","a","n","n","a","h"]\nOutput: ["h","a","n","n","a","H"]\n\nConstraints:\n`1 <= s.length <= 105`\n`s[i]` is a printable ascii character.\n\nFollow up: Do not allocate extra space for another array. You must do this by modifying the input array in-place with `O(1)` extra memory.','\n',char(10)));
INSERT INTO task_task VALUES(8,'Valid Anagram','Easy',replace('Given two strings `s` and `t`, return `true` if `t` is an anagram of `s`, and `false` otherwise.\n\n\nExample 1:\nInput: s = "anagram", t = "nagaram"\nOutput: true\n\nExample 2:\nInput: s = "rat", t = "car"\nOutput: false\n\nConstraints:\n`1 <= s.length, t.length <= 5 * 104`\n`s` and `t` consist of lowercase English letters.\n\nFollow up: What if the inputs contain Unicode characters? How would you adapt your solution to such a case?','\n',char(10)));
INSERT INTO task_task VALUES(9,'Longest Common Prefix','Easy',replace('Write a function to find the longest common prefix string amongst an array of strings.\n\nIf there is no common prefix, return an empty string `""`.\n\n\nExample 1:\nInput: strs = ["flower","flow","flight"]\nOutput: "fl"\n\nExample 2:\nInput: strs = ["dog","racecar","car"]\nOutput: ""\nExplanation: There is no common prefix among the input strings.\n\n\nConstraints:\n`0 <= strs.length <= 200`\n`0 <= strs[i].length <= 200`\n`strs[i]` consists of only lower-case English letters.','\n',char(10)));
INSERT INTO task_task VALUES(10,'Reverse Integer','Easy',replace('Given a signed 32-bit integer `x`, return `x` with its digits reversed. If reversing `x` causes the value to go outside the signed 32-bit integer range `[-231, 231 - 1]`, then return `0`.\n\nAssume the environment does not allow you to store 64-bit integers (signed or unsigned).\n\n\nExample 1:\nInput: x = 123\nOutput: 321\n\nExample 2:\nInput: x = -123\nOutput: -321\n\nExample 3:\nInput: x = 120\nOutput: 21\n\nExample 4:\nInput: x = 0\nOutput: 0\n\nConstraints:\n`-231 <= x <= 231 - 1`','\n',char(10)));
INSERT INTO task_task VALUES(11,'Valid Palindrome','Easy',replace('Given a string `s`, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\n\n\nExample 1:\nInput: s = "A man, a plan, a canal: Panama"\nOutput: true\nExplanation: "amanaplanacanalpanama" is a palindrome.\n\n\nExample 2:\nInput: s = "race a car"\nOutput: false\nExplanation: "raceacar" is not a palindrome.\n\n\nConstraints:\n`1 <= s.length <= 2 * 105`\n`s` consists only of printable ASCII characters.','\n',char(10)));
INSERT INTO task_task VALUES(12,'First Unique Character in a String','Easy',replace('Given a string `s`, return the first non-repeating character in it and return its index. If it does not exist, return `-1`.\n\n\nExample 1:\nInput: s = "leetcode"\nOutput: 0\n\nExample 2:\nInput: s = "loveleetcode"\nOutput: 2\n\nExample 3:\nInput: s = "aabb"\nOutput: -1\n\nConstraints:\n`1 <= s.length <= 105`\n`s` consists of only lowercase English letters.','\n',char(10)));
INSERT INTO task_task VALUES(13,'Rotate Image','Medium',replace('You are given an n x n 2D `matrix` representing an image, rotate the image by 90 degrees (clockwise).\n\nYou have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.\n\n\nExample 1:\nInput: matrix = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: [[7,4,1],[8,5,2],[9,6,3]]\n\nExample 2:\nInput: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]\nOutput: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]\n\nExample 3:\nInput: matrix = [[1]]\nOutput: [[1]]\n\nExample 4:\nInput: matrix = [[1,2],[3,4]]\nOutput: [[3,1],[4,2]]\n\nConstraints:\n`matrix.length == n`\n`matrix[i].length == n`\n`1 <= n <= 20`\n`-1000 <= matrix[i][j] <= 1000`','\n',char(10)));
INSERT INTO task_task VALUES(14,'Best Time to Buy and Sell Stock','Easy',replace('You are given an array `prices` where `prices[i]` is the price of a given stock on the `ith` day.\n\nYou want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.\n\nReturn the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return `0`.\n\n\nExample 1:\nInput: prices = [7,1,5,3,6,4]\nOutput: 5\nExplanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\n\nNote that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.\n\n\nExample 2:\nInput: prices = [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transactions are done and the max profit = 0.\n\n\nConstraints:\n`1 <= prices.length <= 105`\n`0 <= prices[i] <= 104`','\n',char(10)));
INSERT INTO task_task VALUES(15,'Merge Sorted Array','Easy',replace('Given two sorted integer arrays `nums1` and `nums2`, merge `nums2` into `nums1` as one sorted array.\n\nThe number of elements initialized in `nums1` and `nums2` are `m` and `n` respectively. You may assume that `nums1` has a size equal to `m + n` such that it has enough space to hold additional elements from `nums2`.\n\n\nExample 1:\nInput: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3\nOutput: [1,2,2,3,5,6]\n\nExample 2:\nInput: nums1 = [1], m = 1, nums2 = [], n = 0\nOutput: [1]\n\nConstraints:\n`nums1.length == m + n`\n`nums2.length == n`\n`0 <= m, n <= 200`\n`1 <= m + n <= 200`\n`-109 <= nums1[i], nums2[i] <= 109`','\n',char(10)));
INSERT INTO task_task VALUES(16,'Missing Number','Easy',replace('Given an array `nums` containing `n` distinct numbers in the range `[0, n]`, return the only number in the range that is missing from the array.\n\nFollow up: Could you implement a solution using only `O(1)` extra space complexity and `O(n)` runtime complexity?\n\nExample 1:\nInput: nums = [3,0,1]\nOutput: 2\nExplanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.\n\n\nExample 2:\nInput: nums = [0,1]\nOutput: 2\nExplanation: n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.\n\n\nExample 3:\nInput: nums = [9,6,4,2,3,5,7,0,1]\nOutput: 8\nExplanation: n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums.\n\n\nExample 4:\nInput: nums = [0]\nOutput: 1\nExplanation: n = 1 since there is 1 number, so all numbers are in the range [0,1]. 1 is the missing number in the range since it does not appear in nums.\n\n\nConstraints:\n`n == nums.length`\n`1 <= n <= 104`\n`0 <= nums[i] <= n`\nAll the numbers of `nums` are unique.','\n',char(10)));
INSERT INTO task_task VALUES(17,'Valid Parentheses','Easy',replace('Given a string `s` containing just the characters `''(''`, `'')''`, `''{''`, `''}''`, `''[''` and `'']''`, determine if the input string is valid.\n\nAn input string is valid if:\nOpen brackets must be closed by the same type of brackets.\n\nOpen brackets must be closed in the correct order.\n\n\nExample 1:\nInput: s = "()"\nOutput: true\n\nExample 2:\nInput: s = "()[]{}"\nOutput: true\n\nExample 3:\nInput: s = "(]"\nOutput: false\n\nExample 4:\nInput: s = "([)]"\nOutput: false\n\nExample 5:\nInput: s = "{[]}"\nOutput: true\n\nConstraints:\n`1 <= s.length <= 104`\n`s` consists of parentheses only `''()[]{}''`.','\n',char(10)));
INSERT INTO task_task VALUES(18,'Roman to Integer','Easy',replace('Roman numerals are represented by seven different symbols: `I`, `V`, `X`, `L`, `C`, `D` and `M`.\n\nSymbol       Value\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\nFor example, `2` is written as `II` in Roman numeral, just two one''s added together. `12` is written as `XII`, which is simply `X + II`. The number `27` is written as `XXVII`, which is `XX + V + II`.\n\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not `IIII`. Instead, the number four is written as `IV`. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as `IX`. There are six instances where subtraction is used:\n`I` can be placed before `V` (5) and `X` (10) to make 4 and 9. \n`X` can be placed before `L` (50) and `C` (100) to make 40 and 90. \n`C` can be placed before `D` (500) and `M` (1000) to make 400 and 900.\n\nGiven a roman numeral, convert it to an integer.\n\n\nExample 1:\nInput: s = "III"\nOutput: 3\n\nExample 2:\nInput: s = "IV"\nOutput: 4\n\nExample 3:\nInput: s = "IX"\nOutput: 9\n\nExample 4:\nInput: s = "LVIII"\nOutput: 58\nExplanation: L = 50, V= 5, III = 3.\n\n\nExample 5:\nInput: s = "MCMXCIV"\nOutput: 1994\nExplanation: M = 1000, CM = 900, XC = 90 and IV = 4.\n\n\nConstraints:\n`1 <= s.length <= 15`\n`s` contains only the characters `(''I'', ''V'', ''X'', ''L'', ''C'', ''D'', ''M'')`.\n\nIt is guaranteed that `s` is a valid roman numeral in the range `[1, 3999]`.','\n',char(10)));
INSERT INTO task_task VALUES(19,'Power of Three','Easy',replace('Given an integer `n`, return `true` if it is a power of three. Otherwise, return `false`.\n\nAn integer `n` is a power of three, if there exists an integer `x` such that `n == 3x`.\n\n\nExample 1:\nInput: n = 27\nOutput: true\n\nExample 2:\nInput: n = 0\nOutput: false\n\nExample 3:\nInput: n = 9\nOutput: true\n\nExample 4:\nInput: n = 45\nOutput: false\n\nConstraints:\n`-231 <= n <= 231 - 1`\nFollow up: Could you solve it without loops/recursion?','\n',char(10)));
INSERT INTO task_task VALUES(20,'Count Primes','Easy',replace('Count the number of prime numbers less than a non-negative number, `n`.\n\n\nExample 1:\nInput: n = 10\nOutput: 4\nExplanation: There are 4 prime numbers less than 10, they are 2, 3, 5, 7.\n\n\nExample 2:\nInput: n = 0\nOutput: 0\n\nExample 3:\nInput: n = 1\nOutput: 0\n\nConstraints:\n`0 <= n <= 5 * 106`','\n',char(10)));
INSERT INTO task_task VALUES(21,'Fizz Buzz','Easy',replace('Write a program that outputs the string representation of numbers from 1 to n.\n\nBut for multiples of three it should output “Fizz” instead of the number and for the multiples of five output “Buzz”. For numbers which are multiples of both three and five output “FizzBuzz”.\n\n\nExample:\nn = 15,\nReturn:\n[\n    "1",\n    "2",\n    "Fizz",\n    "4",\n    "Buzz",\n    "Fizz",\n    "7",\n    "8",\n    "Fizz",\n    "Buzz",\n    "11",\n    "Fizz",\n    "13",\n    "14",\n    "FizzBuzz"\n]','\n',char(10)));
INSERT INTO task_task VALUES(22,'Delete Node in a Linked List','Easy',replace('Write a function to delete a node in a singly-linked list. You will not be given access to the `head` of the list, instead you will be given access to the node to be deleted directly.\n\nIt is guaranteed that the node to be deleted is not a tail node in the list.\n\n\nExample 1:\nInput: head = [4,5,1,9], node = 5\nOutput: [4,1,9]\nExplanation: You are given the second node with value 5, the linked list should become 4 -> 1 -> 9 after calling your function.\n\n\nExample 2:\nInput: head = [4,5,1,9], node = 1\nOutput: [4,5,9]\nExplanation: You are given the third node with value 1, the linked list should become 4 -> 5 -> 9 after calling your function.\n\n\nExample 3:\nInput: head = [1,2,3,4], node = 3\nOutput: [1,2,4]\n\nExample 4:\nInput: head = [0,1], node = 0\nOutput: [1]\n\nExample 5:\nInput: head = [-3,5,-99], node = -3\nOutput: [5,-99]\n\nConstraints:\nThe number of the nodes in the given list is in the range `[2, 1000]`.\n\n`-1000 <= Node.val <= 1000`\nThe value of each node in the list is unique.\n\nThe `node` to be deleted is in the list and is not a tail node','\n',char(10)));
INSERT INTO task_task VALUES(23,'Remove Nth Node From End of List','Medium',replace('Given the `head` of a linked list, remove the `nth` node from the end of the list and return its head.\n\nFollow up: Could you do this in one pass?\n\nExample 1:\nInput: head = [1,2,3,4,5], n = 2\nOutput: [1,2,3,5]\n\nExample 2:\nInput: head = [1], n = 1\nOutput: []\n\nExample 3:\nInput: head = [1,2], n = 1\nOutput: [1]\n\nConstraints:\nThe number of nodes in the list is `sz`.\n\n`1 <= sz <= 30`\n`0 <= Node.val <= 100`\n`1 <= n <= sz`','\n',char(10)));
INSERT INTO task_task VALUES(24,'Reverse Linked List','Easy',replace('Given the `head` of a singly linked list, reverse the list, and return the reversed list.\n\n\nExample 1:\nInput: head = [1,2,3,4,5]\nOutput: [5,4,3,2,1]\n\nExample 2:\nInput: head = [1,2]\nOutput: [2,1]\n\nExample 3:\nInput: head = []\nOutput: []\n\nConstraints:\nThe number of nodes in the list is the range `[0, 5000]`.\n\n`-5000 <= Node.val <= 5000`\nFollow up: A linked list can be reversed either iteratively or recursively. Could you implement both?','\n',char(10)));
INSERT INTO task_task VALUES(25,'Merge Two Sorted Lists','Easy',replace('Merge two sorted linked lists and return it as a sorted list. The list should be made by splicing together the nodes of the first two lists.\n\n\nExample 1:\nInput: l1 = [1,2,4], l2 = [1,3,4]\nOutput: [1,1,2,3,4,4]\n\nExample 2:\nInput: l1 = [], l2 = []\nOutput: []\n\nExample 3:\nInput: l1 = [], l2 = [0]\nOutput: [0]\n\nConstraints:\nThe number of nodes in both lists is in the range `[0, 50]`.\n\n`-100 <= Node.val <= 100`\nBoth `l1` and `l2` are sorted in non-decreasing order.','\n',char(10)));
INSERT INTO task_task VALUES(26,'Linked List Cycle','Easy',replace('Given `head`, the head of a linked list, determine if the linked list has a cycle in it.\n\nThere is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the `next` pointer. Internally, `pos` is used to denote the index of the node that tail''s `next` pointer is connected to. Note that `pos` is not passed as a parameter.\n\nReturn `true` if there is a cycle in the linked list. Otherwise, return `false`.\n\n\nExample 1:\nInput: head = [3,2,0,-4], pos = 1\nOutput: true\nExplanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).\n\n\nExample 2:\nInput: head = [1,2], pos = 0\nOutput: true\nExplanation: There is a cycle in the linked list, where the tail connects to the 0th node.\n\n\nExample 3:\nInput: head = [1], pos = -1\nOutput: false\nExplanation: There is no cycle in the linked list.\n\n\nConstraints:\nThe number of the nodes in the list is in the range `[0, 104]`.\n\n`-105 <= Node.val <= 105`\n`pos` is `-1` or a valid index in the linked-list.\n\nFollow up: Can you solve it using `O(1)` (i.e. constant) memory?','\n',char(10)));
INSERT INTO task_task VALUES(27,'Palindrome Linked List','Easy',replace('Given the `head` of a singly linked list, return `true` if it is a palindrome.\n\n\nExample 1:\nInput: head = [1,2,2,1]\nOutput: true\n\nExample 2:\nInput: head = [1,2]\nOutput: false\n\nConstraints:\nThe number of nodes in the list is in the range `[1, 105]`.\n\n`0 <= Node.val <= 9`\nFollow up: Could you do it in `O(n)` time and `O(1)` space?','\n',char(10)));
INSERT INTO task_task VALUES(28,'Group Anagrams','Medium',replace('Given an array of strings `strs`, group the anagrams together. You can return the answer in any order.\n\nAn Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n\n\nExample 1:\nInput: strs = ["eat","tea","tan","ate","nat","bat"]\nOutput: [["bat"],["nat","tan"],["ate","eat","tea"]]\n\nExample 2:\nInput: strs = [""]\nOutput: [[""]]\n\nExample 3:\nInput: strs = ["a"]\nOutput: [["a"]]\n\nConstraints:\n`1 <= strs.length <= 104`\n`0 <= strs[i].length <= 100`\n`strs[i]` consists of lower-case English letters.','\n',char(10)));
INSERT INTO task_task VALUES(29,'Word Pattern','Easy',replace('Given a `pattern` and a string `s`, find if `s` follows the same pattern.\n\nHere follow means a full match, such that there is a bijection between a letter in `pattern` and a non-empty word in `s`.\n\n\nExample 1:\nInput: pattern = "abba", s = "dog cat cat dog"\nOutput: true\n\nExample 2:\nInput: pattern = "abba", s = "dog cat cat fish"\nOutput: false\n\nExample 3:\nInput: pattern = "aaaa", s = "dog cat cat dog"\nOutput: false\n\nExample 4:\nInput: pattern = "abba", s = "dog dog dog dog"\nOutput: false\n\nConstraints:\n`1 <= pattern.length <= 300`\n`pattern` contains only lower-case English letters.\n\n`1 <= s.length <= 3000`\n`s` contains only lower-case English letters and spaces `'' ''`.\n\n`s` does not contain any leading or trailing spaces.\n\nAll the words in `s` are separated by a single space.','\n',char(10)));
INSERT INTO task_task VALUES(30,'Ransom Note','Easy',replace('Given an arbitrary ransom note string and another string containing letters from all the magazines, write a function that will return true if the ransom note can be constructed from the magazines ; otherwise, it will return false.\n\nEach letter in the magazine string can only be used once in your ransom note.\n\n\nExample 1:\nInput: ransomNote = "a", magazine = "b"\nOutput: false\n\nExample 2:\nInput: ransomNote = "aa", magazine = "ab"\nOutput: false\n\nExample 3:\nInput: ransomNote = "aa", magazine = "aab"\nOutput: true\n\nConstraints:\nYou may assume that both strings contain only lowercase letters.','\n',char(10)));
INSERT INTO task_task VALUES(31,'Count Complete Tree Nodes','Medium',replace('Given the `root` of a complete binary tree, return the number of the nodes in the tree.\n\nAccording to Wikipedia, every level, except possibly the last, is completely filled in a complete binary tree, and all nodes in the last level are as far left as possible. It can have between `1` and `2h` nodes inclusive at the last level `h`.\n\n\nExample 1:\nInput: root = [1,2,3,4,5,6]\nOutput: 6\n\nExample 2:\nInput: root = []\nOutput: 0\n\nExample 3:\nInput: root = [1]\nOutput: 1\n\nConstraints:\nThe number of nodes in the tree is in the range `[0, 5 * 104]`.\n\n`0 <= Node.val <= 5 * 104`\nThe tree is guaranteed to be complete.\n\nFollow up: Traversing the tree to count the number of nodes in the tree is an easy solution but with `O(n)` complexity. Could you find a faster algorithm?','\n',char(10)));
INSERT INTO task_task VALUES(32,'Search Insert Position','Easy',replace('Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\n\n\nExample 1:\nInput: nums = [1,3,5,6], target = 5\nOutput: 2\n\nExample 2:\nInput: nums = [1,3,5,6], target = 2\nOutput: 1\n\nExample 3:\nInput: nums = [1,3,5,6], target = 7\nOutput: 4\n\nExample 4:\nInput: nums = [1,3,5,6], target = 0\nOutput: 0\n\nExample 5:\nInput: nums = [1], target = 0\nOutput: 0\n\nConstraints:\n`1 <= nums.length <= 104`\n`-104 <= nums[i] <= 104`\n`nums` contains distinct values sorted in ascending order.\n\n`-104 <= target <= 104`','\n',char(10)));
INSERT INTO task_task VALUES(33,'Contains Duplicate II','Easy',replace('Given an integer array `nums` and an integer `k`, return `true` if there are two distinct indices `i` and `j` in the array such that `nums[i] == nums[j]` and `abs(i - j) <= k`.\n\n\nExample 1:\nInput: nums = [1,2,3,1], k = 3\nOutput: true\n\nExample 2:\nInput: nums = [1,0,1,1], k = 1\nOutput: true\n\nExample 3:\nInput: nums = [1,2,3,1,2,3], k = 2\nOutput: false\n\nConstraints:\n`1 <= nums.length <= 105`\n`-109 <= nums[i] <= 109`\n`0 <= k <= 105`','\n',char(10)));
INSERT INTO task_task VALUES(34,'Reverse Words in a String','Medium',replace('Given an input string `s`, reverse the order of the words.\n\nA word is defined as a sequence of non-space characters. The words in `s` will be separated by at least one space.\n\nReturn a string of the words in reverse order concatenated by a single space.\n\nNote that `s` may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.\n\n\nExample 1:\nInput: s = "the sky is blue"\nOutput: "blue is sky the"\n\nExample 2:\nInput: s = "  hello world  "\nOutput: "world hello"\nExplanation: Your reversed string should not contain leading or trailing spaces.\n\n\nExample 3:\nInput: s = "a good   example"\nOutput: "example good a"\nExplanation: You need to reduce multiple spaces between two words to a single space in the reversed string.\n\n\nExample 4:\nInput: s = "  Bob    Loves  Alice   "\nOutput: "Alice Loves Bob"\n\nExample 5:\nInput: s = "Alice does not even like bob"\nOutput: "bob like even not does Alice"\n\nConstraints:\n`1 <= s.length <= 104`\n`s` contains English letters (upper-case and lower-case), digits, and spaces `'' ''`.\n\nThere is at least one word in `s`.\n\nFollow up: Could you solve it in-place with `O(1)` extra space?','\n',char(10)));
INSERT INTO task_task VALUES(35,'Remove Duplicates from Sorted Array','Easy',replace('Given a sorted array nums, remove the duplicates in-place such that each element appears only once and returns the new length.\n\nDo not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.\n\nClarification:\nConfused why the returned value is an integer but your answer is an array?\nNote that the input array is passed in by reference, which means a modification to the input array will be known to the caller as well.\n\nInternally you can think of this:\n// nums is passed in by reference. (i.e., without making a copy)\nint len = removeDuplicates(nums);\n// any modification to nums in your function would be known by the caller.\n\n// using the length returned by your function, it prints the first len elements.\n\nfor (int i = 0; i < len; i++) {\n    print(nums[i]);\n}\n\nExample 1:\nInput: nums = [1,1,2]\nOutput: 2, nums = [1,2]\nExplanation: Your function should return length = `2`, with the first two elements of `nums` being `1` and `2` respectively. It doesn''t matter what you leave beyond the returned length.\n\n\nExample 2:\nInput: nums = [0,0,1,1,1,2,2,3,3,4]\nOutput: 5, nums = [0,1,2,3,4]\nExplanation: Your function should return length = `5`, with the first five elements of `nums` being modified to `0`, `1`, `2`, `3`, and `4` respectively. It doesn''t matter what values are set beyond the returned length.\n\n\nConstraints:\n`0 <= nums.length <= 3 * 104`\n`-104 <= nums[i] <= 104`\n`nums` is sorted in ascending order.','\n',char(10)));
INSERT INTO task_task VALUES(36,'Remove Element','Easy',replace('Given an array nums and a value `val`, remove all instances of that value in-place and return the new length.\n\nDo not allocate extra space for another array, you must do this by modifying the input array in-place with `O(1)` extra memory.\n\nThe order of elements can be changed. It doesn''t matter what you leave beyond the new length.\n\nClarification:\nConfused why the returned value is an integer but your answer is an array?\nNote that the input array is passed in by reference, which means a modification to the input array will be known to the caller as well.\n\nInternally you can think of this:\n// nums is passed in by reference. (i.e., without making a copy)\nint len = removeElement(nums, val);\n// any modification to nums in your function would be known by the caller.\n\n// using the length returned by your function, it prints the first len elements.\n\nfor (int i = 0; i < len; i++) {\n    print(nums[i]);\n}\n\nExample 1:\nInput: nums = [3,2,2,3], val = 3\nOutput: 2, nums = [2,2]\nExplanation: Your function should return length = 2, with the first two elements of nums being 2.\n\nIt doesn''t matter what you leave beyond the returned length. For example if you return 2 with nums = [2,2,3,3] or nums = [2,2,0,0], your answer will be accepted.\n\n\nExample 2:\nInput: nums = [0,1,2,2,3,0,4,2], val = 2\nOutput: 5, nums = [0,1,4,0,3]\nExplanation: Your function should return length = `5`, with the first five elements of `nums` containing `0`, `1`, `3`, `0`, and 4. Note that the order of those five elements can be arbitrary. It doesn''t matter what values are set beyond the returned length.\n\n\nConstraints:\n`0 <= nums.length <= 100`\n`0 <= nums[i] <= 50`\n`0 <= val <= 100`','\n',char(10)));
INSERT INTO task_task VALUES(37,'Remove All Adjacent Duplicates In String','Easy',replace('Given a string `S` of lowercase letters, a duplicate removal consists of choosing two adjacent and equal letters, and removing them.\n\nWe repeatedly make duplicate removals on S until we no longer can.\n\nReturn the final string after all such duplicate removals have been made.  It is guaranteed the answer is unique.\n\n\nExample 1:\nInput: "abbaca"\nOutput: "ca"\nExplanation: \nFor example, in "abbaca" we could remove "bb" since the letters are adjacent and equal, and this is the only possible move.  The result of this move is that the string is "aaca", of which only "aa" is possible, so the final string is "ca".\n\nNote:\n`1 <= S.length <= 20000`\n`S` consists only of English lowercase letters.','\n',char(10)));
INSERT INTO task_task VALUES(38,'Same Tree','Easy',replace('Given the roots of two binary trees `p` and `q`, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical, and the nodes have the same value.\n\n\nExample 1:\nInput: p = [1,2,3], q = [1,2,3]\nOutput: true\n\nExample 2:\nInput: p = [1,2], q = [1,null,2]\nOutput: false\n\nExample 3:\nInput: p = [1,2,1], q = [1,1,2]\nOutput: false\n\nConstraints:\nThe number of nodes in both trees is in the range `[0, 100]`.\n\n`-104 <= Node.val <= 104`','\n',char(10)));
INSERT INTO task_task VALUES(39,'Count Negative Numbers in a Sorted Matrix','Easy',replace('Given a `m x n` matrix `grid` which is sorted in non-increasing order both row-wise and column-wise, return the number of negative numbers in `grid`.\n\n\nExample 1:\nInput: grid = [[4,3,2,-1],[3,2,1,-1],[1,1,-1,-2],[-1,-1,-2,-3]]\nOutput: 8\nExplanation: There are 8 negatives number in the matrix.\n\n\nExample 2:\nInput: grid = [[3,2],[1,0]]\nOutput: 0\n\nExample 3:\nInput: grid = [[1,-1],[-1,-1]]\nOutput: 3\n\nExample 4:\nInput: grid = [[-1]]\nOutput: 1\n\nConstraints:\n`m == grid.length`\n`n == grid[i].length`\n`1 <= m, n <= 100`\n`-100 <= grid[i][j] <= 100`\nFollow up: Could you find an `O(n + m)` solution?','\n',char(10)));
INSERT INTO task_task VALUES(40,'Best Time to Buy and Sell Stock II','Easy',replace('You are given an array `prices` where `prices[i]` is the price of a given stock on the `ith` day.\n\nFind the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times).\n\nNote: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\n\n\nExample 1:\nInput: prices = [7,1,5,3,6,4]\nOutput: 7\nExplanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.\n\nThen buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.\n\n\nExample 2:\nInput: prices = [1,2,3,4,5]\nOutput: 4\nExplanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\n\nNote that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.\n\n\nExample 3:\nInput: prices = [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transaction is done, i.e., max profit = 0.\n\n\nConstraints:\n`1 <= prices.length <= 3 * 104`\n`0 <= prices[i] <= 104`','\n',char(10)));
INSERT INTO task_task VALUES(41,'Add Digits','Easy',replace('Given an integer `num`, repeatedly add all its digits until the result has only one digit, and return it.\n\n\nExample 1:\nInput: num = 38\nOutput: 2\nExplanation: The process is\n38 --> 3 + 8 --> 11\n11 --> 1 + 1 --> 2 \nSince 2 has only one digit, return it.\n\n\nExample 2:\nInput: num = 0\nOutput: 0\n\nConstraints:\n`0 <= num <= 231 - 1`\nFollow up: Could you do it without any loop/recursion in `O(1)` runtime?','\n',char(10)));
INSERT INTO task_task VALUES(42,'Count Integers With Even Digit Sum','Easy',replace('Given a positive integer num, return the number of positive integers less than or equal to num whose digit sums are even.\n\nThe digit sum of a positive integer is the sum of all its digits.\n\n \n\nExample 1:\n\nInput: num = 4\nOutput: 2\nExplanation:\nThe only integers less than or equal to 4 whose digit sums are even are 2 and 4.    \nExample 2:\n\nInput: num = 30\nOutput: 14\nExplanation:\nThe 14 integers less than or equal to 30 whose digit sums are even are\n2, 4, 6, 8, 11, 13, 15, 17, 19, 20, 22, 24, 26, and 28.\n \n\nConstraints:\n\n1 <= num <= 1000','\n',char(10)));
INSERT INTO task_task VALUES(43,'Binary Search','Easy',replace('Given an array of integers `nums` which is sorted in ascending order, and an integer `target`, write a function to search `target` in `nums`. If `target` exists, then return its index. Otherwise, return `-1`.\n\n\nExample 1:\nInput: nums = [-1,0,3,5,9,12], target = 9\nOutput: 4\nExplanation: 9 exists in nums and its index is 4\n\nExample 2:\nInput: nums = [-1,0,3,5,9,12], target = 2\nOutput: -1\nExplanation: 2 does not exist in nums so return -1\n\nConstraints:\n`1 <= nums.length <= 104`\n`-9999 <= nums[i], target <= 9999`\nAll the integers in `nums` are unique.\n\n`nums` is sorted in an ascending order.','\n',char(10)));
INSERT INTO task_task VALUES(44,'Subtree of Another Tree','Easy',replace('Given two non-empty binary trees s and t, check whether tree t has exactly the same structure and node values with a subtree of s. A subtree of s is a tree consists of a node in s and all of this node''s descendants. The tree s could also be considered as a subtree of itself.\n\n\nExample 1:\nGiven tree s:\n     3\n    / \\n   4   5\n  / \\n 1   2\nGiven tree t:\n   4 \n  / \\n 1   2\nReturn true, because t has the same structure and node values with a subtree of s.\n\n\nExample 2:\nGiven tree s:\n     3\n    / \\n   4   5\n  / \\n 1   2\n    /\n   0\nGiven tree t:\n   4\n  / \\n 1   2\nReturn false.','\n',char(10)));
INSERT INTO task_task VALUES(45,'Last Stone Weight','Easy',replace('We have a collection of stones, each stone has a positive integer weight.\n\nEach turn, we choose the two heaviest stones and smash them together.  Suppose the stones have weights `x` and `y` with `x <= y`.  The result of this smash is:\nIf `x == y`, both stones are totally destroyed;\nIf `x != y`, the stone of weight `x` is totally destroyed, and the stone of weight `y` has new weight `y-x`.\n\nAt the end, there is at most 1 stone left.  Return the weight of this stone (or 0 if there are no stones left.)\n\nExample 1:\nInput: [2,7,4,1,8,1]\nOutput: 1\nExplanation: \nWe combine 7 and 8 to get 1 so the array converts to [2,4,1,1,1] then,\nwe combine 2 and 4 to get 2 so the array converts to [2,1,1,1] then,\nwe combine 2 and 1 to get 1 so the array converts to [1,1,1] then,\nwe combine 1 and 1 to get 0 so the array converts to [1] then that''s the value of last stone.\n\nNote:\n`1 <= stones.length <= 30`\n`1 <= stones[i] <= 1000`','\n',char(10)));
INSERT INTO task_task VALUES(46,'Climbing Stairs','Easy',replace('You are climbing a staircase. It takes `n` steps to reach the top.\n\nEach time you can either climb `1` or `2` steps. In how many distinct ways can you climb to the top?\n\nExample 1:\nInput: n = 2\nOutput: 2\nExplanation: There are two ways to climb to the top.\n\n1. 1 step + 1 step\n2. 2 steps\n\nExample 2:\nInput: n = 3\nOutput: 3\nExplanation: There are three ways to climb to the top.\n\n1. 1 step + 1 step + 1 step\n2. 1 step + 2 steps\n3. 2 steps + 1 step\n\nConstraints:\n`1 <= n <= 45`','\n',char(10)));
INSERT INTO task_task VALUES(47,'Happy Number','Easy',replace('Write an algorithm to determine if a number n is happy.\n\nA happy number is a number defined by the following process:\n\nStarting with any positive integer, replace the number by the sum of the squares of its digits.\nRepeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.\nThose numbers for which this process ends in 1 are happy.\nReturn true if n is a happy number, and false if not.\n\n \n\nExample 1:\n\nInput: n = 19\nOutput: true\nExplanation:\n12 + 92 = 82\n82 + 22 = 68\n62 + 82 = 100\n12 + 02 + 02 = 1\nExample 2:\n\nInput: n = 2\nOutput: false\n \n\nConstraints:\n\n1 <= n <= 231 - 1','\n',char(10)));
INSERT INTO task_task VALUES(48,'Add Two Numbers','Medium',replace('You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\n\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\n\n\nExample 1:\nInput: l1 = [2,4,3], l2 = [5,6,4]\nOutput: [7,0,8]\nExplanation: 342 + 465 = 807.\n\n\nExample 2:\nInput: l1 = [0], l2 = [0]\nOutput: [0]\n\nExample 3:\nInput: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\nOutput: [8,9,9,9,0,0,0,1]\n\nConstraints:\nThe number of nodes in each linked list is in the range `[1, 100]`.\n\n`0 <= Node.val <= 9`\nIt is guaranteed that the list represents a number that does not have leading zeros.','\n',char(10)));
INSERT INTO task_task VALUES(49,'Intersection of Two Linked Lists','Easy',replace('Given the heads of two singly linked-lists `headA` and `headB`, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return `null`.\n\nFor example, the following two linked lists begin to intersect at node `c1`:\nIt is guaranteed that there are no cycles anywhere in the entire linked structure.\n\nNote that the linked lists must retain their original structure after the function returns.\n\n\nExample 1:\nInput: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3\nOutput: Intersected at ''8''\nExplanation: The intersected node''s value is 8 (note that this must not be 0 if the two lists intersect).\n\nFrom the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,6,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.\n\n\nExample 2:\nInput: intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1\nOutput: Intersected at ''2''\nExplanation: The intersected node''s value is 2 (note that this must not be 0 if the two lists intersect).\n\nFrom the head of A, it reads as [1,9,1,2,4]. From the head of B, it reads as [3,2,4]. There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B.\n\n\nExample 3:\nInput: intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2\nOutput: No intersection\nExplanation: From the head of A, it reads as [2,6,4]. From the head of B, it reads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values.\n\nExplanation: The two lists do not intersect, so return null.\n\n\nConstraints:\nThe number of nodes of `listA` is in the `m`.\n\nThe number of nodes of `listB` is in the `n`.\n\n`0 <= m, n <= 3 * 104`\n`1 <= Node.val <= 105`\n`0 <= skipA <= m`\n`0 <= skipB <= n`\n`intersectVal` is `0` if `listA` and `listB` do not intersect.\n\n`intersectVal == listA[skipA + 1] == listB[skipB + 1]` if `listA` and `listB` intersect.\n\nFollow up: Could you write a solution that runs in `O(n)` time and use only `O(1)` memory?','\n',char(10)));
INSERT INTO task_task VALUES(50,'Word Search','Medium',replace('Given an `m x n` grid of characters `board` and a string `word`, return `true` if `word` exists in the grid.\n\nThe word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.\n\n\nExample 1:\nInput: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED"\nOutput: true\n\nExample 2:\nInput: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "SEE"\nOutput: true\n\nExample 3:\nInput: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCB"\nOutput: false\n\nConstraints:\n`m == board.length`\n`n = board[i].length`\n`1 <= m, n <= 6`\n`1 <= word.length <= 15`\n`board` and `word` consists of only lowercase and uppercase English letters.\n\nFollow up: Could you use search pruning to make your solution faster with a larger `board`?','\n',char(10)));
INSERT INTO task_task VALUES(51,'Subsets','Medium',replace('Given an integer array `nums` of unique elements, return all possible subsets (the power set).\n\nThe solution set must not contain duplicate subsets. Return the solution in any order.\n\n\nExample 1:\nInput: nums = [1,2,3]\nOutput: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]\n\nExample 2:\nInput: nums = [0]\nOutput: [[],[0]]\n\nConstraints:\n`1 <= nums.length <= 10`\n`-10 <= nums[i] <= 10`\nAll the numbers of `nums` are unique.','\n',char(10)));
INSERT INTO task_task VALUES(52,'Sort Colors','Medium',replace('Given an array `nums` with `n` objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.\n\nWe will use the integers `0`, `1`, and `2` to represent the color red, white, and blue, respectively.\n\n\nExample 1:\nInput: nums = [2,0,2,1,1,0]\nOutput: [0,0,1,1,2,2]\n\nExample 2:\nInput: nums = [2,0,1]\nOutput: [0,1,2]\n\nExample 3:\nInput: nums = [0]\nOutput: [0]\n\nExample 4:\nInput: nums = [1]\nOutput: [1]\n\nConstraints:\n`n == nums.length`\n`1 <= n <= 300`\n`nums[i]` is `0`, `1`, or `2`.\n\nFollow up:\nCould you solve this problem without using the library''s sort function?\nCould you come up with a one-pass algorithm using only `O(1)` constant space?','\n',char(10)));
INSERT INTO task_task VALUES(53,'Kth Largest Element in an Array','Medium',replace('Given an integer array `nums` and an integer `k`, return the `kth` largest element in the array.\n\nNote that it is the `kth` largest element in the sorted order, not the `kth` distinct element.\n\n\nExample 1:\nInput: nums = [3,2,1,5,6,4], k = 2\nOutput: 5\n\nExample 2:\nInput: nums = [3,2,3,1,2,4,5,5,6], k = 4\nOutput: 4\n\nConstraints:\n`1 <= k <= nums.length <= 104`\n`-104 <= nums[i] <= 104`','\n',char(10)));
INSERT INTO task_task VALUES(54,'Find Peak Element','Medium',replace('A peak element is an element that is strictly greater than its neighbors.\n\nGiven an integer array `nums`, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.\n\nYou may imagine that `nums[-1] = nums[n] = -∞`.\n\n\nExample 1:\nInput: nums = [1,2,3,1]\nOutput: 2\nExplanation: 3 is a peak element and your function should return the index number 2.\n\n\nExample 2:\nInput: nums = [1,2,1,3,5,6,4]\nOutput: 5\nExplanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.\n\n\nConstraints:\n`1 <= nums.length <= 1000`\n`-231 <= nums[i] <= 231 - 1`\n`nums[i] != nums[i + 1]` for all valid `i`.\n\nFollow up: Could you implement a solution with logarithmic complexity?','\n',char(10)));
INSERT INTO task_task VALUES(55,'Divide Two Integers','Medium',replace('Given two integers `dividend` and `divisor`, divide two integers without using multiplication, division, and mod operator.\n\nReturn the quotient after dividing `dividend` by `divisor`.\n\nThe integer division should truncate toward zero, which means losing its fractional part. For example, `truncate(8.345) = 8` and `truncate(-2.7335) = -2`.\n\nNote: Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: `[−231, 231 − 1]`. For this problem, assume that your function returns `231 − 1` when the division result overflows.\n\n\nExample 1:\nInput: dividend = 10, divisor = 3\nOutput: 3\nExplanation: 10/3 = truncate(3.33333..) = 3.\n\n\nExample 2:\nInput: dividend = 7, divisor = -3\nOutput: -2\nExplanation: 7/-3 = truncate(-2.33333..) = -2.\n\n\nExample 3:\nInput: dividend = 0, divisor = 1\nOutput: 0\n\nExample 4:\nInput: dividend = 1, divisor = 1\nOutput: 1\n\nConstraints:\n`-231 <= dividend, divisor <= 231 - 1`\n`divisor != 0`','\n',char(10)));
INSERT INTO task_task VALUES(56,'Sum of Two Integers','Medium',replace('Given two integers `a` and `b`, return the sum of the two integers without using the operators `+` and `-`.\n\n\nExample 1:\nInput: a = 1, b = 2\nOutput: 3\n\nExample 2:\nInput: a = 2, b = 3\nOutput: 5\n\nConstraints:\n`-1000 <= a, b <= 1000`','\n',char(10)));
INSERT INTO task_task VALUES(57,'Majority Element','Easy',replace('Given an array `nums` of size `n`, return the majority element.\n\nThe majority element is the element that appears more than `⌊n / 2⌋` times. You may assume that the majority element always exists in the array.\n\n\nExample 1:\nInput: nums = [3,2,3]\nOutput: 3\n\nExample 2:\nInput: nums = [2,2,1,1,1,2,2]\nOutput: 2\n\nConstraints:\n`n == nums.length`\n`1 <= n <= 5 * 104`\n`-231 <= nums[i] <= 231 - 1`\nFollow-up: Could you solve the problem in linear time and in `O(1)` space?','\n',char(10)));
INSERT INTO task_task VALUES(58,'Kth Smallest Element in a BST','Medium',replace('Given the `root` of a binary search tree, and an integer `k`, return the `kth` (1-indexed) smallest element in the tree.\n\n\nExample 1:\nInput: root = [3,1,4,null,2], k = 1\nOutput: 1\n\nExample 2:\nInput: root = [5,3,6,2,4,null,null,1], k = 3\nOutput: 3\n\nConstraints:\nThe number of nodes in the tree is `n`.\n\n`1 <= k <= n <= 104`\n`0 <= Node.val <= 104`\nFollow up: If the BST is modified often (i.e., we can do insert and delete operations) and you need to find the kth smallest frequently, how would you optimize?','\n',char(10)));
INSERT INTO task_task VALUES(59,'3Sum','Medium',replace('Given an integer array nums, return all the triplets `[nums[i], nums[j], nums[k]]` such that `i != j`, `i != k`, and `j != k`, and `nums[i] + nums[j] + nums[k] == 0`.\n\nNotice that the solution set must not contain duplicate triplets.\n\n\nExample 1:\nInput: nums = [-1,0,1,2,-1,-4]\nOutput: [[-1,-1,2],[-1,0,1]]\n\nExample 2:\nInput: nums = []\nOutput: []\n\nExample 3:\nInput: nums = [0]\nOutput: []\n\nConstraints:\n`0 <= nums.length <= 3000`\n`-105 <= nums[i] <= 105`','\n',char(10)));
INSERT INTO task_task VALUES(60,'Remove Duplicates from Sorted Array II','Medium',replace('Given a sorted array nums, remove the duplicates in-place such that duplicates appeared at most twice and return the new length.\n\nDo not allocate extra space for another array; you must do this by modifying the input array in-place with O(1) extra memory.\n\nClarification:\nConfused why the returned value is an integer, but your answer is an array?\nNote that the input array is passed in by reference, which means a modification to the input array will be known to the caller.\n\nInternally you can think of this:\n// nums is passed in by reference. (i.e., without making a copy)\nint len = removeDuplicates(nums);\n// any modification to nums in your function would be known by the caller.\n\n// using the length returned by your function, it prints the first len elements.\n\nfor (int i = 0; i < len; i++) {\n    print(nums[i]);\n}\n\nExample 1:\nInput: nums = [1,1,1,2,2,3]\nOutput: 5, nums = [1,1,2,2,3]\nExplanation: Your function should return length = `5`, with the first five elements of `nums` being `1, 1, 2, 2` and 3 respectively. It doesn''t matter what you leave beyond the returned length.\n\n\nExample 2:\nInput: nums = [0,0,1,1,1,1,2,3,3]\nOutput: 7, nums = [0,0,1,1,2,3,3]\nExplanation: Your function should return length = `7`, with the first seven elements of `nums` being modified to `0`, 0, 1, 1, 2, 3 and 3 respectively. It doesn''t matter what values are set beyond the returned length.\n\n\nConstraints:\n`1 <= nums.length <= 3 * 104`\n`-104 <= nums[i] <= 104`\n`nums` is sorted in ascending order.','\n',char(10)));
INSERT INTO task_task VALUES(61,'Maximum Product Subarray','Medium',replace('Given an integer array `nums`, find a contiguous non-empty subarray within the array that has the largest product, and return the product.\n\nIt is guaranteed that the answer will fit in a 32-bit integer.\n\nA subarray is a contiguous subsequence of the array.\n\n\nExample 1:\nInput: nums = [2,3,-2,4]\nOutput: 6\nExplanation: [2,3] has the largest product 6.\n\n\nExample 2:\nInput: nums = [-2,0,-1]\nOutput: 0\nExplanation: The result cannot be 2, because [-2,-1] is not a subarray.\n\n\nConstraints:\n`1 <= nums.length <= 2 * 104`\n`-10 <= nums[i] <= 10`\nThe product of any prefix or suffix of `nums` is guaranteed to fit in a 32-bit integer.','\n',char(10)));
INSERT INTO task_task VALUES(62,'Combination Sum','Medium',replace('Given an array of distinct integers `candidates` and a target integer `target`, return a list of all unique combinations of `candidates` where the chosen numbers sum to `target`. You may return the combinations in any order.\n\nThe same number may be chosen from `candidates` an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.\n\nIt is guaranteed that the number of unique combinations that sum up to `target` is less than `150` combinations for the given input.\n\n\nExample 1:\nInput: candidates = [2,3,6,7], target = 7\nOutput: [[2,2,3],[7]]\nExplanation:\n2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.\n\n7 is a candidate, and 7 = 7.\n\nThese are the only two combinations.\n\n\nExample 2:\nInput: candidates = [2,3,5], target = 8\nOutput: [[2,2,2,2],[2,3,3],[3,5]]\n\nExample 3:\nInput: candidates = [2], target = 1\nOutput: []\n\nExample 4:\nInput: candidates = [1], target = 1\nOutput: [[1]]\n\nExample 5:\nInput: candidates = [1], target = 2\nOutput: [[1,1]]\n\nConstraints:\n`1 <= candidates.length <= 30`\n`1 <= candidates[i] <= 200`\nAll elements of `candidates` are distinct.\n\n`1 <= target <= 500`','\n',char(10)));
INSERT INTO task_task VALUES(63,'Permutations','Medium',replace('Given an array `nums` of distinct integers, return all the possible permutations. You can return the answer in any order.\n\n\nExample 1:\nInput: nums = [1,2,3]\nOutput: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n\nExample 2:\nInput: nums = [0,1]\nOutput: [[0,1],[1,0]]\n\nExample 3:\nInput: nums = [1]\nOutput: [[1]]\n\nConstraints:\n`1 <= nums.length <= 6`\n`-10 <= nums[i] <= 10`\nAll the integers of `nums` are unique.','\n',char(10)));
INSERT INTO task_task VALUES(64,'Word Break','Medium',replace('Given a string `s` and a dictionary of strings `wordDict`, return `true` if `s` can be segmented into a space-separated sequence of one or more dictionary words.\n\nNote that the same word in the dictionary may be reused multiple times in the segmentation.\n\n\nExample 1:\nInput: s = "leetcode", wordDict = ["leet","code"]\nOutput: true\nExplanation: Return true because "leetcode" can be segmented as "leet code".\n\n\nExample 2:\nInput: s = "applepenapple", wordDict = ["apple","pen"]\nOutput: true\nExplanation: Return true because "applepenapple" can be segmented as "apple pen apple".\n\nNote that you are allowed to reuse a dictionary word.\n\n\nExample 3:\nInput: s = "catsandog", wordDict = ["cats","dog","sand","and","cat"]\nOutput: false\n\nConstraints:\n`1 <= s.length <= 300`\n`1 <= wordDict.length <= 1000`\n`1 <= wordDict[i].length <= 20`\n`s` and `wordDict[i]` consist of only lowercase English letters.\n\nAll the strings of `wordDict` are unique.','\n',char(10)));
INSERT INTO task_task VALUES(65,'Find All Anagrams in a String','Medium',replace('Given a string s and a non-empty string p, find all the start indices of p''s anagrams in s.\n\nStrings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.\n\nThe order of output does not matter.\n\n\nExample 1:\nInput:\ns: "cbaebabacd" p: "abc"\nOutput:\n[0, 6]\nExplanation:\nThe substring with start index = 0 is "cba", which is an anagram of "abc".\n\nThe substring with start index = 6 is "bac", which is an anagram of "abc".\n\n\nExample 2:\nInput:\ns: "abab" p: "ab"\nOutput:\n[0, 1, 2]\nExplanation:\nThe substring with start index = 0 is "ab", which is an anagram of "ab".\n\nThe substring with start index = 1 is "ba", which is an anagram of "ab".\n\nThe substring with start index = 2 is "ab", which is an anagram of "ab".','\n',char(10)));
INSERT INTO task_task VALUES(66,'Merge Intervals','Medium',replace('Given an array of `intervals` where `intervals[i] = [starti, endi]`, merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.\n\n\nExample 1:\nInput: intervals = [[1,3],[2,6],[8,10],[15,18]]\nOutput: [[1,6],[8,10],[15,18]]\nExplanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].\n\n\nExample 2:\nInput: intervals = [[1,4],[4,5]]\nOutput: [[1,5]]\nExplanation: Intervals [1,4] and [4,5] are considered overlapping.\n\n\nConstraints:\n`1 <= intervals.length <= 104`\n`intervals[i].length == 2`\n`0 <= starti <= endi <= 104`','\n',char(10)));
INSERT INTO task_task VALUES(67,'Maximum Subarray','Easy',replace('Given an integer array `nums`, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.\n\n\nExample 1:\nInput: nums = [-2,1,-3,4,-1,2,1,-5,4]\nOutput: 6\nExplanation: [4,-1,2,1] has the largest sum = 6.\n\n\nExample 2:\nInput: nums = [1]\nOutput: 1\n\nExample 3:\nInput: nums = [5,4,-1,7,8]\nOutput: 23\n\nConstraints:\n`1 <= nums.length <= 3 * 104`\n`-105 <= nums[i] <= 105`\nFollow up: If you have figured out the `O(n)` solution, try coding another solution using the divide and conquer approach, which is more subtle.','\n',char(10)));
INSERT INTO task_task VALUES(68,'Binary Tree Right Side View','Medium',replace('Given the `root` of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.\n\n\nExample 1:\nInput: root = [1,2,3,null,5,null,4]\nOutput: [1,3,4]\n\nExample 2:\nInput: root = [1,null,3]\nOutput: [1,3]\n\nExample 3:\nInput: root = []\nOutput: []\n\nConstraints:\nThe number of nodes in the tree is in the range `[0, 100]`.\n\n`-100 <= Node.val <= 100`','\n',char(10)));
INSERT INTO task_task VALUES(69,'Search in Rotated Sorted Array','Medium',replace('There is an integer array `nums` sorted in ascending order (with distinct values).\n\nPrior to being passed to your function, `nums` is rotated at an unknown pivot index `k` (`0 <= k < nums.length`) such that the resulting array is `[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]` (0-indexed). For example, `[0,1,2,4,5,6,7]` might be rotated at pivot index `3` and become `[4,5,6,7,0,1,2]`.\n\nGiven the array `nums` after the rotation and an integer `target`, return the index of `target` if it is in `nums`, or `-1` if it is not in `nums`.\n\n\nExample 1:\nInput: nums = [4,5,6,7,0,1,2], target = 0\nOutput: 4\n\nExample 2:\nInput: nums = [4,5,6,7,0,1,2], target = 3\nOutput: -1\n\nExample 3:\nInput: nums = [1], target = 0\nOutput: -1\n\nConstraints:\n`1 <= nums.length <= 5000`\n`-104 <= nums[i] <= 104`\nAll values of `nums` are unique.\n\n`nums` is guaranteed to be rotated at some pivot.\n\n`-104 <= target <= 104`\nFollow up: Can you achieve this in `O(log n)` time complexity?','\n',char(10)));
INSERT INTO task_task VALUES(70,'Replace Words','Medium',replace('In English, we have a concept called root, which can be followed by some other word to form another longer word - let''s call this word successor. For example, when the root `"an"` is followed by the successor word `"other"`, we can form a new word `"another"`.\n\nGiven a `dictionary` consisting of many roots and a `sentence` consisting of words separated by spaces, replace all the successors in the sentence with the root forming it. If a successor can be replaced by more than one root, replace it with the root that has the shortest length.\n\nReturn the `sentence` after the replacement.\n\n\nExample 1:\nInput: dictionary = ["cat","bat","rat"], sentence = "the cattle was rattled by the battery"\nOutput: "the cat was rat by the bat"\n\nExample 2:\nInput: dictionary = ["a","b","c"], sentence = "aadsfasf absbs bbab cadsfafs"\nOutput: "a a b c"\n\nExample 3:\nInput: dictionary = ["a", "aa", "aaa", "aaaa"], sentence = "a aa a aaaa aaa aaa aaa aaaaaa bbb baba ababa"\nOutput: "a a a a a a a a bbb baba a"\n\nExample 4:\nInput: dictionary = ["catt","cat","bat","rat"], sentence = "the cattle was rattled by the battery"\nOutput: "the cat was rat by the bat"\n\nExample 5:\nInput: dictionary = ["ac","ab"], sentence = "it is abnormal that this solution is accepted"\nOutput: "it is ab that this solution is ac"\n\nConstraints:\n`1 <= dictionary.length <= 1000`\n`1 <= dictionary[i].length <= 100`\n`dictionary[i]` consists of only lower-case letters.\n\n`1 <= sentence.length <= 10^6`\n`sentence` consists of only lower-case letters and spaces.\n\nThe number of words in `sentence` is in the range `[1, 1000]`\nThe length of each word in `sentence` is in the range `[1, 1000]`\nEach two consecutive words in `sentence` will be separated by exactly one space.\n\n`sentence` does not have leading or trailing spaces.','\n',char(10)));
INSERT INTO task_task VALUES(71,'Validate Binary Search Tree','Medium',replace('Given the `root` of a binary tree, determine if it is a valid binary search tree (BST).\n\nA valid BST is defined as follows:\nThe left subtree of a node contains only nodes with keys less than the node''s key.\n\nThe right subtree of a node contains only nodes with keys greater than the node''s key.\n\nBoth the left and right subtrees must also be binary search trees.\n\n\nExample 1:\nInput: root = [2,1,3]\nOutput: true\n\nExample 2:\nInput: root = [5,1,4,null,null,3,6]\nOutput: false\nExplanation: The root node''s value is 5 but its right child''s value is 4.\n\n\nConstraints:\nThe number of nodes in the tree is in the range `[1, 104]`.\n\n`-231 <= Node.val <= 231 - 1`','\n',char(10)));
INSERT INTO task_task VALUES(72,'Delete Nodes And Return Forest','Medium',replace('Given the `root` of a binary tree, each node in the tree has a distinct value.\n\nAfter deleting all nodes with a value in `to_delete`, we are left with a forest (a disjoint union of trees).\n\nReturn the roots of the trees in the remaining forest. You may return the result in any order.\n\n\nExample 1:\nInput: root = [1,2,3,4,5,6,7], to_delete = [3,5]\nOutput: [[1,2,null,4],[6],[7]]\n\nExample 2:\nInput: root = [1,2,4,null,3], to_delete = [3]\nOutput: [[1,2,4]]\n\nConstraints:\nThe number of nodes in the given tree is at most `1000`.\n\nEach node has a distinct value between `1` and `1000`.\n\n`to_delete.length <= 1000`\n`to_delete` contains distinct values between `1` and `1000`.','\n',char(10)));
INSERT INTO task_task VALUES(73,'Count Number of Nice Subarrays','Medium',replace('Given an array of integers `nums` and an integer `k`. A continuous subarray is called nice if there are `k` odd numbers on it.\n\nReturn the number of nice sub-arrays.\n\n\nExample 1:\nInput: nums = [1,1,2,1,1], k = 3\nOutput: 2\nExplanation: The only sub-arrays with 3 odd numbers are [1,1,2,1] and [1,2,1,1].\n\n\nExample 2:\nInput: nums = [2,4,6], k = 1\nOutput: 0\nExplanation: There is no odd numbers in the array.\n\n\nExample 3:\nInput: nums = [2,2,2,1,2,2,1,2,2,2], k = 2\nOutput: 16\n\nConstraints:\n`1 <= nums.length <= 50000`\n`1 <= nums[i] <= 10^5`\n`1 <= k <= nums.length`','\n',char(10)));
INSERT INTO task_task VALUES(74,'Apply Discount Every n Orders','Medium',replace('There is a sale in a supermarket, there will be a `discount` every `n` customer.\n\nThere are some products in the supermarket where the id of the `i-th` product is `products[i]` and the price per unit of this product is `prices[i]`.\n\nThe system will count the number of customers and when the `n-th` customer arrive he/she will have a `discount` on the bill. (i.e if the cost is `x` the new cost is `x - (discount * x) / 100`). Then the system will start counting customers again.\n\nThe customer orders a certain amount of each product where `product[i]` is the id of the `i-th` product the customer ordered and `amount[i]` is the number of units the customer ordered of that product.\n\nImplement the `Cashier` class:\n`Cashier(int n, int discount, int[] products, int[] prices)` Initializes the object with `n`, the `discount`, the `products` and their `prices`.\n\n`double getBill(int[] product, int[] amount)` returns the value of the bill and apply the discount if needed. Answers within `10^-5` of the actual value will be accepted as correct.\n\n\nExample 1:\nInput\n["Cashier","getBill","getBill","getBill","getBill","getBill","getBill","getBill"]\n[[3,50,[1,2,3,4,5,6,7],[100,200,300,400,300,200,100]],[[1,2],[1,2]],[[3,7],[10,10]],[[1,2,3,4,5,6,7],[1,1,1,1,1,1,1]],[[4],[10]],[[7,3],[10,10]],[[7,5,3,1,6,4,2],[10,10,10,9,9,9,7]],[[2,3,5],[5,3,2]]]\nOutput\n[null,500.0,4000.0,800.0,4000.0,4000.0,7350.0,2500.0]\nExplanation\nCashier cashier = new Cashier(3,50,[1,2,3,4,5,6,7],[100,200,300,400,300,200,100]);\ncashier.getBill([1,2],[1,2]);                        // return 500.0, bill = 1 * 100 + 2 * 200 = 500.\n\ncashier.getBill([3,7],[10,10]);                      // return 4000.0\ncashier.getBill([1,2,3,4,5,6,7],[1,1,1,1,1,1,1]);    // return 800.0, The bill was 1600.0 but as this is the third customer, he has a discount of 50% which means his bill is only 1600 - 1600 * (50 / 100) = 800.\n\ncashier.getBill([4],[10]);                           // return 4000.0\ncashier.getBill([7,3],[10,10]);                      // return 4000.0\ncashier.getBill([7,5,3,1,6,4,2],[10,10,10,9,9,9,7]); // return 7350.0, Bill was 14700.0 but as the system counted three more customers, he will have a 50% discount and the bill becomes 7350.0\ncashier.getBill([2,3,5],[5,3,2]);                    // return 2500.0\n\nConstraints:\n`1 <= n <= 10^4`\n`0 <= discount <= 100`\n`1 <= products.length <= 200`\n`1 <= products[i] <= 200`\nThere are not repeated elements in the array `products`.\n\n`prices.length == products.length`\n`1 <= prices[i] <= 1000`\n`1 <= product.length <= products.length`\n`product[i]` exists in `products`.\n\n`amount.length == product.length`\n`1 <= amount[i] <= 1000`\nAt most `1000` calls will be made to `getBill`.\n\nAnswers within `10^-5` of the actual value will be accepted as correct.','\n',char(10)));
INSERT INTO task_task VALUES(75,'Integer to Roman','Medium',replace('Roman numerals are represented by seven different symbols: `I`, `V`, `X`, `L`, `C`, `D` and `M`.\n\nSymbol       Value\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\nFor example, `2` is written as `II` in Roman numeral, just two one''s added together. `12` is written as `XII`, which is simply `X + II`. The number `27` is written as `XXVII`, which is `XX + V + II`.\n\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not `IIII`. Instead, the number four is written as `IV`. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as `IX`. There are six instances where subtraction is used:\n`I` can be placed before `V` (5) and `X` (10) to make 4 and 9. \n`X` can be placed before `L` (50) and `C` (100) to make 40 and 90. \n`C` can be placed before `D` (500) and `M` (1000) to make 400 and 900.\n\nGiven an integer, convert it to a roman numeral.\n\n\nExample 1:\nInput: num = 3\nOutput: "III"\n\nExample 2:\nInput: num = 4\nOutput: "IV"\n\nExample 3:\nInput: num = 9\nOutput: "IX"\n\nExample 4:\nInput: num = 58\nOutput: "LVIII"\nExplanation: L = 50, V = 5, III = 3.\n\n\nExample 5:\nInput: num = 1994\nOutput: "MCMXCIV"\nExplanation: M = 1000, CM = 900, XC = 90 and IV = 4.\n\n\nConstraints:\n`1 <= num <= 3999`','\n',char(10)));
INSERT INTO task_task VALUES(76,'Valid Sudoku','Medium',replace('Determine if a `9 x 9` Sudoku board is valid. Only the filled cells need to be validated according to the following rules:\nEach row must contain the digits `1-9` without repetition.\n\nEach column must contain the digits `1-9` without repetition.\n\nEach of the nine `3 x 3` sub-boxes of the grid must contain the digits `1-9` without repetition.\n\nNote:\nA Sudoku board (partially filled) could be valid but is not necessarily solvable.\n\nOnly the filled cells need to be validated according to the mentioned rules.\n\n\nExample 1:\nInput: board = \n[["5","3",".",".","7",".",".",".","."]\n,["6",".",".","1","9","5",".",".","."]\n,[".","9","8",".",".",".",".","6","."]\n,["8",".",".",".","6",".",".",".","3"]\n,["4",".",".","8",".","3",".",".","1"]\n,["7",".",".",".","2",".",".",".","6"]\n,[".","6",".",".",".",".","2","8","."]\n,[".",".",".","4","1","9",".",".","5"]\n,[".",".",".",".","8",".",".","7","9"]]\nOutput: true\n\nExample 2:\nInput: board = \n[["8","3",".",".","7",".",".",".","."]\n,["6",".",".","1","9","5",".",".","."]\n,[".","9","8",".",".",".",".","6","."]\n,["8",".",".",".","6",".",".",".","3"]\n,["4",".",".","8",".","3",".",".","1"]\n,["7",".",".",".","2",".",".",".","6"]\n,[".","6",".",".",".",".","2","8","."]\n,[".",".",".","4","1","9",".",".","5"]\n,[".",".",".",".","8",".",".","7","9"]]\nOutput: false\n\nExplanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8''s in the top left 3x3 sub-box, it is invalid.\n\n\nConstraints:\n`board.length == 9`\n`board[i].length == 9`\n`board[i][j]` is a digit or `''.''`.','\n',char(10)));
INSERT INTO task_task VALUES(77,'Find Duplicate Subtrees','Medium',replace('Given the `root` of a binary tree, return all duplicate subtrees.\n\nFor each kind of duplicate subtrees, you only need to return the root node of any one of them.\n\nTwo trees are duplicate if they have the same structure with the same node values.\n\n\nExample 1:\nInput: root = [1,2,3,4,null,2,4,null,null,4]\nOutput: [[2,4],[4]]\n\nExample 2:\nInput: root = [2,1,1]\nOutput: [[1]]\n\nExample 3:\nInput: root = [2,2,2,3,null,3,null]\nOutput: [[2,3],[3]]\n\nConstraints:\nThe number of the nodes in the tree will be in the range `[1, 10^4]`\n`-200 <= Node.val <= 200`','\n',char(10)));
INSERT INTO task_task VALUES(78,'Longest Word in Dictionary','Easy',replace('Given an array of strings `words` representing an English Dictionary, return the longest word in `words` that can be built one character at a time by other words in `words`.\n\nIf there is more than one possible answer, return the longest word with the smallest lexicographical order. If there is no answer, return the empty string.\n\n\nExample 1:\nInput: words = ["w","wo","wor","worl","world"]\nOutput: "world"\nExplanation: The word "world" can be built one character at a time by "w", "wo", "wor", and "worl".\n\n\nExample 2:\nInput: words = ["a","banana","app","appl","ap","apply","apple"]\nOutput: "apple"\nExplanation: Both "apply" and "apple" can be built from other words in the dictionary. However, "apple" is lexicographically smaller than "apply".\n\n\nConstraints:\n`1 <= words.length <= 1000`\n`1 <= words[i].length <= 30`\n`words[i]` consists of lowercase English letters.','\n',char(10)));
INSERT INTO task_task VALUES(79,'Find All Duplicates in an Array','Medium',replace('Given an array of integers, 1 ≤ a[i] ≤ n (n = size of array), some elements appear twice and others appear once.\n\nFind all the elements that appear twice in this array.\n\nCould you do it without extra space and in O(n) runtime?\n\nExample:\nInput:\n[4,3,2,7,8,2,3,1]\nOutput:\n[2,3]','\n',char(10)));
INSERT INTO task_task VALUES(80,'Top K Frequent Words','Medium',replace('Given a non-empty list of words, return the k most frequent elements.\n\nYour answer should be sorted by frequency from highest to lowest. If two words have the same frequency, then the word with the lower alphabetical order comes first.\n\n\nExample 1:\nInput: ["i", "love", "leetcode", "i", "love", "coding"], k = 2\nOutput: ["i", "love"]\nExplanation: "i" and "love" are the two most frequent words.\n\n    Note that "i" comes before "love" due to a lower alphabetical order.\n\n\nExample 2:\nInput: ["the", "day", "is", "sunny", "the", "the", "the", "sunny", "is", "is"], k = 4\nOutput: ["the", "is", "sunny", "day"]\nExplanation: "the", "is", "sunny" and "day" are the four most frequent words,\n    with the number of occurrence being 4, 3, 2 and 1 respectively.\n\nNote:\nYou may assume k is always valid, 1 ≤ k ≤ number of unique elements.\n\nInput words contain only lowercase letters.\nFollow up:\nTry to solve it in O(n log k) time and O(n) extra space.','\n',char(10)));
INSERT INTO task_task VALUES(81,'Largest Number','Medium',replace('Given a list of non-negative integers `nums`, arrange them such that they form the largest number.\n\nNote: The result may be very large, so you need to return a string instead of an integer.\n\n\nExample 1:\nInput: nums = [10,2]\nOutput: "210"\n\nExample 2:\nInput: nums = [3,30,34,5,9]\nOutput: "9534330"\n\nExample 3:\nInput: nums = [1]\nOutput: "1"\n\nExample 4:\nInput: nums = [10]\nOutput: "10"\n\nConstraints:\n`1 <= nums.length <= 100`\n`0 <= nums[i] <= 109`','\n',char(10)));
INSERT INTO task_task VALUES(82,'Custom Sort String','Medium',replace('`S` and `T` are strings composed of lowercase letters. In `S`, no letter occurs more than once.\n\n`S` was sorted in some custom order previously. We want to permute the characters of `T` so that they match the order that `S` was sorted. More specifically, if `x` occurs before `y` in `S`, then `x` should occur before `y` in the returned string.\n\nReturn any permutation of `T` (as a string) that satisfies this property.\n\n\nExample :\nInput: \nS = "cba"\nT = "abcd"\nOutput: "cbad"\nExplanation: \n"a", "b", "c" appear in S, so the order of "a", "b", "c" should be "c", "b", and "a". \nSince "d" does not appear in S, it can be at any position in T. "dcba", "cdba", "cbda" are also valid outputs.\n\nNote:\n`S` has length at most `26`, and no character is repeated in `S`.\n\n`T` has length at most `200`.\n\n`S` and `T` consist of lowercase letters only.','\n',char(10)));
INSERT INTO task_task VALUES(83,'Container With Most Water','Medium',replace('Given `n` non-negative integers `a1, a2, ..., an` , where each represents a point at coordinate `(i, ai)`. `n` vertical lines are drawn such that the two endpoints of the line `i` is at `(i, ai)` and `(i, 0)`. Find two lines, which, together with the x-axis forms a container, such that the container contains the most water.\n\nNotice that you may not slant the container.\n\n\nExample 1:\nInput: height = [1,8,6,2,5,4,8,3,7]\nOutput: 49\nExplanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.\n\n\nExample 2:\nInput: height = [1,1]\nOutput: 1\n\nExample 3:\nInput: height = [4,3,2,1,4]\nOutput: 16\n\nExample 4:\nInput: height = [1,2,1]\nOutput: 2\n\nConstraints:\n`n == height.length`\n`2 <= n <= 105`\n`0 <= height[i] <= 104`','\n',char(10)));
INSERT INTO task_task VALUES(84,'Min Stack','Easy',replace('Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.\n\nImplement the `MinStack` class:\n`MinStack()` initializes the stack object.\n\n`void push(val)` pushes the element `val` onto the stack.\n\n`void pop()` removes the element on the top of the stack.\n\n`int top()` gets the top element of the stack.\n\n`int getMin()` retrieves the minimum element in the stack.\n\n\nExample 1:\nInput\n["MinStack","push","push","push","getMin","pop","top","getMin"]\n[[],[-2],[0],[-3],[],[],[],[]]\nOutput\n[null,null,null,null,-3,null,0,-2]\nExplanation\nMinStack minStack = new MinStack();\nminStack.push(-2);\nminStack.push(0);\nminStack.push(-3);\nminStack.getMin(); // return -3\nminStack.pop();\nminStack.top();    // return 0\nminStack.getMin(); // return -2\n\nConstraints:\n`-231 <= val <= 231 - 1`\nMethods `pop`, `top` and `getMin` operations will always be called on non-empty stacks.\n\nAt most `3 * 104` calls will be made to `push`, `pop`, `top`, and `getMin`.','\n',char(10)));
INSERT INTO task_task VALUES(85,'Daily Temperatures','Medium',replace('Given a list of daily temperatures `T`, return a list such that, for each day in the input, tells you how many days you would have to wait until a warmer temperature.  If there is no future day for which this is possible, put `0` instead.\n\nFor example, given the list of temperatures `T = [73, 74, 75, 71, 69, 72, 76, 73]`, your output should be `[1, 1, 4, 2, 1, 1, 0, 0]`.\n\nNote:\nThe length of `temperatures` will be in the range `[1, 30000]`.\n\nEach temperature will be an integer in the range `[30, 100]`.','\n',char(10)));
INSERT INTO task_task VALUES(86,'Reorder List','Medium',replace('You are given the head of a singly linked-list. The list can be represented as:\nL0 → L1 → ... → Ln - 1 → Ln\nReorder the list to be on the following form:\nL0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → ...\n\nYou may not modify the values in the list''s nodes. Only nodes themselves may be changed.\n\n\nExample 1:\nInput: head = [1,2,3,4]\nOutput: [1,4,2,3]\n\nExample 2:\nInput: head = [1,2,3,4,5]\nOutput: [1,5,2,4,3]\n\nConstraints:\nThe number of nodes in the list is in the range `[1, 5 * 104]`.\n\n`1 <= Node.val <= 1000`','\n',char(10)));
INSERT INTO task_task VALUES(87,'Lowest Common Ancestor of a Binary Search Tree','Easy',replace('Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.\n\nAccording to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes `p` and `q` as the lowest node in `T` that has both `p` and `q` as descendants (where we allow a node to be a descendant of itself).”\n\nExample 1:\nInput: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8\nOutput: 6\nExplanation: The LCA of nodes 2 and 8 is 6.\n\n\nExample 2:\nInput: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4\nOutput: 2\nExplanation: The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.\n\n\nExample 3:\nInput: root = [2,1], p = 2, q = 1\nOutput: 2\n\nConstraints:\nThe number of nodes in the tree is in the range `[2, 105]`.\n\n`-109 <= Node.val <= 109`\nAll `Node.val` are unique.\n\n`p != q`\n`p` and `q` will exist in the BST.','\n',char(10)));
INSERT INTO task_task VALUES(88,'Sort the Matrix Diagonally','Medium',replace('A matrix diagonal is a diagonal line of cells starting from some cell in either the topmost row or leftmost column and going in the bottom-right direction until reaching the matrix''s end. For example, the matrix diagonal starting from `mat[2][0]`, where `mat` is a `6 x 3` matrix, includes cells `mat[2][0]`, `mat[3][1]`, and `mat[4][2]`.\n\nGiven an `m x n` matrix `mat` of integers, sort each matrix diagonal in ascending order and return the resulting matrix.\n\n\nExample 1:\nInput: mat = [[3,3,1,1],[2,2,1,2],[1,1,1,2]]\nOutput: [[1,1,1,1],[1,2,2,2],[1,2,3,3]]\n\nExample 2:\nInput: mat = [[11,25,66,1,69,7],[23,55,17,45,15,52],[75,31,36,44,58,8],[22,27,33,25,68,4],[84,28,14,11,5,50]]\nOutput: [[5,17,4,1,52,7],[11,11,25,45,8,69],[14,23,25,44,58,15],[22,27,31,36,50,66],[84,28,75,33,55,68]]\n\nConstraints:\n`m == mat.length`\n`n == mat[i].length`\n`1 <= m, n <= 100`\n`1 <= mat[i][j] <= 100`','\n',char(10)));
INSERT INTO task_task VALUES(89,'Find K Closest Elements','Medium',replace('Given a sorted integer array `arr`, two integers `k` and `x`, return the `k` closest integers to `x` in the array. The result should also be sorted in ascending order.\n\nAn integer `a` is closer to `x` than an integer `b` if:\n`|a - x| < |b - x|`, or\n`|a - x| == |b - x|` and `a < b`\n\nExample 1:\nInput: arr = [1,2,3,4,5], k = 4, x = 3\nOutput: [1,2,3,4]\n\nExample 2:\nInput: arr = [1,2,3,4,5], k = 4, x = -1\nOutput: [1,2,3,4]\n\nConstraints:\n`1 <= k <= arr.length`\n`1 <= arr.length <= 104`\n`arr` is sorted in ascending order.\n\n`-104 <= arr[i], x <= 104`','\n',char(10)));
INSERT INTO task_task VALUES(90,'4Sum','Medium',replace('Given an array `nums` of n integers and an integer `target`, are there elements a, b, c, and d in `nums` such that a + b + c + d = `target`? Find all unique quadruplets in the array which gives the sum of `target`.\n\nNotice that the solution set must not contain duplicate quadruplets.\n\n\nExample 1:\nInput: nums = [1,0,-1,0,-2,2], target = 0\nOutput: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]\n\nExample 2:\nInput: nums = [], target = 0\nOutput: []\n\nConstraints:\n`0 <= nums.length <= 200`\n`-109 <= nums[i] <= 109`\n`-109 <= target <= 109`','\n',char(10)));
INSERT INTO task_task VALUES(91,'Majority Element II','Medium',replace('Given an integer array of size `n`, find all elements that appear more than `⌊ n/3 ⌋` times.\n\nFollow-up: Could you solve the problem in linear time and in O(1) space?\n\nExample 1:\nInput: nums = [3,2,3]\nOutput: [3]\n\nExample 2:\nInput: nums = [1]\nOutput: [1]\n\nExample 3:\nInput: nums = [1,2]\nOutput: [1,2]\n\nConstraints:\n`1 <= nums.length <= 5 * 104`\n`-109 <= nums[i] <= 109`','\n',char(10)));
INSERT INTO task_task VALUES(92,'Combinations','Medium',replace('Given two integers `n` and `k`, return all possible combinations of `k` numbers out of the range `[1, n]`.\n\nYou may return the answer in any order.\n\n\nExample 1:\nInput: n = 4, k = 2\nOutput:\n[\n  [2,4],\n  [3,4],\n  [2,3],\n  [1,2],\n  [1,3],\n  [1,4],\n]\n\nExample 2:\nInput: n = 1, k = 1\nOutput: [[1]]\n\nConstraints:\n`1 <= n <= 20`\n`1 <= k <= n`','\n',char(10)));
INSERT INTO task_task VALUES(93,'Find the Duplicate Number','Medium',replace('Given an array of integers `nums` containing `n + 1` integers where each integer is in the range `[1, n]` inclusive.\n\nThere is only one repeated number in `nums`, return this repeated number.\n\n\nExample 1:\nInput: nums = [1,3,4,2,2]\nOutput: 2\n\nExample 2:\nInput: nums = [3,1,3,4,2]\nOutput: 3\n\nExample 3:\nInput: nums = [1,1]\nOutput: 1\n\nExample 4:\nInput: nums = [1,1,2]\nOutput: 1\n\nConstraints:\n`2 <= n <= 3 * 104`\n`nums.length == n + 1`\n`1 <= nums[i] <= n`\nAll the integers in `nums` appear only once except for precisely one integer which appears two or more times.\n\nFollow up:\nHow can we prove that at least one duplicate number must exist in `nums`?\nCan you solve the problem without modifying the array `nums`?\nCan you solve the problem using only constant, `O(1)` extra space?\nCan you solve the problem with runtime complexity less than `O(n2)`?','\n',char(10)));
INSERT INTO task_task VALUES(94,'First Missing Positive','Hard',replace('Given an unsorted integer array `nums`, find the smallest missing positive integer.\n\n\nExample 1:\nInput: nums = [1,2,0]\nOutput: 3\n\nExample 2:\nInput: nums = [3,4,-1,1]\nOutput: 2\n\nExample 3:\nInput: nums = [7,8,9,11,12]\nOutput: 1\n\nConstraints:\n`0 <= nums.length <= 300`\n`-231 <= nums[i] <= 231 - 1`\nFollow up: Could you implement an algorithm that runs in `O(n)` time and uses constant extra space?','\n',char(10)));
INSERT INTO task_task VALUES(95,'4Sum II','Medium',replace('Given four lists A, B, C, D of integer values, compute how many tuples `(i, j, k, l)` there are such that `A[i] + B[j] + C[k] + D[l]` is zero.\n\nTo make problem a bit easier, all A, B, C, D have same length of N where 0 ≤ N ≤ 500. All integers are in the range of -228 to 228 - 1 and the result is guaranteed to be at most 231 - 1.\n\n\nExample:\nInput:\nA = [ 1, 2]\nB = [-2,-1]\nC = [-1, 2]\nD = [ 0, 2]\nOutput:\n2\nExplanation:\nThe two tuples are:\n1. (0, 0, 0, 1) -> A[0] + B[0] + C[0] + D[1] = 1 + (-2) + (-1) + 2 = 0\n2. (1, 1, 0, 0) -> A[1] + B[1] + C[0] + D[0] = 2 + (-1) + (-1) + 0 = 0','\n',char(10)));
INSERT INTO task_task VALUES(96,'Longest Consecutive Sequence','Hard',replace('Given an unsorted array of integers `nums`, return the length of the longest consecutive elements sequence.\n\n\nExample 1:\nInput: nums = [100,4,200,1,3,2]\nOutput: 4\nExplanation: The longest consecutive elements sequence is `[1, 2, 3, 4]`. Therefore its length is 4.\n\n\nExample 2:\nInput: nums = [0,3,7,2,5,8,4,6,0,1]\nOutput: 9\n\nConstraints:\n`0 <= nums.length <= 104`\n`-109 <= nums[i] <= 109`\nFollow up: Could you implement the `O(n)` solution?','\n',char(10)));
INSERT INTO task_task VALUES(97,'Sliding Window Maximum','Hard',replace('You are given an array of integers `nums`, there is a sliding window of size `k` which is moving from the very left of the array to the very right. You can only see the `k` numbers in the window. Each time the sliding window moves right by one position.\n\nReturn the max sliding window.\n\n\nExample 1:\nInput: nums = [1,3,-1,-3,5,3,6,7], k = 3\nOutput: [3,3,5,5,6,7]\nExplanation: \nWindow position                Max\n---------------               -----\n[1  3  -1] -3  5  3  6  7       3\n 1 [3  -1  -3] 5  3  6  7       3\n 1  3 [-1  -3  5] 3  6  7       5\n 1  3  -1 [-3  5  3] 6  7       5\n 1  3  -1  -3 [5  3  6] 7       6\n 1  3  -1  -3  5 [3  6  7]      7\n\nExample 2:\nInput: nums = [1], k = 1\nOutput: [1]\n\nExample 3:\nInput: nums = [1,-1], k = 1\nOutput: [1,-1]\n\nExample 4:\nInput: nums = [9,11], k = 2\nOutput: [11]\n\nExample 5:\nInput: nums = [4,-2], k = 2\nOutput: [4]\n\nConstraints:\n`1 <= nums.length <= 105`\n`-104 <= nums[i] <= 104`\n`1 <= k <= nums.length`','\n',char(10)));
INSERT INTO task_task VALUES(98,'Merge k Sorted Lists','Hard',replace('You are given an array of `k` linked-lists `lists`, each linked-list is sorted in ascending order.\n\nMerge all the linked-lists into one sorted linked-list and return it.\n\n\nExample 1:\nInput: lists = [[1,4,5],[1,3,4],[2,6]]\nOutput: [1,1,2,3,4,4,5,6]\nExplanation: The linked-lists are:\n[\n  1->4->5,\n  1->3->4,\n  2->6\n]\nmerging them into one sorted list:\n1->1->2->3->4->4->5->6\n\nExample 2:\nInput: lists = []\nOutput: []\n\nExample 3:\nInput: lists = [[]]\nOutput: []\n\nConstraints:\n`k == lists.length`\n`0 <= k <= 10^4`\n`0 <= lists[i].length <= 500`\n`-10^4 <= lists[i][j] <= 10^4`\n`lists[i]` is sorted in ascending order.\n\nThe sum of `lists[i].length` won''t exceed `10^4`.','\n',char(10)));
INSERT INTO task_task VALUES(99,'Sort List','Medium',replace('Given the `head` of a linked list, return the list after sorting it in ascending order.\n\nFollow up: Can you sort the linked list in `O(n logn)` time and `O(1)` memory (i.e. constant space)?\n\nExample 1:\nInput: head = [4,2,1,3]\nOutput: [1,2,3,4]\n\nExample 2:\nInput: head = [-1,5,3,4,0]\nOutput: [-1,0,3,4,5]\n\nExample 3:\nInput: head = []\nOutput: []\n\nConstraints:\nThe number of nodes in the list is in the range `[0, 5 * 104]`.\n\n`-105 <= Node.val <= 105`','\n',char(10)));
INSERT INTO task_task VALUES(100,'Word Ladder','Hard',replace('A transformation sequence from word `beginWord` to word `endWord` using a dictionary `wordList` is a sequence of words `beginWord -> s1 -> s2 -> ... -> sk` such that:\nEvery adjacent pair of words differs by a single letter.\n\nEvery `si` for `1 <= i <= k` is in `wordList`. Note that `beginWord` does not need to be in `wordList`.\n\n`sk == endWord`\nGiven two words, `beginWord` and `endWord`, and a dictionary `wordList`, return the number of words in the shortest transformation sequence from `beginWord` to `endWord`, or `0` if no such sequence exists.\n\n\nExample 1:\nInput: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log","cog"]\nOutput: 5\nExplanation: One shortest transformation sequence is "hit" -> "hot" -> "dot" -> "dog" -> cog", which is 5 words long.\n\n\nExample 2:\nInput: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log"]\nOutput: 0\nExplanation: The endWord "cog" is not in wordList, therefore there is no valid transformation sequence.\n\n\nConstraints:\n`1 <= beginWord.length <= 10`\n`endWord.length == beginWord.length`\n`1 <= wordList.length <= 5000`\n`wordList[i].length == beginWord.length`\n`beginWord`, `endWord`, and `wordList[i]` consist of lowercase English letters.\n\n`beginWord != endWord`\nAll the words in `wordList` are unique.','\n',char(10)));
INSERT INTO task_task VALUES(101,'Binary Tree Maximum Path Sum','Hard',replace('A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.\n\nThe path sum of a path is the sum of the node''s values in the path.\n\nGiven the `root` of a binary tree, return the maximum path sum of any path.\n\n\nExample 1:\nInput: root = [1,2,3]\nOutput: 6\nExplanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.\n\n\nExample 2:\nInput: root = [-10,9,20,null,null,15,7]\nOutput: 42\nExplanation: The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42.\n\n\nConstraints:\nThe number of nodes in the tree is in the range `[1, 3 * 104]`.\n\n`-1000 <= Node.val <= 1000`','\n',char(10)));
INSERT INTO task_task VALUES(102,'Median of Two Sorted Arrays','Hard',replace('Given two sorted arrays `nums1` and `nums2` of size `m` and `n` respectively, return the median of the two sorted arrays.\n\n\nExample 1:\nInput: nums1 = [1,3], nums2 = [2]\nOutput: 2.00000\nExplanation: merged array = [1,2,3] and median is 2.\n\n\nExample 2:\nInput: nums1 = [1,2], nums2 = [3,4]\nOutput: 2.50000\nExplanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\n\n\nExample 3:\nInput: nums1 = [0,0], nums2 = [0,0]\nOutput: 0.00000\n\nExample 4:\nInput: nums1 = [], nums2 = [1]\nOutput: 1.00000\n\nExample 5:\nInput: nums1 = [2], nums2 = []\nOutput: 2.00000\n\nConstraints:\n`nums1.length == m`\n`nums2.length == n`\n`0 <= m <= 1000`\n`0 <= n <= 1000`\n`1 <= m + n <= 2000`\n`-106 <= nums1[i], nums2[i] <= 106`\nFollow up: The overall run time complexity should be `O(log (m+n))`.','\n',char(10)));
INSERT INTO task_task VALUES(103,'Kth Smallest Element in a Sorted Matrix','Medium',replace('Given an `n x n` `matrix` where each of the rows and columns are sorted in ascending order, return the `kth` smallest element in the matrix.\n\nNote that it is the `kth` smallest element in the sorted order, not the `kth` distinct element.\n\n\nExample 1:\nInput: matrix = [[1,5,9],[10,11,13],[12,13,15]], k = 8\nOutput: 13\nExplanation: The elements in the matrix are [1,5,9,10,11,12,13,13,15], and the 8th smallest number is 13\n\nExample 2:\nInput: matrix = [[-5]], k = 1\nOutput: -5\n\nConstraints:\n`n == matrix.length`\n`n == matrix[i].length`\n`1 <= n <= 300`\n`-109 <= matrix[i][j] <= 109`\nAll the rows and columns of `matrix` are guaranteed to be sorted in non-degreasing order.\n\n`1 <= k <= n2`','\n',char(10)));
INSERT INTO task_task VALUES(104,'Max Points on a Line','Hard',replace('Given an array of `points` where `points[i] = [xi, yi]` represents a point on the X-Y plane, return the maximum number of points that lie on the same straight line.\n\n\nExample 1:\nInput: points = [[1,1],[2,2],[3,3]]\nOutput: 3\n\nExample 2:\nInput: points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]\nOutput: 4\n\nConstraints:\n`1 <= points.length <= 300`\n`points[i].length == 2`\n`-104 <= xi, yi <= 104`\nAll the `points` are unique.','\n',char(10)));
INSERT INTO task_task VALUES(105,'Game of Life','Medium',replace('According to Wikipedia''s article: "The Game of Life, also known simply as Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970."\nThe board is made up of an `m x n` grid of cells, where each cell has an initial state: live (represented by a `1`) or dead (represented by a `0`). Each cell interacts with its eight neighbors (horizontal, vertical, diagonal) using the following four rules (taken from the above Wikipedia article):\nAny live cell with fewer than two live neighbors dies as if caused by under-population.\n\nAny live cell with two or three live neighbors lives on to the next generation.\n\nAny live cell with more than three live neighbors dies, as if by over-population.\n\nAny dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.\n\nThe next state is created by applying the above rules simultaneously to every cell in the current state, where births and deaths occur simultaneously. Given the current state of the `m x n` grid `board`, return the next state.\n\n\nExample 1:\nInput: board = [[0,1,0],[0,0,1],[1,1,1],[0,0,0]]\nOutput: [[0,0,0],[1,0,1],[0,1,1],[0,1,0]]\n\nExample 2:\nInput: board = [[1,1],[1,0]]\nOutput: [[1,1],[1,1]]\n\nConstraints:\n`m == board.length`\n`n == board[i].length`\n`1 <= m, n <= 25`\n`board[i][j]` is `0` or `1`.\n\nFollow up:\nCould you solve it in-place? Remember that the board needs to be updated simultaneously: You cannot update some cells first and then use their updated values to update other cells.\n\nIn this question, we represent the board using a 2D array. In principle, the board is infinite, which would cause problems when the active area encroaches upon the border of the array (i.e., live cells reach the border). How would you address these problems?','\n',char(10)));
CREATE TABLE IF NOT EXISTS "test_case_testcase" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "input" text NOT NULL CHECK ((JSON_VALID("input") OR "input" IS NULL)), "output" text NOT NULL CHECK ((JSON_VALID("output") OR "output" IS NULL)), "input_type" text NOT NULL CHECK ((JSON_VALID("input_type") OR "input_type" IS NULL)), "output_type" text NOT NULL CHECK ((JSON_VALID("output_type") OR "output_type" IS NULL)), "task_id" bigint NOT NULL REFERENCES "task_task" ("id") DEFERRABLE INITIALLY DEFERRED);
INSERT INTO test_case_testcase VALUES(16,'{"nums": [2, 2, 1]}','1','{"nums": "list"}','{"result": "int"}',2);
INSERT INTO test_case_testcase VALUES(17,'{"nums": [4, 1, 2, 1, 2]}','4','{"nums": "list"}','{"result": "int"}',2);
INSERT INTO test_case_testcase VALUES(18,'{"nums": [1]}','1','{"nums": "list"}','{"result": "int"}',2);
INSERT INTO test_case_testcase VALUES(19,'{"nums": [2, 3, 5, 3, 2]}','5','{"nums": "list"}','{"result": "int"}',2);
INSERT INTO test_case_testcase VALUES(20,'{"nums": [10, 9, 10, 8, 8]}','9','{"nums": "list"}','{"result": "int"}',2);
INSERT INTO test_case_testcase VALUES(21,'{"nums": [100, 200, 100, 300, 300]}','200','{"nums": "list"}','{"result": "int"}',2);
INSERT INTO test_case_testcase VALUES(22,'{"nums": [1, 2, 3, 1, 2]}','3','{"nums": "list"}','{"result": "int"}',2);
INSERT INTO test_case_testcase VALUES(23,'{"nums": [7, 8, 9, 8, 7]}','9','{"nums": "list"}','{"result": "int"}',2);
INSERT INTO test_case_testcase VALUES(24,'{"nums": [-1, -1, -2]}','-2','{"nums": "list"}','{"result": "int"}',2);
INSERT INTO test_case_testcase VALUES(25,'{"nums": [5, 4, 5, 6, 4]}','6','{"nums": "list"}','{"result": "int"}',2);
INSERT INTO test_case_testcase VALUES(26,'{"nums": [0, 0, 1, 1, 2]}','2','{"nums": "list"}','{"result": "int"}',2);
INSERT INTO test_case_testcase VALUES(27,'{"nums": [10, 20, 10, 30, 20]}','30','{"nums": "list"}','{"result": "int"}',2);
INSERT INTO test_case_testcase VALUES(28,'{"nums": [99, 100, 99, 101, 100, 102, 102]}','101','{"nums": "list"}','{"result": "int"}',2);
INSERT INTO test_case_testcase VALUES(29,'{"nums": [5, 5, 2, 2, 1]}','1','{"nums": "list"}','{"result": "int"}',2);
INSERT INTO test_case_testcase VALUES(30,'{"nums": [-3, -3, -2, -2, -1]}','-1','{"nums": "list"}','{"result": "int"}',2);
INSERT INTO test_case_testcase VALUES(31,'{"digits": [1, 2, 3]}','[1, 2, 4]','{"digits": "list"}','{"result": "list"}',3);
INSERT INTO test_case_testcase VALUES(32,'{"digits": [4, 3, 2, 1]}','[4, 3, 2, 2]','{"digits": "list"}','{"result": "list"}',3);
INSERT INTO test_case_testcase VALUES(33,'{"digits": [9]}','[1, 0]','{"digits": "list"}','{"result": "list"}',3);
INSERT INTO test_case_testcase VALUES(34,'{"digits": [1, 0, 0]}','[1, 0, 1]','{"digits": "list"}','{"result": "list"}',3);
INSERT INTO test_case_testcase VALUES(35,'{"digits": [9, 9]}','[1, 0, 0]','{"digits": "list"}','{"result": "list"}',3);
INSERT INTO test_case_testcase VALUES(36,'{"digits": [2, 9, 9]}','[3, 0, 0]','{"digits": "list"}','{"result": "list"}',3);
INSERT INTO test_case_testcase VALUES(37,'{"digits": [1, 2, 9]}','[1, 3, 0]','{"digits": "list"}','{"result": "list"}',3);
INSERT INTO test_case_testcase VALUES(38,'{"digits": [0]}','[1]','{"digits": "list"}','{"result": "list"}',3);
INSERT INTO test_case_testcase VALUES(39,'{"digits": [1, 9]}','[2, 0]','{"digits": "list"}','{"result": "list"}',3);
INSERT INTO test_case_testcase VALUES(40,'{"digits": [3, 2, 1]}','[3, 2, 2]','{"digits": "list"}','{"result": "list"}',3);
INSERT INTO test_case_testcase VALUES(41,'{"digits": [7, 8, 9]}','[7, 9, 0]','{"digits": "list"}','{"result": "list"}',3);
INSERT INTO test_case_testcase VALUES(42,'{"digits": [1, 2, 3, 4, 5]}','[1, 2, 3, 4, 6]','{"digits": "list"}','{"result": "list"}',3);
INSERT INTO test_case_testcase VALUES(43,'{"digits": [5, 6, 7, 8, 9]}','[5, 6, 7, 9, 0]','{"digits": "list"}','{"result": "list"}',3);
INSERT INTO test_case_testcase VALUES(44,'{"digits": [1, 0, 9]}','[1, 1, 0]','{"digits": "list"}','{"result": "list"}',3);
INSERT INTO test_case_testcase VALUES(45,'{"digits": [8, 9, 9]}','[9, 0, 0]','{"digits": "list"}','{"result": "list"}',3);
INSERT INTO test_case_testcase VALUES(60,'{"nums": [1, 2, 3, 1]}','true','{"nums": "list"}','{"result": "bool"}',5);
INSERT INTO test_case_testcase VALUES(61,'{"nums": [1, 2, 3, 4]}','false','{"nums": "list"}','{"result": "bool"}',5);
INSERT INTO test_case_testcase VALUES(62,'{"nums": [1, 1, 1, 1]}','true','{"nums": "list"}','{"result": "bool"}',5);
INSERT INTO test_case_testcase VALUES(63,'{"nums": []}','false','{"nums": "list"}','{"result": "bool"}',5);
INSERT INTO test_case_testcase VALUES(64,'{"nums": [5, 6, 7, 8, 9, 5]}','true','{"nums": "list"}','{"result": "bool"}',5);
INSERT INTO test_case_testcase VALUES(65,'{"nums": [100, 200, 300]}','false','{"nums": "list"}','{"result": "bool"}',5);
INSERT INTO test_case_testcase VALUES(66,'{"nums": [2, 2, 1, 3]}','true','{"nums": "list"}','{"result": "bool"}',5);
INSERT INTO test_case_testcase VALUES(67,'{"nums": [1, 2, 3, 4, 5]}','false','{"nums": "list"}','{"result": "bool"}',5);
INSERT INTO test_case_testcase VALUES(68,'{"nums": [1, 2, 2, 3]}','true','{"nums": "list"}','{"result": "bool"}',5);
INSERT INTO test_case_testcase VALUES(69,'{"nums": [1, 0, 1]}','true','{"nums": "list"}','{"result": "bool"}',5);
INSERT INTO test_case_testcase VALUES(70,'{"nums": [1, 3, 5, 7, 9, 11, 13]}','false','{"nums": "list"}','{"result": "bool"}',5);
INSERT INTO test_case_testcase VALUES(71,'{"nums": [1, 2, 3, 4, 5, 1, 1]}','true','{"nums": "list"}','{"result": "bool"}',5);
INSERT INTO test_case_testcase VALUES(72,'{"nums": [2, 2, 3, 3]}','true','{"nums": "list"}','{"result": "bool"}',5);
INSERT INTO test_case_testcase VALUES(73,'{"nums": [-1, -2, -3, -1]}','true','{"nums": "list"}','{"result": "bool"}',5);
INSERT INTO test_case_testcase VALUES(74,'{"nums": [1, 2, 3, 4, 5, 6, 7]}','false','{"nums": "list"}','{"result": "bool"}',5);
INSERT INTO test_case_testcase VALUES(75,'{"nums": [0, 1, 0, 3, 12]}','[1, 3, 12, 0, 0]','{"nums": "list"}','{"result": "list"}',6);
INSERT INTO test_case_testcase VALUES(76,'{"nums": [0]}','[0]','{"nums": "list"}','{"result": "list"}',6);
INSERT INTO test_case_testcase VALUES(77,'{"nums": [1, 2, 3]}','[1, 2, 3]','{"nums": "list"}','{"result": "list"}',6);
INSERT INTO test_case_testcase VALUES(78,'{"nums": [0, 0, 0, 1]}','[1, 0, 0, 0]','{"nums": "list"}','{"result": "list"}',6);
INSERT INTO test_case_testcase VALUES(79,'{"nums": [0, 0, 1, 2, 0]}','[1, 2, 0, 0, 0]','{"nums": "list"}','{"result": "list"}',6);
INSERT INTO test_case_testcase VALUES(80,'{"nums": [5, 0, 4, 0, 3]}','[5, 4, 3, 0, 0]','{"nums": "list"}','{"result": "list"}',6);
INSERT INTO test_case_testcase VALUES(81,'{"nums": [1, 0, 2, 0, 3]}','[1, 2, 3, 0, 0]','{"nums": "list"}','{"result": "list"}',6);
INSERT INTO test_case_testcase VALUES(82,'{"nums": [0, 1, 0, 0, 2]}','[1, 2, 0, 0, 0]','{"nums": "list"}','{"result": "list"}',6);
INSERT INTO test_case_testcase VALUES(83,'{"nums": [0, 0, 0]}','[0, 0, 0]','{"nums": "list"}','{"result": "list"}',6);
INSERT INTO test_case_testcase VALUES(84,'{"nums": [2, 3, 0, 0, 4]}','[2, 3, 4, 0, 0]','{"nums": "list"}','{"result": "list"}',6);
INSERT INTO test_case_testcase VALUES(85,'{"nums": [1, 2, 0, 3, 4]}','[1, 2, 3, 4, 0]','{"nums": "list"}','{"result": "list"}',6);
INSERT INTO test_case_testcase VALUES(86,'{"nums": [0, 2, 0, 0, 5, 0]}','[2, 5, 0, 0, 0, 0]','{"nums": "list"}','{"result": "list"}',6);
INSERT INTO test_case_testcase VALUES(87,'{"nums": [3, 0, 0, 1, 0]}','[3, 1, 0, 0, 0]','{"nums": "list"}','{"result": "list"}',6);
INSERT INTO test_case_testcase VALUES(88,'{"nums": [0, 5, 0, 0, 3]}','[5, 3, 0, 0, 0]','{"nums": "list"}','{"result": "list"}',6);
INSERT INTO test_case_testcase VALUES(89,'{"nums": []}','[]','{"nums": "list"}','{"result": "list"}',6);
INSERT INTO test_case_testcase VALUES(121,'{"strs": ["flower", "flow", "flight"]}','"fl"','{"strs": "List[str]"}','{"result": "str"}',9);
INSERT INTO test_case_testcase VALUES(122,'{"strs": ["dog", "racecar", "car"]}','""','{"strs": "List[str]"}','{"result": "str"}',9);
INSERT INTO test_case_testcase VALUES(123,'{"strs": ["interspecies", "interstellar", "interstate"]}','"inters"','{"strs": "List[str]"}','{"result": "str"}',9);
INSERT INTO test_case_testcase VALUES(124,'{"strs": ["throne", "dungeon"]}','""','{"strs": "List[str]"}','{"result": "str"}',9);
INSERT INTO test_case_testcase VALUES(125,'{"strs": ["throne", "throne"]}','"throne"','{"strs": "List[str]"}','{"result": "str"}',9);
INSERT INTO test_case_testcase VALUES(126,'{"strs": ["prefix", "pretest", "preliminary", "pre"]}','"pre"','{"strs": "List[str]"}','{"result": "str"}',9);
INSERT INTO test_case_testcase VALUES(127,'{"strs": ["a"]}','"a"','{"strs": "List[str]"}','{"result": "str"}',9);
INSERT INTO test_case_testcase VALUES(128,'{"strs": ["ab", "a"]}','"a"','{"strs": "List[str]"}','{"result": "str"}',9);
INSERT INTO test_case_testcase VALUES(129,'{"strs": ["", "b", "c"]}','""','{"strs": "List[str]"}','{"result": "str"}',9);
INSERT INTO test_case_testcase VALUES(130,'{"strs": ["reflower", "flow", "flight"]}','""','{"strs": "List[str]"}','{"result": "str"}',9);
INSERT INTO test_case_testcase VALUES(131,'{"strs": ["cir", "car"]}','"c"','{"strs": "List[str]"}','{"result": "str"}',9);
INSERT INTO test_case_testcase VALUES(132,'{"strs": ["ant", "antagonist", "antique"]}','"ant"','{"strs": "List[str]"}','{"result": "str"}',9);
INSERT INTO test_case_testcase VALUES(133,'{"strs": ["aaa", "aa", "aaa"]}','"aa"','{"strs": "List[str]"}','{"result": "str"}',9);
INSERT INTO test_case_testcase VALUES(134,'{"strs": ["applesauce", "apples", "apple"]}','"apple"','{"strs": "List[str]"}','{"result": "str"}',9);
INSERT INTO test_case_testcase VALUES(135,'{"strs": ["toolbox", "toolshed", "tool"]}','"tool"','{"strs": "List[str]"}','{"result": "str"}',9);
INSERT INTO test_case_testcase VALUES(136,'{"x": 123}','321','{"x": "int"}','{"result": "int"}',10);
INSERT INTO test_case_testcase VALUES(137,'{"x": -123}','-321','{"x": "int"}','{"result": "int"}',10);
INSERT INTO test_case_testcase VALUES(138,'{"x": 120}','21','{"x": "int"}','{"result": "int"}',10);
INSERT INTO test_case_testcase VALUES(139,'{"x": 0}','0','{"x": "int"}','{"result": "int"}',10);
INSERT INTO test_case_testcase VALUES(140,'{"x": 1534236469}','0','{"x": "int"}','{"result": "int"}',10);
INSERT INTO test_case_testcase VALUES(141,'{"x": -1534236469}','0','{"x": "int"}','{"result": "int"}',10);
INSERT INTO test_case_testcase VALUES(142,'{"x": 1000000003}','0','{"x": "int"}','{"result": "int"}',10);
INSERT INTO test_case_testcase VALUES(143,'{"x": -2147483648}','0','{"x": "int"}','{"result": "int"}',10);
INSERT INTO test_case_testcase VALUES(144,'{"x": 2147483647}','0','{"x": "int"}','{"result": "int"}',10);
INSERT INTO test_case_testcase VALUES(145,'{"x": 9000000001}','1000000009','{"x": "int"}','{"result": "int"}',10);
INSERT INTO test_case_testcase VALUES(146,'{"x": -1000000001}','-1000000001','{"x": "int"}','{"result": "int"}',10);
INSERT INTO test_case_testcase VALUES(147,'{"x": 8463847412}','0','{"x": "int"}','{"result": "int"}',10);
INSERT INTO test_case_testcase VALUES(148,'{"x": -8463847412}','0','{"x": "int"}','{"result": "int"}',10);
INSERT INTO test_case_testcase VALUES(149,'{"x": 111111111}','111111111','{"x": "int"}','{"result": "int"}',10);
INSERT INTO test_case_testcase VALUES(150,'{"x": -123456789}','-987654321','{"x": "int"}','{"result": "int"}',10);
INSERT INTO test_case_testcase VALUES(151,'{"s": "A man, a plan, a canal: Panama"}','true','{"s": "str"}','{"result": "bool"}',11);
INSERT INTO test_case_testcase VALUES(152,'{"s": "race a car"}','false','{"s": "str"}','{"result": "bool"}',11);
INSERT INTO test_case_testcase VALUES(153,'{"s": " "}','true','{"s": "str"}','{"result": "bool"}',11);
INSERT INTO test_case_testcase VALUES(154,'{"s": ".,!"}','true','{"s": "str"}','{"result": "bool"}',11);
INSERT INTO test_case_testcase VALUES(155,'{"s": "No lemon, no melon"}','true','{"s": "str"}','{"result": "bool"}',11);
INSERT INTO test_case_testcase VALUES(156,'{"s": "Was it a car or a cat I saw?"}','true','{"s": "str"}','{"result": "bool"}',11);
INSERT INTO test_case_testcase VALUES(157,'{"s": "Eva, can I see bees in a cave?"}','true','{"s": "str"}','{"result": "bool"}',11);
INSERT INTO test_case_testcase VALUES(158,'{"s": "Able was I, I saw eLba"}','true','{"s": "str"}','{"result": "bool"}',11);
INSERT INTO test_case_testcase VALUES(159,'{"s": "12321"}','true','{"s": "str"}','{"result": "bool"}',11);
INSERT INTO test_case_testcase VALUES(160,'{"s": "1234567890987654321"}','true','{"s": "str"}','{"result": "bool"}',11);
INSERT INTO test_case_testcase VALUES(161,'{"s": "Madam, in Eden, I\u2019m Adam"}','true','{"s": "str"}','{"result": "bool"}',11);
INSERT INTO test_case_testcase VALUES(162,'{"s": "Palindrome"}','false','{"s": "str"}','{"result": "bool"}',11);
INSERT INTO test_case_testcase VALUES(163,'{"s": "Doc, Note I Dissent. A Fast Never Prevents A Fatness. I Diet On Cod."}','true','{"s": "str"}','{"result": "bool"}',11);
INSERT INTO test_case_testcase VALUES(164,'{"s": "Mr. Owl ate my metal worm"}','true','{"s": "str"}','{"result": "bool"}',11);
INSERT INTO test_case_testcase VALUES(165,'{"s": "Don''t nod"}','true','{"s": "str"}','{"result": "bool"}',11);
INSERT INTO test_case_testcase VALUES(166,'{"s": "leetcode"}','0','{"s": "str"}','{"result": "int"}',12);
INSERT INTO test_case_testcase VALUES(167,'{"s": "loveleetcode"}','2','{"s": "str"}','{"result": "int"}',12);
INSERT INTO test_case_testcase VALUES(168,'{"s": "aabb"}','-1','{"s": "str"}','{"result": "int"}',12);
INSERT INTO test_case_testcase VALUES(169,'{"s": "aabbc"}','4','{"s": "str"}','{"result": "int"}',12);
INSERT INTO test_case_testcase VALUES(170,'{"s": "z"}','0','{"s": "str"}','{"result": "int"}',12);
INSERT INTO test_case_testcase VALUES(171,'{"s": "abcabc"}','-1','{"s": "str"}','{"result": "int"}',12);
INSERT INTO test_case_testcase VALUES(172,'{"s": "abcdabcdz"}','8','{"s": "str"}','{"result": "int"}',12);
INSERT INTO test_case_testcase VALUES(173,'{"s": "abcdefg"}','0','{"s": "str"}','{"result": "int"}',12);
INSERT INTO test_case_testcase VALUES(174,'{"s": "aabbccddeeffg"}','12','{"s": "str"}','{"result": "int"}',12);
INSERT INTO test_case_testcase VALUES(175,'{"s": "abcdabcdabcdabcd"}','-1','{"s": "str"}','{"result": "int"}',12);
INSERT INTO test_case_testcase VALUES(176,'{"s": "aabbccddee"}','-1','{"s": "str"}','{"result": "int"}',12);
INSERT INTO test_case_testcase VALUES(177,'{"s": "aaabbbc"}','6','{"s": "str"}','{"result": "int"}',12);
INSERT INTO test_case_testcase VALUES(178,'{"s": "abcdefghijabcdefghijabcdefghijz"}','30','{"s": "str"}','{"result": "int"}',12);
INSERT INTO test_case_testcase VALUES(179,'{"s": "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"}','-1','{"s": "str"}','{"result": "int"}',12);
INSERT INTO test_case_testcase VALUES(180,'{"s": "zzyyxxwwvvuuttssrrqqppoonnmmllkkjjii"}','-1','{"s": "str"}','{"result": "int"}',12);
INSERT INTO test_case_testcase VALUES(181,'{"matrix": [[1]]}','[[1]]','{"matrix": "List[List[int]]"}','{"result": "List[List[int]]"}',13);
INSERT INTO test_case_testcase VALUES(182,'{"matrix": [[1, 2], [3, 4]]}','[[3, 1], [4, 2]]','{"matrix": "List[List[int]]"}','{"result": "List[List[int]]"}',13);
INSERT INTO test_case_testcase VALUES(183,'{"matrix": [[1, 2, 3], [4, 5, 6], [7, 8, 9]]}','[[7, 4, 1], [8, 5, 2], [9, 6, 3]]','{"matrix": "List[List[int]]"}','{"result": "List[List[int]]"}',13);
INSERT INTO test_case_testcase VALUES(184,'{"matrix": [[5, 1, 9, 11], [2, 4, 8, 10], [13, 3, 6, 7], [15, 14, 12, 16]]}','[[15, 13, 2, 5], [14, 3, 4, 1], [12, 6, 8, 9], [16, 7, 10, 11]]','{"matrix": "List[List[int]]"}','{"result": "List[List[int]]"}',13);
INSERT INTO test_case_testcase VALUES(185,'{"matrix": [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]}','[[13, 9, 5, 1], [14, 10, 6, 2], [15, 11, 7, 3], [16, 12, 8, 4]]','{"matrix": "List[List[int]]"}','{"result": "List[List[int]]"}',13);
INSERT INTO test_case_testcase VALUES(186,'{"matrix": [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25]]}','[[21, 16, 11, 6, 1], [22, 17, 12, 7, 2], [23, 18, 13, 8, 3], [24, 19, 14, 9, 4], [25, 20, 15, 10, 5]]','{"matrix": "List[List[int]]"}','{"result": "List[List[int]]"}',13);
INSERT INTO test_case_testcase VALUES(187,'{"matrix": [[10, 20], [30, 40]]}','[[30, 10], [40, 20]]','{"matrix": "List[List[int]]"}','{"result": "List[List[int]]"}',13);
INSERT INTO test_case_testcase VALUES(188,'{"matrix": [[2, 4], [1, 3]]}','[[1, 2], [3, 4]]','{"matrix": "List[List[int]]"}','{"result": "List[List[int]]"}',13);
INSERT INTO test_case_testcase VALUES(189,'{"matrix": [[1, 1], [2, 2]]}','[[2, 1], [2, 1]]','{"matrix": "List[List[int]]"}','{"result": "List[List[int]]"}',13);
INSERT INTO test_case_testcase VALUES(190,'{"matrix": [[3, 3, 3, 3], [3, 3, 3, 3], [3, 3, 3, 3], [3, 3, 3, 3]]}','[[3, 3, 3, 3], [3, 3, 3, 3], [3, 3, 3, 3], [3, 3, 3, 3]]','{"matrix": "List[List[int]]"}','{"result": "List[List[int]]"}',13);
INSERT INTO test_case_testcase VALUES(191,'{"matrix": [[7]]}','[[7]]','{"matrix": "List[List[int]]"}','{"result": "List[List[int]]"}',13);
INSERT INTO test_case_testcase VALUES(192,'{"matrix": [[0, 0], [0, 0]]}','[[0, 0], [0, 0]]','{"matrix": "List[List[int]]"}','{"result": "List[List[int]]"}',13);
INSERT INTO test_case_testcase VALUES(193,'{"matrix": [[11, 12, 13], [14, 15, 16], [17, 18, 19]]}','[[17, 14, 11], [18, 15, 12], [19, 16, 13]]','{"matrix": "List[List[int]]"}','{"result": "List[List[int]]"}',13);
INSERT INTO test_case_testcase VALUES(209,'{"nums1": [1, 2, 3, 0, 0, 0], "m": 3, "nums2": [2, 5, 6], "n": 3}','[1, 2, 2, 3, 5, 6]','{"nums1": "List[int]", "m": "int", "nums2": "List[int]", "n": "int"}','{"result": "List[int]"}',15);
INSERT INTO test_case_testcase VALUES(210,'{"nums1": [1], "m": 1, "nums2": [], "n": 0}','[1]','{"nums1": "List[int]", "m": "int", "nums2": "List[int]", "n": "int"}','{"result": "List[int]"}',15);
INSERT INTO test_case_testcase VALUES(211,'{"nums1": [0], "m": 0, "nums2": [1], "n": 1}','[1]','{"nums1": "List[int]", "m": "int", "nums2": "List[int]", "n": "int"}','{"result": "List[int]"}',15);
INSERT INTO test_case_testcase VALUES(212,'{"nums1": [2, 0], "m": 1, "nums2": [1], "n": 1}','[1, 2]','{"nums1": "List[int]", "m": "int", "nums2": "List[int]", "n": "int"}','{"result": "List[int]"}',15);
INSERT INTO test_case_testcase VALUES(213,'{"nums1": [4, 5, 6, 0, 0, 0], "m": 3, "nums2": [1, 2, 3], "n": 3}','[1, 2, 3, 4, 5, 6]','{"nums1": "List[int]", "m": "int", "nums2": "List[int]", "n": "int"}','{"result": "List[int]"}',15);
INSERT INTO test_case_testcase VALUES(214,'{"nums1": [1, 3, 5, 0, 0, 0], "m": 3, "nums2": [2, 4, 6], "n": 3}','[1, 2, 3, 4, 5, 6]','{"nums1": "List[int]", "m": "int", "nums2": "List[int]", "n": "int"}','{"result": "List[int]"}',15);
INSERT INTO test_case_testcase VALUES(215,'{"nums1": [0, 0, 0, 0, 0], "m": 0, "nums2": [1, 2, 3, 4, 5], "n": 5}','[1, 2, 3, 4, 5]','{"nums1": "List[int]", "m": "int", "nums2": "List[int]", "n": "int"}','{"result": "List[int]"}',15);
INSERT INTO test_case_testcase VALUES(216,'{"nums1": [1, 2, 0, 0], "m": 2, "nums2": [3, 4], "n": 2}','[1, 2, 3, 4]','{"nums1": "List[int]", "m": "int", "nums2": "List[int]", "n": "int"}','{"result": "List[int]"}',15);
INSERT INTO test_case_testcase VALUES(217,'{"nums1": [0, 0, 0, 0, 0], "m": 0, "nums2": [0, 0, 0, 0, 0], "n": 5}','[0, 0, 0, 0, 0]','{"nums1": "List[int]", "m": "int", "nums2": "List[int]", "n": "int"}','{"result": "List[int]"}',15);
INSERT INTO test_case_testcase VALUES(218,'{"nums1": [1, 2, 3, 0, 0, 0], "m": 3, "nums2": [-1, -2, -3], "n": 3}','[-3, -2, -1, 1, 2, 3]','{"nums1": "List[int]", "m": "int", "nums2": "List[int]", "n": "int"}','{"result": "List[int]"}',15);
INSERT INTO test_case_testcase VALUES(219,'{"nums1": [-5, -4, 0, 0, 0, 0], "m": 2, "nums2": [-3, -2, -1, 0], "n": 4}','[-5, -4, -3, -2, -1, 0]','{"nums1": "List[int]", "m": "int", "nums2": "List[int]", "n": "int"}','{"result": "List[int]"}',15);
INSERT INTO test_case_testcase VALUES(220,'{"nums1": [4, 0, 0, 0, 0, 0], "m": 1, "nums2": [1, 2, 3, 5, 6], "n": 5}','[1, 2, 3, 4, 5, 6]','{"nums1": "List[int]", "m": "int", "nums2": "List[int]", "n": "int"}','{"result": "List[int]"}',15);
INSERT INTO test_case_testcase VALUES(221,'{"nums1": [3, 0, 0, 0], "m": 1, "nums2": [1, 2, 4], "n": 3}','[1, 2, 3, 4]','{"nums1": "List[int]", "m": "int", "nums2": "List[int]", "n": "int"}','{"result": "List[int]"}',15);
INSERT INTO test_case_testcase VALUES(222,'{"nums1": [2, 4, 6, 0, 0, 0], "m": 3, "nums2": [1, 3, 5], "n": 3}','[1, 2, 3, 4, 5, 6]','{"nums1": "List[int]", "m": "int", "nums2": "List[int]", "n": "int"}','{"result": "List[int]"}',15);
INSERT INTO test_case_testcase VALUES(239,'{"s": "()"}','true','{"s": "str"}','{"result": "bool"}',17);
INSERT INTO test_case_testcase VALUES(240,'{"s": "()[]{}"}','true','{"s": "str"}','{"result": "bool"}',17);
INSERT INTO test_case_testcase VALUES(241,'{"s": "(]"}','false','{"s": "str"}','{"result": "bool"}',17);
INSERT INTO test_case_testcase VALUES(242,'{"s": "([)]"}','false','{"s": "str"}','{"result": "bool"}',17);
INSERT INTO test_case_testcase VALUES(243,'{"s": "{[]}"}','true','{"s": "str"}','{"result": "bool"}',17);
INSERT INTO test_case_testcase VALUES(244,'{"s": "{[()()]}"}','true','{"s": "str"}','{"result": "bool"}',17);
INSERT INTO test_case_testcase VALUES(245,'{"s": "(({{[[]]}}))"}','true','{"s": "str"}','{"result": "bool"}',17);
INSERT INTO test_case_testcase VALUES(246,'{"s": "((((((()))))))"}','true','{"s": "str"}','{"result": "bool"}',17);
INSERT INTO test_case_testcase VALUES(247,'{"s": "[(])"}','false','{"s": "str"}','{"result": "bool"}',17);
INSERT INTO test_case_testcase VALUES(248,'{"s": "([{}])"}','true','{"s": "str"}','{"result": "bool"}',17);
INSERT INTO test_case_testcase VALUES(249,'{"s": ""}','true','{"s": "str"}','{"result": "bool"}',17);
INSERT INTO test_case_testcase VALUES(250,'{"s": "{[()]}}"}','false','{"s": "str"}','{"result": "bool"}',17);
INSERT INTO test_case_testcase VALUES(251,'{"s": "{{{{{{{{{{{{{{{{{}}}}}}}}}}}}}}}}}"}','true','{"s": "str"}','{"result": "bool"}',17);
INSERT INTO test_case_testcase VALUES(252,'{"s": "[({(())}[()])]"}','true','{"s": "str"}','{"result": "bool"}',17);
INSERT INTO test_case_testcase VALUES(253,'{"s": "[()({})[((){}){}]]"}','true','{"s": "str"}','{"result": "bool"}',17);
INSERT INTO test_case_testcase VALUES(254,'{"s": "III"}','3','{"s": "str"}','{"result": "int"}',18);
INSERT INTO test_case_testcase VALUES(255,'{"s": "IV"}','4','{"s": "str"}','{"result": "int"}',18);
INSERT INTO test_case_testcase VALUES(256,'{"s": "IX"}','9','{"s": "str"}','{"result": "int"}',18);
INSERT INTO test_case_testcase VALUES(257,'{"s": "LVIII"}','58','{"s": "str"}','{"result": "int"}',18);
INSERT INTO test_case_testcase VALUES(258,'{"s": "MCMXCIV"}','1994','{"s": "str"}','{"result": "int"}',18);
INSERT INTO test_case_testcase VALUES(259,'{"s": "MMMCMXCIX"}','3999','{"s": "str"}','{"result": "int"}',18);
INSERT INTO test_case_testcase VALUES(260,'{"s": "XLII"}','42','{"s": "str"}','{"result": "int"}',18);
INSERT INTO test_case_testcase VALUES(261,'{"s": "XC"}','90','{"s": "str"}','{"result": "int"}',18);
INSERT INTO test_case_testcase VALUES(262,'{"s": "CXLIV"}','144','{"s": "str"}','{"result": "int"}',18);
INSERT INTO test_case_testcase VALUES(263,'{"s": "CDXLIV"}','444','{"s": "str"}','{"result": "int"}',18);
INSERT INTO test_case_testcase VALUES(264,'{"s": "CM"}','900','{"s": "str"}','{"result": "int"}',18);
INSERT INTO test_case_testcase VALUES(265,'{"s": "DCCCXLV"}','845','{"s": "str"}','{"result": "int"}',18);
INSERT INTO test_case_testcase VALUES(266,'{"s": "MMCDXXI"}','2421','{"s": "str"}','{"result": "int"}',18);
INSERT INTO test_case_testcase VALUES(267,'{"s": "MMMCC"}','3200','{"s": "str"}','{"result": "int"}',18);
INSERT INTO test_case_testcase VALUES(268,'{"s": "MMMDCCCLXXXVIII"}','3888','{"s": "str"}','{"result": "int"}',18);
INSERT INTO test_case_testcase VALUES(269,'{"n": 1}','true','{"n": "int"}','{"result": "bool"}',19);
INSERT INTO test_case_testcase VALUES(270,'{"n": 3}','true','{"n": "int"}','{"result": "bool"}',19);
INSERT INTO test_case_testcase VALUES(271,'{"n": 9}','true','{"n": "int"}','{"result": "bool"}',19);
INSERT INTO test_case_testcase VALUES(272,'{"n": 27}','true','{"n": "int"}','{"result": "bool"}',19);
INSERT INTO test_case_testcase VALUES(273,'{"n": 81}','true','{"n": "int"}','{"result": "bool"}',19);
INSERT INTO test_case_testcase VALUES(274,'{"n": 243}','true','{"n": "int"}','{"result": "bool"}',19);
INSERT INTO test_case_testcase VALUES(275,'{"n": 729}','true','{"n": "int"}','{"result": "bool"}',19);
INSERT INTO test_case_testcase VALUES(276,'{"n": 2187}','true','{"n": "int"}','{"result": "bool"}',19);
INSERT INTO test_case_testcase VALUES(277,'{"n": 6561}','true','{"n": "int"}','{"result": "bool"}',19);
INSERT INTO test_case_testcase VALUES(278,'{"n": 19683}','true','{"n": "int"}','{"result": "bool"}',19);
INSERT INTO test_case_testcase VALUES(279,'{"n": 59049}','true','{"n": "int"}','{"result": "bool"}',19);
INSERT INTO test_case_testcase VALUES(280,'{"n": 177147}','true','{"n": "int"}','{"result": "bool"}',19);
INSERT INTO test_case_testcase VALUES(281,'{"n": 531441}','true','{"n": "int"}','{"result": "bool"}',19);
INSERT INTO test_case_testcase VALUES(282,'{"n": 1594323}','true','{"n": "int"}','{"result": "bool"}',19);
INSERT INTO test_case_testcase VALUES(283,'{"n": 4782969}','true','{"n": "int"}','{"result": "bool"}',19);
INSERT INTO test_case_testcase VALUES(284,'{"n": 0}','0','{"n": "int"}','{"result": "int"}',20);
INSERT INTO test_case_testcase VALUES(285,'{"n": 1}','0','{"n": "int"}','{"result": "int"}',20);
INSERT INTO test_case_testcase VALUES(286,'{"n": 2}','0','{"n": "int"}','{"result": "int"}',20);
INSERT INTO test_case_testcase VALUES(287,'{"n": 10}','4','{"n": "int"}','{"result": "int"}',20);
INSERT INTO test_case_testcase VALUES(288,'{"n": 20}','8','{"n": "int"}','{"result": "int"}',20);
INSERT INTO test_case_testcase VALUES(289,'{"n": 50}','15','{"n": "int"}','{"result": "int"}',20);
INSERT INTO test_case_testcase VALUES(290,'{"n": 100}','25','{"n": "int"}','{"result": "int"}',20);
INSERT INTO test_case_testcase VALUES(291,'{"n": 500}','95','{"n": "int"}','{"result": "int"}',20);
INSERT INTO test_case_testcase VALUES(292,'{"n": 1000}','168','{"n": "int"}','{"result": "int"}',20);
INSERT INTO test_case_testcase VALUES(293,'{"n": 10000}','1229','{"n": "int"}','{"result": "int"}',20);
INSERT INTO test_case_testcase VALUES(294,'{"n": 50000}','5133','{"n": "int"}','{"result": "int"}',20);
INSERT INTO test_case_testcase VALUES(295,'{"n": 100000}','9592','{"n": "int"}','{"result": "int"}',20);
INSERT INTO test_case_testcase VALUES(296,'{"n": 500000}','41538','{"n": "int"}','{"result": "int"}',20);
INSERT INTO test_case_testcase VALUES(297,'{"n": 1000000}','78498','{"n": "int"}','{"result": "int"}',20);
INSERT INTO test_case_testcase VALUES(298,'{"n": 1500000}','114155','{"n": "int"}','{"result": "int"}',20);
INSERT INTO test_case_testcase VALUES(299,'{"n": 1}','["1"]','{"n": "int"}','{"result": "list[str]"}',21);
INSERT INTO test_case_testcase VALUES(300,'{"n": 3}','["1", "2", "Fizz"]','{"n": "int"}','{"result": "list[str]"}',21);
INSERT INTO test_case_testcase VALUES(301,'{"n": 5}','["1", "2", "Fizz", "4", "Buzz"]','{"n": "int"}','{"result": "list[str]"}',21);
INSERT INTO test_case_testcase VALUES(302,'{"n": 10}','["1", "2", "Fizz", "4", "Buzz", "Fizz", "7", "8", "Fizz", "Buzz"]','{"n": "int"}','{"result": "list[str]"}',21);
INSERT INTO test_case_testcase VALUES(303,'{"n": 15}','["1", "2", "Fizz", "4", "Buzz", "Fizz", "7", "8", "Fizz", "Buzz", "11", "Fizz", "13", "14", "FizzBuzz"]','{"n": "int"}','{"result": "list[str]"}',21);
INSERT INTO test_case_testcase VALUES(304,'{"n": 20}','["1", "2", "Fizz", "4", "Buzz", "Fizz", "7", "8", "Fizz", "Buzz", "11", "Fizz", "13", "14", "FizzBuzz", "16", "17", "Fizz", "19", "Buzz"]','{"n": "int"}','{"result": "list[str]"}',21);
INSERT INTO test_case_testcase VALUES(305,'{"n": 30}','["1", "2", "Fizz", "4", "Buzz", "Fizz", "7", "8", "Fizz", "Buzz", "11", "Fizz", "13", "14", "FizzBuzz", "16", "17", "Fizz", "19", "Buzz", "Fizz", "22", "23", "Fizz", "Buzz", "26", "Fizz", "28", "29", "FizzBuzz"]','{"n": "int"}','{"result": "list[str]"}',21);
INSERT INTO test_case_testcase VALUES(306,'{"n": 50}','["1", "2", "Fizz", "4", "Buzz", "Fizz", "7", "8", "Fizz", "Buzz", "11", "Fizz", "13", "14", "FizzBuzz", "16", "17", "Fizz", "19", "Buzz", "Fizz", "22", "23", "Fizz", "Buzz", "26", "Fizz", "28", "29", "FizzBuzz", "31", "32", "Fizz", "34", "Buzz", "Fizz", "37", "38", "Fizz", "Buzz", "41", "Fizz", "43", "44", "FizzBuzz", "46", "47", "Fizz", "49", "Buzz"]','{"n": "int"}','{"result": "list[str]"}',21);
INSERT INTO test_case_testcase VALUES(307,'{"n": 75}','["1", "2", "Fizz", "4", "Buzz", "Fizz", "7", "8", "Fizz", "Buzz", "11", "Fizz", "13", "14", "FizzBuzz", "16", "17", "Fizz", "19", "Buzz", "Fizz", "22", "23", "Fizz", "Buzz", "26", "Fizz", "28", "29", "FizzBuzz", "31", "32", "Fizz", "34", "Buzz", "Fizz", "37", "38", "Fizz", "Buzz", "41", "Fizz", "43", "44", "FizzBuzz", "46", "47", "Fizz", "49", "Buzz", "Fizz", "52", "53", "Fizz", "Buzz", "56", "Fizz", "58", "59", "FizzBuzz", "61", "62", "Fizz", "64", "Buzz", "Fizz", "67", "68", "Fizz", "Buzz", "71", "Fizz", "73", "74", "FizzBuzz"]','{"n": "int"}','{"result": "list[str]"}',21);
INSERT INTO test_case_testcase VALUES(308,'{"n": 100}','["1", "2", "Fizz", "4", "Buzz", "Fizz", "7", "8", "Fizz", "Buzz", "11", "Fizz", "13", "14", "FizzBuzz", "16", "17", "Fizz", "19", "Buzz", "Fizz", "22", "23", "Fizz", "Buzz", "26", "Fizz", "28", "29", "FizzBuzz", "31", "32", "Fizz", "34", "Buzz", "Fizz", "37", "38", "Fizz", "Buzz", "41", "Fizz", "43", "44", "FizzBuzz", "46", "47", "Fizz", "49", "Buzz", "Fizz", "52", "53", "Fizz", "Buzz", "56", "Fizz", "58", "59", "FizzBuzz", "61", "62", "Fizz", "64", "Buzz", "Fizz", "67", "68", "Fizz", "Buzz", "71", "Fizz", "73", "74", "FizzBuzz", "76", "77", "Fizz", "79", "Buzz", "Fizz", "82", "83", "Fizz", "Buzz", "86", "Fizz", "88", "89", "FizzBuzz", "91", "92", "Fizz", "94", "Buzz", "Fizz", "97", "98", "Fizz", "Buzz"]','{"n": "int"}','{"result": "list[str]"}',21);
INSERT INTO test_case_testcase VALUES(309,'{"n": 120}','["1", "2", "Fizz", "4", "Buzz", "Fizz", "7", "8", "Fizz", "Buzz", "11", "Fizz", "13", "14", "FizzBuzz", "16", "17", "Fizz", "19", "Buzz", "Fizz", "22", "23", "Fizz", "Buzz", "26", "Fizz", "28", "29", "FizzBuzz", "31", "32", "Fizz", "34", "Buzz", "Fizz", "37", "38", "Fizz", "Buzz", "41", "Fizz", "43", "44", "FizzBuzz", "46", "47", "Fizz", "49", "Buzz", "Fizz", "52", "53", "Fizz", "Buzz", "56", "Fizz", "58", "59", "FizzBuzz", "61", "62", "Fizz", "64", "Buzz", "Fizz", "67", "68", "Fizz", "Buzz", "71", "Fizz", "73", "74", "FizzBuzz", "76", "77", "Fizz", "79", "Buzz", "Fizz", "82", "83", "Fizz", "Buzz", "86", "Fizz", "88", "89", "FizzBuzz", "91", "92", "Fizz", "94", "Buzz", "Fizz", "97", "98", "Fizz", "Buzz", "101", "Fizz", "103", "104", "FizzBuzz", "106", "107", "Fizz", "109", "Buzz", "Fizz", "112", "113", "Fizz", "Buzz", "116", "Fizz", "118", "119", "FizzBuzz"]','{"n": "int"}','{"result": "list[str]"}',21);
INSERT INTO test_case_testcase VALUES(310,'{"head": [1, 2, 3, 4], "node": 2}','[1, 3, 4]','{"head": "list[int]", "node": "int"}','{"result": "list[int]"}',22);
INSERT INTO test_case_testcase VALUES(311,'{"head": [5, 6, 7, 8], "node": 6}','[5, 7, 8]','{"head": "list[int]", "node": "int"}','{"result": "list[int]"}',22);
INSERT INTO test_case_testcase VALUES(312,'{"head": [9, 10, 11, 12, 13], "node": 11}','[9, 10, 12, 13]','{"head": "list[int]", "node": "int"}','{"result": "list[int]"}',22);
INSERT INTO test_case_testcase VALUES(313,'{"head": [14, 15, 16, 17], "node": 16}','[14, 15, 17]','{"head": "list[int]", "node": "int"}','{"result": "list[int]"}',22);
INSERT INTO test_case_testcase VALUES(314,'{"head": [18, 19, 20, 21], "node": 18}','[19, 20, 21]','{"head": "list[int]", "node": "int"}','{"result": "list[int]"}',22);
INSERT INTO test_case_testcase VALUES(315,'{"head": [22, 23, 24], "node": 23}','[22, 24]','{"head": "list[int]", "node": "int"}','{"result": "list[int]"}',22);
INSERT INTO test_case_testcase VALUES(316,'{"head": [25, 26, 27, 28, 29], "node": 28}','[25, 26, 27, 29]','{"head": "list[int]", "node": "int"}','{"result": "list[int]"}',22);
INSERT INTO test_case_testcase VALUES(317,'{"head": [30, 31, 32, 33, 34], "node": 32}','[30, 31, 33, 34]','{"head": "list[int]", "node": "int"}','{"result": "list[int]"}',22);
INSERT INTO test_case_testcase VALUES(318,'{"head": [35, 36, 37, 38, 39, 40], "node": 37}','[35, 36, 38, 39, 40]','{"head": "list[int]", "node": "int"}','{"result": "list[int]"}',22);
INSERT INTO test_case_testcase VALUES(319,'{"head": [41, 42, 43, 44], "node": 43}','[41, 42, 44]','{"head": "list[int]", "node": "int"}','{"result": "list[int]"}',22);
INSERT INTO test_case_testcase VALUES(320,'{"head": [45, 46, 47, 48, 49], "node": 46}','[45, 47, 48, 49]','{"head": "list[int]", "node": "int"}','{"result": "list[int]"}',22);
INSERT INTO test_case_testcase VALUES(321,'{"head": [50, 51, 52], "node": 51}','[50, 52]','{"head": "list[int]", "node": "int"}','{"result": "list[int]"}',22);
INSERT INTO test_case_testcase VALUES(322,'{"head": [53, 54, 55, 56, 57], "node": 55}','[53, 54, 56, 57]','{"head": "list[int]", "node": "int"}','{"result": "list[int]"}',22);
INSERT INTO test_case_testcase VALUES(323,'{"head": [58, 59, 60, 61, 62], "node": 61}','[58, 59, 60, 62]','{"head": "list[int]", "node": "int"}','{"result": "list[int]"}',22);
INSERT INTO test_case_testcase VALUES(324,'{"head": [63, 64, 65, 66, 67], "node": 64}','[63, 65, 66, 67]','{"head": "list[int]", "node": "int"}','{"result": "list[int]"}',22);
INSERT INTO test_case_testcase VALUES(325,'{"head": [1, 2, 3, 4, 5], "n": 2}','[1, 2, 3, 5]','{"head": "list[int]", "n": "int"}','{"result": "list[int]"}',23);
INSERT INTO test_case_testcase VALUES(326,'{"head": [1], "n": 1}','[]','{"head": "list[int]", "n": "int"}','{"result": "list[int]"}',23);
INSERT INTO test_case_testcase VALUES(327,'{"head": [1, 2], "n": 1}','[1]','{"head": "list[int]", "n": "int"}','{"result": "list[int]"}',23);
INSERT INTO test_case_testcase VALUES(328,'{"head": [1, 2, 3], "n": 3}','[2, 3]','{"head": "list[int]", "n": "int"}','{"result": "list[int]"}',23);
INSERT INTO test_case_testcase VALUES(329,'{"head": [5, 6, 7, 8, 9, 10], "n": 4}','[5, 6, 7, 9, 10]','{"head": "list[int]", "n": "int"}','{"result": "list[int]"}',23);
INSERT INTO test_case_testcase VALUES(330,'{"head": [10, 20, 30, 40, 50], "n": 1}','[10, 20, 30, 40]','{"head": "list[int]", "n": "int"}','{"result": "list[int]"}',23);
INSERT INTO test_case_testcase VALUES(331,'{"head": [1, 3, 4, 6, 8], "n": 5}','[3, 4, 6, 8]','{"head": "list[int]", "n": "int"}','{"result": "list[int]"}',23);
INSERT INTO test_case_testcase VALUES(332,'{"head": [1, 2, 3, 4, 5, 6], "n": 3}','[1, 2, 4, 5, 6]','{"head": "list[int]", "n": "int"}','{"result": "list[int]"}',23);
INSERT INTO test_case_testcase VALUES(333,'{"head": [1, 2, 3, 4], "n": 1}','[1, 2, 3]','{"head": "list[int]", "n": "int"}','{"result": "list[int]"}',23);
INSERT INTO test_case_testcase VALUES(334,'{"head": [1, 2, 3], "n": 2}','[1, 3]','{"head": "list[int]", "n": "int"}','{"result": "list[int]"}',23);
INSERT INTO test_case_testcase VALUES(335,'{"head": [5, 6, 7, 8], "n": 2}','[5, 6, 8]','{"head": "list[int]", "n": "int"}','{"result": "list[int]"}',23);
INSERT INTO test_case_testcase VALUES(336,'{"head": [9, 10, 11, 12, 13], "n": 5}','[10, 11, 12, 13]','{"head": "list[int]", "n": "int"}','{"result": "list[int]"}',23);
INSERT INTO test_case_testcase VALUES(337,'{"head": [1, 2, 3, 4, 5, 6, 7], "n": 4}','[1, 2, 3, 5, 6, 7]','{"head": "list[int]", "n": "int"}','{"result": "list[int]"}',23);
INSERT INTO test_case_testcase VALUES(338,'{"head": [8, 9, 10, 11], "n": 3}','[8, 9, 11]','{"head": "list[int]", "n": "int"}','{"result": "list[int]"}',23);
INSERT INTO test_case_testcase VALUES(339,'{"head": [14, 15], "n": 1}','[14]','{"head": "list[int]", "n": "int"}','{"result": "list[int]"}',23);
INSERT INTO test_case_testcase VALUES(340,'{"head": [1, 2, 3, 4, 5]}','[5, 4, 3, 2, 1]','{"head": "list[int]"}','{"result": "list[int]"}',24);
INSERT INTO test_case_testcase VALUES(341,'{"head": [1]}','[1]','{"head": "list[int]"}','{"result": "list[int]"}',24);
INSERT INTO test_case_testcase VALUES(342,'{"head": []}','[]','{"head": "list[int]"}','{"result": "list[int]"}',24);
INSERT INTO test_case_testcase VALUES(343,'{"head": [10, 20, 30, 40]}','[40, 30, 20, 10]','{"head": "list[int]"}','{"result": "list[int]"}',24);
INSERT INTO test_case_testcase VALUES(344,'{"head": [1, 2, 3]}','[3, 2, 1]','{"head": "list[int]"}','{"result": "list[int]"}',24);
INSERT INTO test_case_testcase VALUES(345,'{"head": [7, 8, 9, 10, 11]}','[11, 10, 9, 8, 7]','{"head": "list[int]"}','{"result": "list[int]"}',24);
INSERT INTO test_case_testcase VALUES(346,'{"head": [5, 4, 3, 2, 1]}','[1, 2, 3, 4, 5]','{"head": "list[int]"}','{"result": "list[int]"}',24);
INSERT INTO test_case_testcase VALUES(347,'{"head": [1, 3, 5, 7]}','[7, 5, 3, 1]','{"head": "list[int]"}','{"result": "list[int]"}',24);
INSERT INTO test_case_testcase VALUES(348,'{"head": [1, 2, 3, 4, 5, 6]}','[6, 5, 4, 3, 2, 1]','{"head": "list[int]"}','{"result": "list[int]"}',24);
INSERT INTO test_case_testcase VALUES(349,'{"head": [9, 8, 7]}','[7, 8, 9]','{"head": "list[int]"}','{"result": "list[int]"}',24);
INSERT INTO test_case_testcase VALUES(350,'{"head": [1, 2]}','[2, 1]','{"head": "list[int]"}','{"result": "list[int]"}',24);
INSERT INTO test_case_testcase VALUES(351,'{"head": [2, 4, 6, 8, 10]}','[10, 8, 6, 4, 2]','{"head": "list[int]"}','{"result": "list[int]"}',24);
INSERT INTO test_case_testcase VALUES(352,'{"head": [1, 2, 3, 4]}','[4, 3, 2, 1]','{"head": "list[int]"}','{"result": "list[int]"}',24);
INSERT INTO test_case_testcase VALUES(353,'{"head": [100, 200, 300]}','[300, 200, 100]','{"head": "list[int]"}','{"result": "list[int]"}',24);
INSERT INTO test_case_testcase VALUES(354,'{"head": [15, 25]}','[25, 15]','{"head": "list[int]"}','{"result": "list[int]"}',24);
INSERT INTO test_case_testcase VALUES(355,'{"list1": [1, 2, 4], "list2": [1, 3, 4]}','[1, 1, 2, 3, 4, 4]','{"list1": "list[int]", "list2": "list[int]"}','{"result": "list[int]"}',25);
INSERT INTO test_case_testcase VALUES(356,'{"list1": [], "list2": []}','[]','{"list1": "list[int]", "list2": "list[int]"}','{"result": "list[int]"}',25);
INSERT INTO test_case_testcase VALUES(357,'{"list1": [], "list2": [0]}','[0]','{"list1": "list[int]", "list2": "list[int]"}','{"result": "list[int]"}',25);
INSERT INTO test_case_testcase VALUES(358,'{"list1": [1], "list2": []}','[1]','{"list1": "list[int]", "list2": "list[int]"}','{"result": "list[int]"}',25);
INSERT INTO test_case_testcase VALUES(359,'{"list1": [2], "list2": [1]}','[1, 2]','{"list1": "list[int]", "list2": "list[int]"}','{"result": "list[int]"}',25);
INSERT INTO test_case_testcase VALUES(360,'{"list1": [5, 10, 15], "list2": [3, 8, 12]}','[3, 5, 8, 10, 12, 15]','{"list1": "list[int]", "list2": "list[int]"}','{"result": "list[int]"}',25);
INSERT INTO test_case_testcase VALUES(361,'{"list1": [1, 4, 6], "list2": [2, 3, 5]}','[1, 2, 3, 4, 5, 6]','{"list1": "list[int]", "list2": "list[int]"}','{"result": "list[int]"}',25);
INSERT INTO test_case_testcase VALUES(362,'{"list1": [1, 3, 5], "list2": [2, 4, 6]}','[1, 2, 3, 4, 5, 6]','{"list1": "list[int]", "list2": "list[int]"}','{"result": "list[int]"}',25);
INSERT INTO test_case_testcase VALUES(363,'{"list1": [1, 2, 3], "list2": [4, 5, 6]}','[1, 2, 3, 4, 5, 6]','{"list1": "list[int]", "list2": "list[int]"}','{"result": "list[int]"}',25);
INSERT INTO test_case_testcase VALUES(364,'{"list1": [0, 3, 5], "list2": [2, 6]}','[0, 2, 3, 5, 6]','{"list1": "list[int]", "list2": "list[int]"}','{"result": "list[int]"}',25);
INSERT INTO test_case_testcase VALUES(365,'{"list1": [7, 8, 9], "list2": [1, 2, 3]}','[1, 2, 3, 7, 8, 9]','{"list1": "list[int]", "list2": "list[int]"}','{"result": "list[int]"}',25);
INSERT INTO test_case_testcase VALUES(366,'{"list1": [1, 2, 3], "list2": [1, 2, 3]}','[1, 1, 2, 2, 3, 3]','{"list1": "list[int]", "list2": "list[int]"}','{"result": "list[int]"}',25);
INSERT INTO test_case_testcase VALUES(367,'{"list1": [1, 2, 3], "list2": [0]}','[0, 1, 2, 3]','{"list1": "list[int]", "list2": "list[int]"}','{"result": "list[int]"}',25);
INSERT INTO test_case_testcase VALUES(368,'{"list1": [1, 3, 4, 5], "list2": [2, 6]}','[1, 2, 3, 4, 5, 6]','{"list1": "list[int]", "list2": "list[int]"}','{"result": "list[int]"}',25);
INSERT INTO test_case_testcase VALUES(369,'{"head": [3, 2, 0, -4], "pos": 1}','true','{"head": "list[int]", "pos": "int"}','{"result": "bool"}',26);
INSERT INTO test_case_testcase VALUES(370,'{"head": [1, 2], "pos": 0}','true','{"head": "list[int]", "pos": "int"}','{"result": "bool"}',26);
INSERT INTO test_case_testcase VALUES(371,'{"head": [1], "pos": -1}','false','{"head": "list[int]", "pos": "int"}','{"result": "bool"}',26);
INSERT INTO test_case_testcase VALUES(372,'{"head": [1, 2, 3, 4, 5], "pos": 2}','true','{"head": "list[int]", "pos": "int"}','{"result": "bool"}',26);
INSERT INTO test_case_testcase VALUES(373,'{"head": [1], "pos": 0}','true','{"head": "list[int]", "pos": "int"}','{"result": "bool"}',26);
INSERT INTO test_case_testcase VALUES(374,'{"head": [4, 5, 6, 7, 8], "pos": -1}','false','{"head": "list[int]", "pos": "int"}','{"result": "bool"}',26);
INSERT INTO test_case_testcase VALUES(375,'{"head": [1, 2, 3], "pos": 1}','true','{"head": "list[int]", "pos": "int"}','{"result": "bool"}',26);
INSERT INTO test_case_testcase VALUES(376,'{"head": [1, 2, 3], "pos": 2}','true','{"head": "list[int]", "pos": "int"}','{"result": "bool"}',26);
INSERT INTO test_case_testcase VALUES(377,'{"head": [], "pos": -1}','false','{"head": "list[int]", "pos": "int"}','{"result": "bool"}',26);
INSERT INTO test_case_testcase VALUES(378,'{"head": [10, 20, 30], "pos": 0}','true','{"head": "list[int]", "pos": "int"}','{"result": "bool"}',26);
INSERT INTO test_case_testcase VALUES(379,'{"head": [1, 2, 3, 4], "pos": -1}','false','{"head": "list[int]", "pos": "int"}','{"result": "bool"}',26);
INSERT INTO test_case_testcase VALUES(380,'{"head": [5, 4, 3, 2, 1], "pos": 2}','true','{"head": "list[int]", "pos": "int"}','{"result": "bool"}',26);
INSERT INTO test_case_testcase VALUES(381,'{"head": [1, 3, 5, 7], "pos": -1}','false','{"head": "list[int]", "pos": "int"}','{"result": "bool"}',26);
INSERT INTO test_case_testcase VALUES(382,'{"head": [0], "pos": 0}','true','{"head": "list[int]", "pos": "int"}','{"result": "bool"}',26);
INSERT INTO test_case_testcase VALUES(383,'{"head": [1, 2, 3, 4, 5], "pos": 3}','true','{"head": "list[int]", "pos": "int"}','{"result": "bool"}',26);
INSERT INTO test_case_testcase VALUES(384,'{"head": [1, 2, 2, 1]}','true','{"head": "list[int]"}','{"result": "bool"}',27);
INSERT INTO test_case_testcase VALUES(385,'{"head": [1, 2]}','false','{"head": "list[int]"}','{"result": "bool"}',27);
INSERT INTO test_case_testcase VALUES(386,'{"head": [1, 2, 3, 2, 1]}','true','{"head": "list[int]"}','{"result": "bool"}',27);
INSERT INTO test_case_testcase VALUES(387,'{"head": [1]}','true','{"head": "list[int]"}','{"result": "bool"}',27);
INSERT INTO test_case_testcase VALUES(388,'{"head": [1, 2, 3, 4, 5]}','false','{"head": "list[int]"}','{"result": "bool"}',27);
INSERT INTO test_case_testcase VALUES(389,'{"head": [1, 2, 1]}','true','{"head": "list[int]"}','{"result": "bool"}',27);
INSERT INTO test_case_testcase VALUES(390,'{"head": [2, 3, 3, 2]}','true','{"head": "list[int]"}','{"result": "bool"}',27);
INSERT INTO test_case_testcase VALUES(391,'{"head": [1, 2, 3, 4, 2, 1]}','false','{"head": "list[int]"}','{"result": "bool"}',27);
INSERT INTO test_case_testcase VALUES(392,'{"head": []}','true','{"head": "list[int]"}','{"result": "bool"}',27);
INSERT INTO test_case_testcase VALUES(393,'{"head": [1, 2, 1, 1]}','false','{"head": "list[int]"}','{"result": "bool"}',27);
INSERT INTO test_case_testcase VALUES(394,'{"head": [1, 0, 1]}','true','{"head": "list[int]"}','{"result": "bool"}',27);
INSERT INTO test_case_testcase VALUES(395,'{"head": [5, 4, 3, 4, 5]}','true','{"head": "list[int]"}','{"result": "bool"}',27);
INSERT INTO test_case_testcase VALUES(396,'{"head": [9, 1, 9, 2, 1, 9]}','false','{"head": "list[int]"}','{"result": "bool"}',27);
INSERT INTO test_case_testcase VALUES(397,'{"head": [1, 2, 2, 1, 3]}','false','{"head": "list[int]"}','{"result": "bool"}',27);
INSERT INTO test_case_testcase VALUES(398,'{"head": [8, 7, 6, 7, 8]}','true','{"head": "list[int]"}','{"result": "bool"}',27);
INSERT INTO test_case_testcase VALUES(399,'{"strs": ["eat", "tea", "tan", "ate", "nat", "bat"]}','[["bat"], ["nat", "tan"], ["ate", "eat", "tea"]]','{"strs": "list[str]"}','{"result": "list[list[str]]"}',28);
INSERT INTO test_case_testcase VALUES(400,'{"strs": [""]}','[[""]]','{"strs": "list[str]"}','{"result": "list[list[str]]"}',28);
INSERT INTO test_case_testcase VALUES(401,'{"strs": ["a"]}','[["a"]]','{"strs": "list[str]"}','{"result": "list[list[str]]"}',28);
INSERT INTO test_case_testcase VALUES(402,'{"strs": ["abc", "cba", "bac", "xyz", "zyx"]}','[["abc", "cba", "bac"], ["xyz", "zyx"]]','{"strs": "list[str]"}','{"result": "list[list[str]]"}',28);
INSERT INTO test_case_testcase VALUES(403,'{"strs": ["rat", "car", "tar", "arc"]}','[["car", "arc"], ["rat", "tar"]]','{"strs": "list[str]"}','{"result": "list[list[str]]"}',28);
INSERT INTO test_case_testcase VALUES(404,'{"strs": ["abcd", "bcda", "dabc", "dbca"]}','[["abcd", "bcda", "dabc", "dbca"]]','{"strs": "list[str]"}','{"result": "list[list[str]]"}',28);
INSERT INTO test_case_testcase VALUES(405,'{"strs": ["hello", "world", "dlrow", "olleh"]}','[["hello", "olleh"], ["world", "dlrow"]]','{"strs": "list[str]"}','{"result": "list[list[str]]"}',28);
INSERT INTO test_case_testcase VALUES(406,'{"strs": ["eat", "tea", "ate", "nat", "bat", "tab"]}','[["bat", "tab"], ["nat"], ["ate", "eat", "tea"]]','{"strs": "list[str]"}','{"result": "list[list[str]]"}',28);
INSERT INTO test_case_testcase VALUES(407,'{"strs": ["night", "thing", "sight", "girth"]}','[["night", "thing"], ["sight"], ["girth"]]','{"strs": "list[str]"}','{"result": "list[list[str]]"}',28);
INSERT INTO test_case_testcase VALUES(408,'{"strs": ["abc", "bca", "acb", "xyz", "zyx", "yza"]}','[["abc", "bca", "acb"], ["xyz", "zyx"], ["yza"]]','{"strs": "list[str]"}','{"result": "list[list[str]]"}',28);
INSERT INTO test_case_testcase VALUES(409,'{"strs": ["car", "race", "care", "acer", "arc"]}','[["car", "arc"], ["race", "care", "acer"]]','{"strs": "list[str]"}','{"result": "list[list[str]]"}',28);
INSERT INTO test_case_testcase VALUES(410,'{"strs": ["taco", "coat", "cat", "act"]}','[["taco", "coat"], ["cat", "act"]]','{"strs": "list[str]"}','{"result": "list[list[str]]"}',28);
INSERT INTO test_case_testcase VALUES(411,'{"strs": ["moon", "mono", "noon"]}','[["moon", "mono"], ["noon"]]','{"strs": "list[str]"}','{"result": "list[list[str]]"}',28);
INSERT INTO test_case_testcase VALUES(412,'{"strs": ["fluster", "restful", "sulfur"]}','[["fluster", "restful"], ["sulfur"]]','{"strs": "list[str]"}','{"result": "list[list[str]]"}',28);
INSERT INTO test_case_testcase VALUES(413,'{"strs": ["loop", "pool", "polo"]}','[["loop", "pool", "polo"]]','{"strs": "list[str]"}','{"result": "list[list[str]]"}',28);
INSERT INTO test_case_testcase VALUES(414,'{"pattern": "abba", "s": "dog cat cat dog"}','true','{"pattern": "str", "s": "str"}','{"result": "bool"}',29);
INSERT INTO test_case_testcase VALUES(415,'{"pattern": "abba", "s": "dog cat cat fish"}','false','{"pattern": "str", "s": "str"}','{"result": "bool"}',29);
INSERT INTO test_case_testcase VALUES(416,'{"pattern": "aaaa", "s": "dog cat cat dog"}','false','{"pattern": "str", "s": "str"}','{"result": "bool"}',29);
INSERT INTO test_case_testcase VALUES(417,'{"pattern": "abba", "s": "dog dog dog dog"}','false','{"pattern": "str", "s": "str"}','{"result": "bool"}',29);
INSERT INTO test_case_testcase VALUES(418,'{"pattern": "abc", "s": "red blue green"}','true','{"pattern": "str", "s": "str"}','{"result": "bool"}',29);
INSERT INTO test_case_testcase VALUES(419,'{"pattern": "xyz", "s": "one two three"}','true','{"pattern": "str", "s": "str"}','{"result": "bool"}',29);
INSERT INTO test_case_testcase VALUES(420,'{"pattern": "ab", "s": "hello hello"}','false','{"pattern": "str", "s": "str"}','{"result": "bool"}',29);
INSERT INTO test_case_testcase VALUES(421,'{"pattern": "a", "s": "single"}','true','{"pattern": "str", "s": "str"}','{"result": "bool"}',29);
INSERT INTO test_case_testcase VALUES(422,'{"pattern": "ab", "s": "dog"}','false','{"pattern": "str", "s": "str"}','{"result": "bool"}',29);
INSERT INTO test_case_testcase VALUES(423,'{"pattern": "abcd", "s": "apple banana cat dog"}','true','{"pattern": "str", "s": "str"}','{"result": "bool"}',29);
INSERT INTO test_case_testcase VALUES(424,'{"pattern": "aabb", "s": "one two one two"}','true','{"pattern": "str", "s": "str"}','{"result": "bool"}',29);
INSERT INTO test_case_testcase VALUES(425,'{"pattern": "ab", "s": "no no"}','false','{"pattern": "str", "s": "str"}','{"result": "bool"}',29);
INSERT INTO test_case_testcase VALUES(426,'{"pattern": "aba", "s": "cat cat dog"}','true','{"pattern": "str", "s": "str"}','{"result": "bool"}',29);
INSERT INTO test_case_testcase VALUES(427,'{"pattern": "abac", "s": "apple banana apple cat"}','true','{"pattern": "str", "s": "str"}','{"result": "bool"}',29);
INSERT INTO test_case_testcase VALUES(428,'{"pattern": "aabbcc", "s": "red red blue blue green green"}','true','{"pattern": "str", "s": "str"}','{"result": "bool"}',29);
INSERT INTO test_case_testcase VALUES(429,'{"ransomNote": "aa", "magazine": "aab"}','true','{"ransomNote": "str", "magazine": "str"}','{"result": "bool"}',30);
INSERT INTO test_case_testcase VALUES(430,'{"ransomNote": "aa", "magazine": "ab"}','false','{"ransomNote": "str", "magazine": "str"}','{"result": "bool"}',30);
INSERT INTO test_case_testcase VALUES(431,'{"ransomNote": "", "magazine": "abcd"}','true','{"ransomNote": "str", "magazine": "str"}','{"result": "bool"}',30);
INSERT INTO test_case_testcase VALUES(432,'{"ransomNote": "abc", "magazine": "aabbcc"}','true','{"ransomNote": "str", "magazine": "str"}','{"result": "bool"}',30);
INSERT INTO test_case_testcase VALUES(433,'{"ransomNote": "abcde", "magazine": "aabbcc"}','false','{"ransomNote": "str", "magazine": "str"}','{"result": "bool"}',30);
INSERT INTO test_case_testcase VALUES(434,'{"ransomNote": "xyz", "magazine": "xyzxyz"}','true','{"ransomNote": "str", "magazine": "str"}','{"result": "bool"}',30);
INSERT INTO test_case_testcase VALUES(435,'{"ransomNote": "hello", "magazine": "holleo"}','true','{"ransomNote": "str", "magazine": "str"}','{"result": "bool"}',30);
INSERT INTO test_case_testcase VALUES(436,'{"ransomNote": "not", "magazine": "note"}','true','{"ransomNote": "str", "magazine": "str"}','{"result": "bool"}',30);
INSERT INTO test_case_testcase VALUES(437,'{"ransomNote": "notebook", "magazine": "booknote"}','true','{"ransomNote": "str", "magazine": "str"}','{"result": "bool"}',30);
INSERT INTO test_case_testcase VALUES(438,'{"ransomNote": "aaa", "magazine": "aaab"}','true','{"ransomNote": "str", "magazine": "str"}','{"result": "bool"}',30);
INSERT INTO test_case_testcase VALUES(439,'{"ransomNote": "abc", "magazine": "xyz"}','false','{"ransomNote": "str", "magazine": "str"}','{"result": "bool"}',30);
INSERT INTO test_case_testcase VALUES(440,'{"ransomNote": "puzzle", "magazine": "puzzl"}','false','{"ransomNote": "str", "magazine": "str"}','{"result": "bool"}',30);
INSERT INTO test_case_testcase VALUES(441,'{"ransomNote": "aabbcc", "magazine": "abcabc"}','true','{"ransomNote": "str", "magazine": "str"}','{"result": "bool"}',30);
INSERT INTO test_case_testcase VALUES(442,'{"ransomNote": "quick", "magazine": "qu"}','false','{"ransomNote": "str", "magazine": "str"}','{"result": "bool"}',30);
INSERT INTO test_case_testcase VALUES(443,'{"ransomNote": "test", "magazine": "settt"}','true','{"ransomNote": "str", "magazine": "str"}','{"result": "bool"}',30);
INSERT INTO test_case_testcase VALUES(444,'{"root": [1, 2, 3, 4, 5, 6]}','6','{"root": "list[Optional[int]]"}','{"result": "int"}',31);
INSERT INTO test_case_testcase VALUES(445,'{"root": [1, 2, 3]}','3','{"root": "list[Optional[int]]"}','{"result": "int"}',31);
INSERT INTO test_case_testcase VALUES(446,'{"root": []}','0','{"root": "list[Optional[int]]"}','{"result": "int"}',31);
INSERT INTO test_case_testcase VALUES(447,'{"root": [1]}','1','{"root": "list[Optional[int]]"}','{"result": "int"}',31);
INSERT INTO test_case_testcase VALUES(448,'{"root": [1, 2]}','2','{"root": "list[Optional[int]]"}','{"result": "int"}',31);
INSERT INTO test_case_testcase VALUES(449,'{"root": [1, 2, 3, 4]}','4','{"root": "list[Optional[int]]"}','{"result": "int"}',31);
INSERT INTO test_case_testcase VALUES(450,'{"root": [1, 2, 3, 4, 5]}','5','{"root": "list[Optional[int]]"}','{"result": "int"}',31);
INSERT INTO test_case_testcase VALUES(451,'{"root": [1, 2, 3, 4, 5, 6, 7]}','7','{"root": "list[Optional[int]]"}','{"result": "int"}',31);
INSERT INTO test_case_testcase VALUES(452,'{"root": [1, 2, 3, 4, 5, 6, null, null, 8]}','6','{"root": "list[Optional[int]]"}','{"result": "int"}',31);
INSERT INTO test_case_testcase VALUES(453,'{"root": [1, 2, 3, null, 5]}','4','{"root": "list[Optional[int]]"}','{"result": "int"}',31);
INSERT INTO test_case_testcase VALUES(454,'{"root": [1, null, 3]}','2','{"root": "list[Optional[int]]"}','{"result": "int"}',31);
INSERT INTO test_case_testcase VALUES(455,'{"root": [1, 2, null, 4]}','3','{"root": "list[Optional[int]]"}','{"result": "int"}',31);
INSERT INTO test_case_testcase VALUES(456,'{"root": [1, 2, 3, 4, 5, null, null, 8]}','6','{"root": "list[Optional[int]]"}','{"result": "int"}',31);
INSERT INTO test_case_testcase VALUES(457,'{"root": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, null, null, 12]}','10','{"root": "list[Optional[int]]"}','{"result": "int"}',31);
INSERT INTO test_case_testcase VALUES(458,'{"root": [1, 2, 3, 4, null, null, 7]}','5','{"root": "list[Optional[int]]"}','{"result": "int"}',31);
INSERT INTO test_case_testcase VALUES(459,'{"nums": [1, 3, 5, 6], "target": 5}','2','{"nums": "list[int]", "target": "int"}','{"result": "int"}',32);
INSERT INTO test_case_testcase VALUES(460,'{"nums": [1, 3, 5, 6], "target": 2}','1','{"nums": "list[int]", "target": "int"}','{"result": "int"}',32);
INSERT INTO test_case_testcase VALUES(461,'{"nums": [1, 3, 5, 6], "target": 7}','4','{"nums": "list[int]", "target": "int"}','{"result": "int"}',32);
INSERT INTO test_case_testcase VALUES(462,'{"nums": [1, 3, 5, 6], "target": 0}','0','{"nums": "list[int]", "target": "int"}','{"result": "int"}',32);
INSERT INTO test_case_testcase VALUES(463,'{"nums": [], "target": 1}','0','{"nums": "list[int]", "target": "int"}','{"result": "int"}',32);
INSERT INTO test_case_testcase VALUES(464,'{"nums": [1], "target": 0}','0','{"nums": "list[int]", "target": "int"}','{"result": "int"}',32);
INSERT INTO test_case_testcase VALUES(465,'{"nums": [1], "target": 1}','0','{"nums": "list[int]", "target": "int"}','{"result": "int"}',32);
INSERT INTO test_case_testcase VALUES(466,'{"nums": [1], "target": 2}','1','{"nums": "list[int]", "target": "int"}','{"result": "int"}',32);
INSERT INTO test_case_testcase VALUES(467,'{"nums": [1, 2, 3, 4, 5], "target": 4}','3','{"nums": "list[int]", "target": "int"}','{"result": "int"}',32);
INSERT INTO test_case_testcase VALUES(468,'{"nums": [1, 3, 5, 6], "target": 3}','1','{"nums": "list[int]", "target": "int"}','{"result": "int"}',32);
INSERT INTO test_case_testcase VALUES(469,'{"nums": [1, 2, 4, 5, 6], "target": 3}','2','{"nums": "list[int]", "target": "int"}','{"result": "int"}',32);
INSERT INTO test_case_testcase VALUES(470,'{"nums": [1, 2, 3, 5], "target": 4}','3','{"nums": "list[int]", "target": "int"}','{"result": "int"}',32);
INSERT INTO test_case_testcase VALUES(471,'{"nums": [1, 3, 5, 7, 9], "target": 8}','4','{"nums": "list[int]", "target": "int"}','{"result": "int"}',32);
INSERT INTO test_case_testcase VALUES(472,'{"nums": [5, 6, 7, 8, 9], "target": 10}','5','{"nums": "list[int]", "target": "int"}','{"result": "int"}',32);
INSERT INTO test_case_testcase VALUES(473,'{"nums": [1, 2, 3], "target": 0}','0','{"nums": "list[int]", "target": "int"}','{"result": "int"}',32);
INSERT INTO test_case_testcase VALUES(474,'{"nums": [1, 2, 3, 1], "k": 3}','true','{"nums": "list[int]", "k": "int"}','{"result": "bool"}',33);
INSERT INTO test_case_testcase VALUES(475,'{"nums": [1, 0, 1, 1], "k": 1}','true','{"nums": "list[int]", "k": "int"}','{"result": "bool"}',33);
INSERT INTO test_case_testcase VALUES(476,'{"nums": [1, 2, 3, 1, 2, 3], "k": 2}','false','{"nums": "list[int]", "k": "int"}','{"result": "bool"}',33);
INSERT INTO test_case_testcase VALUES(477,'{"nums": [1, 2, 3, 4, 1], "k": 4}','true','{"nums": "list[int]", "k": "int"}','{"result": "bool"}',33);
INSERT INTO test_case_testcase VALUES(478,'{"nums": [1, 1, 1, 1], "k": 0}','true','{"nums": "list[int]", "k": "int"}','{"result": "bool"}',33);
INSERT INTO test_case_testcase VALUES(479,'{"nums": [1, 2, 3, 1], "k": 2}','true','{"nums": "list[int]", "k": "int"}','{"result": "bool"}',33);
INSERT INTO test_case_testcase VALUES(480,'{"nums": [0, 1, 2, 3, 4, 5, 6, 0], "k": 7}','true','{"nums": "list[int]", "k": "int"}','{"result": "bool"}',33);
INSERT INTO test_case_testcase VALUES(481,'{"nums": [1, 2, 3, 1, 2, 3], "k": 1}','false','{"nums": "list[int]", "k": "int"}','{"result": "bool"}',33);
INSERT INTO test_case_testcase VALUES(482,'{"nums": [2, 3, 4, 2, 1], "k": 3}','true','{"nums": "list[int]", "k": "int"}','{"result": "bool"}',33);
INSERT INTO test_case_testcase VALUES(483,'{"nums": [3, 5, 3, 2, 1, 3], "k": 2}','true','{"nums": "list[int]", "k": "int"}','{"result": "bool"}',33);
INSERT INTO test_case_testcase VALUES(484,'{"nums": [1, 2, 3, 1], "k": 1}','true','{"nums": "list[int]", "k": "int"}','{"result": "bool"}',33);
INSERT INTO test_case_testcase VALUES(485,'{"nums": [1, 3, 5, 7, 9], "k": 2}','false','{"nums": "list[int]", "k": "int"}','{"result": "bool"}',33);
INSERT INTO test_case_testcase VALUES(486,'{"nums": [2, 2, 3, 4, 5, 6], "k": 3}','true','{"nums": "list[int]", "k": "int"}','{"result": "bool"}',33);
INSERT INTO test_case_testcase VALUES(487,'{"nums": [5, 5, 5, 5, 5], "k": 1}','true','{"nums": "list[int]", "k": "int"}','{"result": "bool"}',33);
INSERT INTO test_case_testcase VALUES(488,'{"nums": [1, 2, 3, 4, 5, 6], "k": 5}','false','{"nums": "list[int]", "k": "int"}','{"result": "bool"}',33);
INSERT INTO test_case_testcase VALUES(489,'{"s": "the sky is blue"}','"blue is sky the"','{"s": "str"}','{"result": "str"}',34);
INSERT INTO test_case_testcase VALUES(490,'{"s": "   hello world   "}','"world hello"','{"s": "str"}','{"result": "str"}',34);
INSERT INTO test_case_testcase VALUES(491,'{"s": "a good   example"}','"example good a"','{"s": "str"}','{"result": "str"}',34);
INSERT INTO test_case_testcase VALUES(492,'{"s": "  Bob    Loves  Alice   "}','"Alice Loves Bob"','{"s": "str"}','{"result": "str"}',34);
INSERT INTO test_case_testcase VALUES(493,'{"s": "Alice does not even like bob"}','"bob like even not does Alice"','{"s": "str"}','{"result": "str"}',34);
INSERT INTO test_case_testcase VALUES(494,'{"s": "  "}','""','{"s": "str"}','{"result": "str"}',34);
INSERT INTO test_case_testcase VALUES(495,'{"s": "One"}','"One"','{"s": "str"}','{"result": "str"}',34);
INSERT INTO test_case_testcase VALUES(496,'{"s": "  multiple    spaces  "}','"spaces multiple"','{"s": "str"}','{"result": "str"}',34);
INSERT INTO test_case_testcase VALUES(497,'{"s": "this is a test"}','"test a is this"','{"s": "str"}','{"result": "str"}',34);
INSERT INTO test_case_testcase VALUES(498,'{"s": "  Leading and trailing  spaces  "}','"spaces trailing and Leading"','{"s": "str"}','{"result": "str"}',34);
INSERT INTO test_case_testcase VALUES(499,'{"s": "   "}','""','{"s": "str"}','{"result": "str"}',34);
INSERT INTO test_case_testcase VALUES(500,'{"s": "Hello"}','"Hello"','{"s": "str"}','{"result": "str"}',34);
INSERT INTO test_case_testcase VALUES(501,'{"s": "String with     multiple spaces"}','"spaces multiple with String"','{"s": "str"}','{"result": "str"}',34);
INSERT INTO test_case_testcase VALUES(502,'{"s": "Last test   case  "}','"case test Last"','{"s": "str"}','{"result": "str"}',34);
INSERT INTO test_case_testcase VALUES(503,'{"s": "SingleWord"}','"SingleWord"','{"s": "str"}','{"result": "str"}',34);
INSERT INTO test_case_testcase VALUES(504,'{"s": " spaces before"}','"before spaces"','{"s": "str"}','{"result": "str"}',34);
INSERT INTO test_case_testcase VALUES(505,'{"nums": [1, 1, 2]}','2','{"nums": "list[int]"}','{"result": "int"}',35);
INSERT INTO test_case_testcase VALUES(506,'{"nums": [0, 0, 1, 1, 1, 2, 2, 3, 4]}','5','{"nums": "list[int]"}','{"result": "int"}',35);
INSERT INTO test_case_testcase VALUES(507,'{"nums": [1, 1, 1, 1]}','1','{"nums": "list[int]"}','{"result": "int"}',35);
INSERT INTO test_case_testcase VALUES(508,'{"nums": [2, 2, 3, 4, 5]}','4','{"nums": "list[int]"}','{"result": "int"}',35);
INSERT INTO test_case_testcase VALUES(509,'{"nums": [1, 2, 3, 4, 5, 5, 5]}','5','{"nums": "list[int]"}','{"result": "int"}',35);
INSERT INTO test_case_testcase VALUES(510,'{"nums": []}','0','{"nums": "list[int]"}','{"result": "int"}',35);
INSERT INTO test_case_testcase VALUES(511,'{"nums": [1]}','1','{"nums": "list[int]"}','{"result": "int"}',35);
INSERT INTO test_case_testcase VALUES(512,'{"nums": [1, 2, 2]}','2','{"nums": "list[int]"}','{"result": "int"}',35);
INSERT INTO test_case_testcase VALUES(513,'{"nums": [0, 1, 2, 3, 4, 4]}','5','{"nums": "list[int]"}','{"result": "int"}',35);
INSERT INTO test_case_testcase VALUES(514,'{"nums": [3, 3, 3]}','1','{"nums": "list[int]"}','{"result": "int"}',35);
INSERT INTO test_case_testcase VALUES(515,'{"nums": [1, 2, 2, 3, 4, 4, 5]}','5','{"nums": "list[int]"}','{"result": "int"}',35);
INSERT INTO test_case_testcase VALUES(516,'{"nums": [5, 5, 6, 6, 7, 8, 8, 9]}','5','{"nums": "list[int]"}','{"result": "int"}',35);
INSERT INTO test_case_testcase VALUES(517,'{"nums": [1, 1, 1, 1, 1]}','1','{"nums": "list[int]"}','{"result": "int"}',35);
INSERT INTO test_case_testcase VALUES(518,'{"nums": [4, 4, 4, 5, 6, 6]}','4','{"nums": "list[int]"}','{"result": "int"}',35);
INSERT INTO test_case_testcase VALUES(519,'{"nums": [10, 10, 10, 20, 20, 30]}','3','{"nums": "list[int]"}','{"result": "int"}',35);
INSERT INTO test_case_testcase VALUES(520,'{"nums": [3, 2, 2, 3], "val": 3}','2','{"nums": "list[int]", "val": "int"}','{"result": "int"}',36);
INSERT INTO test_case_testcase VALUES(521,'{"nums": [0, 1, 2, 2, 3, 0, 4, 2], "val": 2}','5','{"nums": "list[int]", "val": "int"}','{"result": "int"}',36);
INSERT INTO test_case_testcase VALUES(522,'{"nums": [1, 2, 3, 4, 5], "val": 6}','5','{"nums": "list[int]", "val": "int"}','{"result": "int"}',36);
INSERT INTO test_case_testcase VALUES(523,'{"nums": [], "val": 1}','0','{"nums": "list[int]", "val": "int"}','{"result": "int"}',36);
INSERT INTO test_case_testcase VALUES(524,'{"nums": [1, 1, 1, 1], "val": 1}','0','{"nums": "list[int]", "val": "int"}','{"result": "int"}',36);
INSERT INTO test_case_testcase VALUES(525,'{"nums": [2, 2, 2, 3, 3, 4], "val": 2}','4','{"nums": "list[int]", "val": "int"}','{"result": "int"}',36);
INSERT INTO test_case_testcase VALUES(526,'{"nums": [4, 5, 6, 7], "val": 5}','3','{"nums": "list[int]", "val": "int"}','{"result": "int"}',36);
INSERT INTO test_case_testcase VALUES(527,'{"nums": [1, 2, 2, 3], "val": 2}','2','{"nums": "list[int]", "val": "int"}','{"result": "int"}',36);
INSERT INTO test_case_testcase VALUES(528,'{"nums": [1, 3, 5, 7, 8], "val": 1}','4','{"nums": "list[int]", "val": "int"}','{"result": "int"}',36);
INSERT INTO test_case_testcase VALUES(529,'{"nums": [3, 1, 2, 3, 4], "val": 3}','3','{"nums": "list[int]", "val": "int"}','{"result": "int"}',36);
INSERT INTO test_case_testcase VALUES(530,'{"nums": [5, 6, 7, 8, 9], "val": 10}','5','{"nums": "list[int]", "val": "int"}','{"result": "int"}',36);
INSERT INTO test_case_testcase VALUES(531,'{"nums": [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], "val": 5}','9','{"nums": "list[int]", "val": "int"}','{"result": "int"}',36);
INSERT INTO test_case_testcase VALUES(532,'{"nums": [1, 2, 3, 4, 5], "val": 2}','4','{"nums": "list[int]", "val": "int"}','{"result": "int"}',36);
INSERT INTO test_case_testcase VALUES(533,'{"nums": [2, 2, 3, 4, 5], "val": 4}','4','{"nums": "list[int]", "val": "int"}','{"result": "int"}',36);
INSERT INTO test_case_testcase VALUES(534,'{"nums": [1, 1, 2, 3, 4], "val": 1}','3','{"nums": "list[int]", "val": "int"}','{"result": "int"}',36);
INSERT INTO test_case_testcase VALUES(535,'{"s": "abbaca"}','"ca"','{"s": "str"}','{"result": "str"}',37);
INSERT INTO test_case_testcase VALUES(536,'{"s": "azxxzy"}','"a"','{"s": "str"}','{"result": "str"}',37);
INSERT INTO test_case_testcase VALUES(537,'{"s": "abb"}','"a"','{"s": "str"}','{"result": "str"}',37);
INSERT INTO test_case_testcase VALUES(538,'{"s": "aabbcc"}','""','{"s": "str"}','{"result": "str"}',37);
INSERT INTO test_case_testcase VALUES(539,'{"s": "a"}','"a"','{"s": "str"}','{"result": "str"}',37);
INSERT INTO test_case_testcase VALUES(540,'{"s": "abcd"}','"abcd"','{"s": "str"}','{"result": "str"}',37);
INSERT INTO test_case_testcase VALUES(541,'{"s": "aaaabbbb"}','""','{"s": "str"}','{"result": "str"}',37);
INSERT INTO test_case_testcase VALUES(542,'{"s": "aaabac"}','"c"','{"s": "str"}','{"result": "str"}',37);
INSERT INTO test_case_testcase VALUES(543,'{"s": "baab"}','""','{"s": "str"}','{"result": "str"}',37);
INSERT INTO test_case_testcase VALUES(544,'{"s": "abcddcba"}','"ab"','{"s": "str"}','{"result": "str"}',37);
INSERT INTO test_case_testcase VALUES(545,'{"s": "cc"}','""','{"s": "str"}','{"result": "str"}',37);
INSERT INTO test_case_testcase VALUES(546,'{"s": "pqqppqp"}','"p"','{"s": "str"}','{"result": "str"}',37);
INSERT INTO test_case_testcase VALUES(547,'{"s": "abcdeedcba"}','"abcde"','{"s": "str"}','{"result": "str"}',37);
INSERT INTO test_case_testcase VALUES(548,'{"s": "xyzzzyx"}','"xyx"','{"s": "str"}','{"result": "str"}',37);
INSERT INTO test_case_testcase VALUES(549,'{"s": "racecar"}','"racecar"','{"s": "str"}','{"result": "str"}',37);
INSERT INTO test_case_testcase VALUES(550,'{"s": "kllkk"}','""','{"s": "str"}','{"result": "str"}',37);
INSERT INTO test_case_testcase VALUES(551,'{"p": [1, 2, 3], "q": [1, 2, 3]}','true','{"p": "list[Optional[int]]", "q": "list[Optional[int]]"}','{"result": "bool"}',38);
INSERT INTO test_case_testcase VALUES(552,'{"p": [1, 2], "q": [1, null, 2]}','false','{"p": "list[Optional[int]]", "q": "list[Optional[int]]"}','{"result": "bool"}',38);
INSERT INTO test_case_testcase VALUES(553,'{"p": [1, 2, 1], "q": [1, 1, 2]}','false','{"p": "list[Optional[int]]", "q": "list[Optional[int]]"}','{"result": "bool"}',38);
INSERT INTO test_case_testcase VALUES(554,'{"p": [], "q": []}','true','{"p": "list[Optional[int]]", "q": "list[Optional[int]]"}','{"result": "bool"}',38);
INSERT INTO test_case_testcase VALUES(555,'{"p": [1], "q": [1]}','true','{"p": "list[Optional[int]]", "q": "list[Optional[int]]"}','{"result": "bool"}',38);
INSERT INTO test_case_testcase VALUES(556,'{"p": [1, 2, 3], "q": [1, 2, 4]}','false','{"p": "list[Optional[int]]", "q": "list[Optional[int]]"}','{"result": "bool"}',38);
INSERT INTO test_case_testcase VALUES(557,'{"p": [1, 2, null], "q": [1, null, 2]}','false','{"p": "list[Optional[int]]", "q": "list[Optional[int]]"}','{"result": "bool"}',38);
INSERT INTO test_case_testcase VALUES(558,'{"p": [2, 3, 4], "q": [2, 3, 4]}','true','{"p": "list[Optional[int]]", "q": "list[Optional[int]]"}','{"result": "bool"}',38);
INSERT INTO test_case_testcase VALUES(559,'{"p": [1, 2, 3], "q": [1, 2]}','false','{"p": "list[Optional[int]]", "q": "list[Optional[int]]"}','{"result": "bool"}',38);
INSERT INTO test_case_testcase VALUES(560,'{"p": [1, null, 2], "q": [1, null, 2]}','true','{"p": "list[Optional[int]]", "q": "list[Optional[int]]"}','{"result": "bool"}',38);
INSERT INTO test_case_testcase VALUES(561,'{"p": [3, 5, 7], "q": [3, 5, 6]}','false','{"p": "list[Optional[int]]", "q": "list[Optional[int]]"}','{"result": "bool"}',38);
INSERT INTO test_case_testcase VALUES(562,'{"p": [1, 2, 3, 4], "q": [1, 2, 3]}','false','{"p": "list[Optional[int]]", "q": "list[Optional[int]]"}','{"result": "bool"}',38);
INSERT INTO test_case_testcase VALUES(563,'{"p": [1, 2, 3], "q": [1, 3, 2]}','false','{"p": "list[Optional[int]]", "q": "list[Optional[int]]"}','{"result": "bool"}',38);
INSERT INTO test_case_testcase VALUES(564,'{"p": [1, 2, 3], "q": [1, 2, null]}','false','{"p": "list[Optional[int]]", "q": "list[Optional[int]]"}','{"result": "bool"}',38);
INSERT INTO test_case_testcase VALUES(565,'{"p": [4, 2, 6], "q": [4, 2, 6]}','true','{"p": "list[Optional[int]]", "q": "list[Optional[int]]"}','{"result": "bool"}',38);
INSERT INTO test_case_testcase VALUES(566,'{"grid": [[4, 3, 2, 1], [3, 2, 1, -1], [2, 1, -1, -2], [1, -1, -2, -3]]}','8','{"grid": "list[list[int]]"}','{"result": "int"}',39);
INSERT INTO test_case_testcase VALUES(567,'{"grid": [[5, 1, 0], [4, 0, -1], [-1, -2, -3]]}','5','{"grid": "list[list[int]]"}','{"result": "int"}',39);
INSERT INTO test_case_testcase VALUES(568,'{"grid": [[1, 2], [3, 4]]}','0','{"grid": "list[list[int]]"}','{"result": "int"}',39);
INSERT INTO test_case_testcase VALUES(569,'{"grid": [[-1]]}','1','{"grid": "list[list[int]]"}','{"result": "int"}',39);
INSERT INTO test_case_testcase VALUES(570,'{"grid": [[-5, -4], [-3, -2], [-1, 0]]}','6','{"grid": "list[list[int]]"}','{"result": "int"}',39);
INSERT INTO test_case_testcase VALUES(571,'{"grid": [[10, 8, 6], [5, 3, 1], [-1, -2, -3]]}','6','{"grid": "list[list[int]]"}','{"result": "int"}',39);
INSERT INTO test_case_testcase VALUES(572,'{"grid": [[0, 0], [0, 0]]}','0','{"grid": "list[list[int]]"}','{"result": "int"}',39);
INSERT INTO test_case_testcase VALUES(573,'{"grid": [[1, -1, -2], [0, -3, -4], [5, -6, -7]]}','5','{"grid": "list[list[int]]"}','{"result": "int"}',39);
INSERT INTO test_case_testcase VALUES(574,'{"grid": [[-1, -2, -3], [-4, -5, -6], [-7, -8, -9]]}','9','{"grid": "list[list[int]]"}','{"result": "int"}',39);
INSERT INTO test_case_testcase VALUES(575,'{"grid": [[1, 2, 3], [4, 5, 6], [7, 8, 9]]}','0','{"grid": "list[list[int]]"}','{"result": "int"}',39);
INSERT INTO test_case_testcase VALUES(576,'{"grid": [[-2, -1], [0, 1], [2, 3]]}','2','{"grid": "list[list[int]]"}','{"result": "int"}',39);
INSERT INTO test_case_testcase VALUES(577,'{"grid": [[-1, -1, -1], [-1, -1, -1], [-1, -1, -1]]}','9','{"grid": "list[list[int]]"}','{"result": "int"}',39);
INSERT INTO test_case_testcase VALUES(578,'{"grid": [[4, 3, 2], [1, 0, -1], [-2, -3, -4]]}','5','{"grid": "list[list[int]]"}','{"result": "int"}',39);
INSERT INTO test_case_testcase VALUES(579,'{"grid": [[1, 2, 3, 4], [5, 6, 7, 8]]}','0','{"grid": "list[list[int]]"}','{"result": "int"}',39);
INSERT INTO test_case_testcase VALUES(580,'{"grid": [[3, 2, 1], [2, 1, 0], [1, 0, -1]]}','4','{"grid": "list[list[int]]"}','{"result": "int"}',39);
INSERT INTO test_case_testcase VALUES(581,'{"prices": [7, 1, 5, 3, 6, 4]}','7','{"prices": "list[int]"}','{"result": "int"}',40);
INSERT INTO test_case_testcase VALUES(582,'{"prices": [1, 2, 3, 4, 5]}','4','{"prices": "list[int]"}','{"result": "int"}',40);
INSERT INTO test_case_testcase VALUES(583,'{"prices": [7, 6, 4, 3, 1]}','0','{"prices": "list[int]"}','{"result": "int"}',40);
INSERT INTO test_case_testcase VALUES(584,'{"prices": [1, 2, 3, 0, 2]}','3','{"prices": "list[int]"}','{"result": "int"}',40);
INSERT INTO test_case_testcase VALUES(585,'{"prices": []}','0','{"prices": "list[int]"}','{"result": "int"}',40);
INSERT INTO test_case_testcase VALUES(586,'{"prices": [3, 2, 6, 5, 0, 3]}','7','{"prices": "list[int]"}','{"result": "int"}',40);
INSERT INTO test_case_testcase VALUES(587,'{"prices": [1, 4, 2, 6, 3, 5]}','7','{"prices": "list[int]"}','{"result": "int"}',40);
INSERT INTO test_case_testcase VALUES(588,'{"prices": [1, 2, 3, 4, 2, 5]}','6','{"prices": "list[int]"}','{"result": "int"}',40);
INSERT INTO test_case_testcase VALUES(589,'{"prices": [2, 1, 4, 3, 5]}','4','{"prices": "list[int]"}','{"result": "int"}',40);
INSERT INTO test_case_testcase VALUES(590,'{"prices": [5, 1, 2, 3, 4]}','6','{"prices": "list[int]"}','{"result": "int"}',40);
INSERT INTO test_case_testcase VALUES(591,'{"prices": [1, 3, 5, 4, 2]}','4','{"prices": "list[int]"}','{"result": "int"}',40);
INSERT INTO test_case_testcase VALUES(592,'{"prices": [2, 1, 2, 1, 2]}','2','{"prices": "list[int]"}','{"result": "int"}',40);
INSERT INTO test_case_testcase VALUES(593,'{"prices": [3, 2, 3, 5, 0, 0, 3, 1, 4]}','6','{"prices": "list[int]"}','{"result": "int"}',40);
INSERT INTO test_case_testcase VALUES(594,'{"prices": [1, 2, 1, 2, 1, 2, 1]}','3','{"prices": "list[int]"}','{"result": "int"}',40);
INSERT INTO test_case_testcase VALUES(595,'{"prices": [1, 3, 2, 8, 4, 9]}','8','{"prices": "list[int]"}','{"result": "int"}',40);
INSERT INTO test_case_testcase VALUES(596,'{"num": 38}','2','{"num": "int"}','{"result": "int"}',41);
INSERT INTO test_case_testcase VALUES(597,'{"num": 0}','0','{"num": "int"}','{"result": "int"}',41);
INSERT INTO test_case_testcase VALUES(598,'{"num": 9}','9','{"num": "int"}','{"result": "int"}',41);
INSERT INTO test_case_testcase VALUES(599,'{"num": 12345}','6','{"num": "int"}','{"result": "int"}',41);
INSERT INTO test_case_testcase VALUES(600,'{"num": 99999}','9','{"num": "int"}','{"result": "int"}',41);
INSERT INTO test_case_testcase VALUES(601,'{"num": 10000}','1','{"num": "int"}','{"result": "int"}',41);
INSERT INTO test_case_testcase VALUES(602,'{"num": 4567}','4','{"num": "int"}','{"result": "int"}',41);
INSERT INTO test_case_testcase VALUES(603,'{"num": 987654321}','9','{"num": "int"}','{"result": "int"}',41);
INSERT INTO test_case_testcase VALUES(604,'{"num": 2999}','2','{"num": "int"}','{"result": "int"}',41);
INSERT INTO test_case_testcase VALUES(605,'{"num": 234567}','27','{"num": "int"}','{"result": "int"}',41);
INSERT INTO test_case_testcase VALUES(606,'{"num": 1234567890}','46','{"num": "int"}','{"result": "int"}',41);
INSERT INTO test_case_testcase VALUES(607,'{"num": 10}','1','{"num": "int"}','{"result": "int"}',41);
INSERT INTO test_case_testcase VALUES(608,'{"num": 1000000007}','8','{"num": "int"}','{"result": "int"}',41);
INSERT INTO test_case_testcase VALUES(609,'{"num": 2018}','2','{"num": "int"}','{"result": "int"}',41);
INSERT INTO test_case_testcase VALUES(610,'{"num": 5678}','8','{"num": "int"}','{"result": "int"}',41);
INSERT INTO test_case_testcase VALUES(611,'{"num": 30}','14','{"num": "int"}','{"result": "int"}',42);
INSERT INTO test_case_testcase VALUES(612,'{"num": 1}','0','{"num": "int"}','{"result": "int"}',42);
INSERT INTO test_case_testcase VALUES(613,'{"num": 2}','1','{"num": "int"}','{"result": "int"}',42);
INSERT INTO test_case_testcase VALUES(614,'{"num": 10}','5','{"num": "int"}','{"result": "int"}',42);
INSERT INTO test_case_testcase VALUES(615,'{"num": 100}','50','{"num": "int"}','{"result": "int"}',42);
INSERT INTO test_case_testcase VALUES(616,'{"num": 1000}','500','{"num": "int"}','{"result": "int"}',42);
INSERT INTO test_case_testcase VALUES(617,'{"num": 123456}','317','{"num": "int"}','{"result": "int"}',42);
INSERT INTO test_case_testcase VALUES(618,'{"num": 50}','25','{"num": "int"}','{"result": "int"}',42);
INSERT INTO test_case_testcase VALUES(619,'{"num": 10000}','5000','{"num": "int"}','{"result": "int"}',42);
INSERT INTO test_case_testcase VALUES(620,'{"num": 20000}','10000','{"num": "int"}','{"result": "int"}',42);
INSERT INTO test_case_testcase VALUES(621,'{"num": 25}','12','{"num": "int"}','{"result": "int"}',42);
INSERT INTO test_case_testcase VALUES(622,'{"num": 15}','8','{"num": "int"}','{"result": "int"}',42);
INSERT INTO test_case_testcase VALUES(623,'{"num": 9999}','5000','{"num": "int"}','{"result": "int"}',42);
INSERT INTO test_case_testcase VALUES(624,'{"num": 99999}','50000','{"num": "int"}','{"result": "int"}',42);
INSERT INTO test_case_testcase VALUES(625,'{"num": 12345678}','31724','{"num": "int"}','{"result": "int"}',42);
INSERT INTO test_case_testcase VALUES(626,'{"num": 55}','28','{"num": "int"}','{"result": "int"}',42);
INSERT INTO test_case_testcase VALUES(627,'{"nums": [1, 2, 3, 4, 5], "target": 3}','2','{"nums": "list[int]", "target": "int"}','{"result": "int"}',43);
INSERT INTO test_case_testcase VALUES(628,'{"nums": [1, 2, 3, 4, 5], "target": 6}','-1','{"nums": "list[int]", "target": "int"}','{"result": "int"}',43);
INSERT INTO test_case_testcase VALUES(629,'{"nums": [5, 6, 7, 8, 9], "target": 5}','0','{"nums": "list[int]", "target": "int"}','{"result": "int"}',43);
INSERT INTO test_case_testcase VALUES(630,'{"nums": [1, 3, 5, 7, 9, 11], "target": 11}','5','{"nums": "list[int]", "target": "int"}','{"result": "int"}',43);
INSERT INTO test_case_testcase VALUES(631,'{"nums": [], "target": 3}','-1','{"nums": "list[int]", "target": "int"}','{"result": "int"}',43);
INSERT INTO test_case_testcase VALUES(632,'{"nums": [2, 4, 6, 8, 10], "target": 6}','2','{"nums": "list[int]", "target": "int"}','{"result": "int"}',43);
INSERT INTO test_case_testcase VALUES(633,'{"nums": [1, 2, 2, 2, 3], "target": 2}','1','{"nums": "list[int]", "target": "int"}','{"result": "int"}',43);
INSERT INTO test_case_testcase VALUES(634,'{"nums": [1, 2, 3, 4, 5, 6, 7, 8], "target": 4}','3','{"nums": "list[int]", "target": "int"}','{"result": "int"}',43);
INSERT INTO test_case_testcase VALUES(635,'{"nums": [100, 200, 300, 400, 500], "target": 200}','1','{"nums": "list[int]", "target": "int"}','{"result": "int"}',43);
INSERT INTO test_case_testcase VALUES(636,'{"nums": [1, 1, 1, 1], "target": 1}','0','{"nums": "list[int]", "target": "int"}','{"result": "int"}',43);
INSERT INTO test_case_testcase VALUES(637,'{"nums": [5, 7, 8, 9, 10], "target": 6}','-1','{"nums": "list[int]", "target": "int"}','{"result": "int"}',43);
INSERT INTO test_case_testcase VALUES(638,'{"nums": [3, 5, 8, 12, 14], "target": 10}','-1','{"nums": "list[int]", "target": "int"}','{"result": "int"}',43);
INSERT INTO test_case_testcase VALUES(639,'{"nums": [1, 3, 5, 7, 9, 10, 11], "target": 11}','6','{"nums": "list[int]", "target": "int"}','{"result": "int"}',43);
INSERT INTO test_case_testcase VALUES(640,'{"nums": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], "target": 0}','-1','{"nums": "list[int]", "target": "int"}','{"result": "int"}',43);
INSERT INTO test_case_testcase VALUES(641,'{"nums": [5, 6, 8, 10, 12], "target": 9}','-1','{"nums": "list[int]", "target": "int"}','{"result": "int"}',43);
INSERT INTO test_case_testcase VALUES(642,'{"root": [3, 4, 5, 1, 2], "subRoot": [4, 1, 2]}','true','{"root": "list[int]", "subRoot": "list[int]"}','{"result": "bool"}',44);
INSERT INTO test_case_testcase VALUES(643,'{"root": [3, 4, 5, 1, 2], "subRoot": [4, 1, 3]}','false','{"root": "list[int]", "subRoot": "list[int]"}','{"result": "bool"}',44);
INSERT INTO test_case_testcase VALUES(644,'{"root": [1, 1], "subRoot": [1]}','true','{"root": "list[int]", "subRoot": "list[int]"}','{"result": "bool"}',44);
INSERT INTO test_case_testcase VALUES(645,'{"root": [1, 2, 3], "subRoot": [2]}','true','{"root": "list[int]", "subRoot": "list[int]"}','{"result": "bool"}',44);
INSERT INTO test_case_testcase VALUES(646,'{"root": [1, 2, 3], "subRoot": [4]}','false','{"root": "list[int]", "subRoot": "list[int]"}','{"result": "bool"}',44);
INSERT INTO test_case_testcase VALUES(647,'{"root": [1, 2, 3, 4], "subRoot": [4]}','false','{"root": "list[int]", "subRoot": "list[int]"}','{"result": "bool"}',44);
INSERT INTO test_case_testcase VALUES(648,'{"root": [5, 4, 3, 2, 1], "subRoot": [4, 3, 2]}','true','{"root": "list[int]", "subRoot": "list[int]"}','{"result": "bool"}',44);
INSERT INTO test_case_testcase VALUES(649,'{"root": [1], "subRoot": [2]}','false','{"root": "list[int]", "subRoot": "list[int]"}','{"result": "bool"}',44);
INSERT INTO test_case_testcase VALUES(650,'{"root": [], "subRoot": []}','true','{"root": "list[int]", "subRoot": "list[int]"}','{"result": "bool"}',44);
INSERT INTO test_case_testcase VALUES(651,'{"root": [], "subRoot": [1]}','false','{"root": "list[int]", "subRoot": "list[int]"}','{"result": "bool"}',44);
INSERT INTO test_case_testcase VALUES(652,'{"root": [3, 4, 5, 1, 2], "subRoot": [4, 1, 2, 0]}','false','{"root": "list[int]", "subRoot": "list[int]"}','{"result": "bool"}',44);
INSERT INTO test_case_testcase VALUES(653,'{"root": [2, 1], "subRoot": [1]}','true','{"root": "list[int]", "subRoot": "list[int]"}','{"result": "bool"}',44);
INSERT INTO test_case_testcase VALUES(654,'{"root": [1, 1, 1], "subRoot": [1]}','true','{"root": "list[int]", "subRoot": "list[int]"}','{"result": "bool"}',44);
INSERT INTO test_case_testcase VALUES(655,'{"root": [1, 2, 3, 4, 5], "subRoot": [2, 4]}','true','{"root": "list[int]", "subRoot": "list[int]"}','{"result": "bool"}',44);
INSERT INTO test_case_testcase VALUES(656,'{"root": [10, 5, 15, 3, 7, null, 20], "subRoot": [5, 3, 7]}','true','{"root": "list[int]", "subRoot": "list[int]"}','{"result": "bool"}',44);
INSERT INTO test_case_testcase VALUES(657,'{"stones": [2, 7, 4, 1, 8, 1]}','1','{"stones": "list[int]"}','{"result": "int"}',45);
INSERT INTO test_case_testcase VALUES(658,'{"stones": [1, 3]}','2','{"stones": "list[int]"}','{"result": "int"}',45);
INSERT INTO test_case_testcase VALUES(659,'{"stones": [1, 1, 1, 1]}','0','{"stones": "list[int]"}','{"result": "int"}',45);
INSERT INTO test_case_testcase VALUES(660,'{"stones": [10, 4, 2, 10]}','4','{"stones": "list[int]"}','{"result": "int"}',45);
INSERT INTO test_case_testcase VALUES(661,'{"stones": []}','0','{"stones": "list[int]"}','{"result": "int"}',45);
INSERT INTO test_case_testcase VALUES(662,'{"stones": [2, 2]}','0','{"stones": "list[int]"}','{"result": "int"}',45);
INSERT INTO test_case_testcase VALUES(663,'{"stones": [8, 8, 8, 8]}','0','{"stones": "list[int]"}','{"result": "int"}',45);
INSERT INTO test_case_testcase VALUES(664,'{"stones": [7, 2, 4, 1, 8, 1, 5]}','1','{"stones": "list[int]"}','{"result": "int"}',45);
INSERT INTO test_case_testcase VALUES(665,'{"stones": [5, 5, 5, 2, 2]}','1','{"stones": "list[int]"}','{"result": "int"}',45);
INSERT INTO test_case_testcase VALUES(666,'{"stones": [3, 7, 2]}','2','{"stones": "list[int]"}','{"result": "int"}',45);
INSERT INTO test_case_testcase VALUES(667,'{"stones": [8, 10, 6, 1, 3]}','2','{"stones": "list[int]"}','{"result": "int"}',45);
INSERT INTO test_case_testcase VALUES(668,'{"stones": [2, 2, 3, 3, 4]}','0','{"stones": "list[int]"}','{"result": "int"}',45);
INSERT INTO test_case_testcase VALUES(669,'{"stones": [7, 3, 1, 8, 6]}','1','{"stones": "list[int]"}','{"result": "int"}',45);
INSERT INTO test_case_testcase VALUES(670,'{"stones": [5, 9, 7, 1]}','1','{"stones": "list[int]"}','{"result": "int"}',45);
INSERT INTO test_case_testcase VALUES(671,'{"stones": [9, 7, 3, 5]}','1','{"stones": "list[int]"}','{"result": "int"}',45);
INSERT INTO test_case_testcase VALUES(672,'{"n": 2}','2','{"n": "int"}','{"result": "int"}',46);
INSERT INTO test_case_testcase VALUES(673,'{"n": 3}','3','{"n": "int"}','{"result": "int"}',46);
INSERT INTO test_case_testcase VALUES(674,'{"n": 4}','5','{"n": "int"}','{"result": "int"}',46);
INSERT INTO test_case_testcase VALUES(675,'{"n": 5}','8','{"n": "int"}','{"result": "int"}',46);
INSERT INTO test_case_testcase VALUES(676,'{"n": 6}','13','{"n": "int"}','{"result": "int"}',46);
INSERT INTO test_case_testcase VALUES(677,'{"n": 7}','21','{"n": "int"}','{"result": "int"}',46);
INSERT INTO test_case_testcase VALUES(678,'{"n": 8}','34','{"n": "int"}','{"result": "int"}',46);
INSERT INTO test_case_testcase VALUES(679,'{"n": 9}','55','{"n": "int"}','{"result": "int"}',46);
INSERT INTO test_case_testcase VALUES(680,'{"n": 10}','89','{"n": "int"}','{"result": "int"}',46);
INSERT INTO test_case_testcase VALUES(681,'{"n": 11}','144','{"n": "int"}','{"result": "int"}',46);
INSERT INTO test_case_testcase VALUES(682,'{"n": 12}','233','{"n": "int"}','{"result": "int"}',46);
INSERT INTO test_case_testcase VALUES(683,'{"n": 13}','377','{"n": "int"}','{"result": "int"}',46);
INSERT INTO test_case_testcase VALUES(684,'{"n": 14}','610','{"n": "int"}','{"result": "int"}',46);
INSERT INTO test_case_testcase VALUES(685,'{"n": 15}','987','{"n": "int"}','{"result": "int"}',46);
INSERT INTO test_case_testcase VALUES(686,'{"n": 20}','10946','{"n": "int"}','{"result": "int"}',46);
INSERT INTO test_case_testcase VALUES(687,'{"n": 19}','true','{"n": "int"}','{"result": "bool"}',47);
INSERT INTO test_case_testcase VALUES(688,'{"n": 1}','true','{"n": "int"}','{"result": "bool"}',47);
INSERT INTO test_case_testcase VALUES(689,'{"n": 7}','true','{"n": "int"}','{"result": "bool"}',47);
INSERT INTO test_case_testcase VALUES(690,'{"n": 2}','false','{"n": "int"}','{"result": "bool"}',47);
INSERT INTO test_case_testcase VALUES(691,'{"n": 4}','false','{"n": "int"}','{"result": "bool"}',47);
INSERT INTO test_case_testcase VALUES(692,'{"n": 16}','false','{"n": "int"}','{"result": "bool"}',47);
INSERT INTO test_case_testcase VALUES(693,'{"n": 20}','false','{"n": "int"}','{"result": "bool"}',47);
INSERT INTO test_case_testcase VALUES(694,'{"n": 28}','true','{"n": "int"}','{"result": "bool"}',47);
INSERT INTO test_case_testcase VALUES(695,'{"n": 44}','false','{"n": "int"}','{"result": "bool"}',47);
INSERT INTO test_case_testcase VALUES(696,'{"n": 68}','true','{"n": "int"}','{"result": "bool"}',47);
INSERT INTO test_case_testcase VALUES(697,'{"n": 82}','true','{"n": "int"}','{"result": "bool"}',47);
INSERT INTO test_case_testcase VALUES(698,'{"n": 89}','false','{"n": "int"}','{"result": "bool"}',47);
INSERT INTO test_case_testcase VALUES(699,'{"n": 111}','false','{"n": "int"}','{"result": "bool"}',47);
INSERT INTO test_case_testcase VALUES(700,'{"n": 100}','true','{"n": "int"}','{"result": "bool"}',47);
INSERT INTO test_case_testcase VALUES(701,'{"n": 58}','true','{"n": "int"}','{"result": "bool"}',47);
INSERT INTO test_case_testcase VALUES(702,'{"l1": [2, 4, 3], "l2": [5, 6, 4]}','[7, 0, 8]','{"l1": "list[int]", "l2": "list[int]"}','{"result": "list[int]"}',48);
INSERT INTO test_case_testcase VALUES(703,'{"l1": [0], "l2": [0]}','[0]','{"l1": "list[int]", "l2": "list[int]"}','{"result": "list[int]"}',48);
INSERT INTO test_case_testcase VALUES(704,'{"l1": [9, 9, 9, 9, 9, 9, 9], "l2": [9, 9, 9, 9]}','[8, 9, 9, 9, 0, 0, 1]','{"l1": "list[int]", "l2": "list[int]"}','{"result": "list[int]"}',48);
INSERT INTO test_case_testcase VALUES(705,'{"l1": [1], "l2": [9, 9]}','[0, 0, 1]','{"l1": "list[int]", "l2": "list[int]"}','{"result": "list[int]"}',48);
INSERT INTO test_case_testcase VALUES(706,'{"l1": [2, 4, 3], "l2": [5, 6]}','[7, 0, 4]','{"l1": "list[int]", "l2": "list[int]"}','{"result": "list[int]"}',48);
INSERT INTO test_case_testcase VALUES(707,'{"l1": [1, 8], "l2": [0]}','[1, 8]','{"l1": "list[int]", "l2": "list[int]"}','{"result": "list[int]"}',48);
INSERT INTO test_case_testcase VALUES(708,'{"l1": [], "l2": [1]}','[1]','{"l1": "list[int]", "l2": "list[int]"}','{"result": "list[int]"}',48);
INSERT INTO test_case_testcase VALUES(709,'{"l1": [5], "l2": [5]}','[0, 1]','{"l1": "list[int]", "l2": "list[int]"}','{"result": "list[int]"}',48);
INSERT INTO test_case_testcase VALUES(710,'{"l1": [9], "l2": [1]}','[0, 1]','{"l1": "list[int]", "l2": "list[int]"}','{"result": "list[int]"}',48);
INSERT INTO test_case_testcase VALUES(711,'{"l1": [1, 0, 0, 0, 0, 0, 0, 0, 0, 1], "l2": [0]}','[1, 0, 0, 0, 0, 0, 0, 0, 0, 1]','{"l1": "list[int]", "l2": "list[int]"}','{"result": "list[int]"}',48);
INSERT INTO test_case_testcase VALUES(712,'{"l1": [0], "l2": [9, 9]}','[9, 9]','{"l1": "list[int]", "l2": "list[int]"}','{"result": "list[int]"}',48);
INSERT INTO test_case_testcase VALUES(713,'{"l1": [3], "l2": [7, 8]}','[0, 9]','{"l1": "list[int]", "l2": "list[int]"}','{"result": "list[int]"}',48);
INSERT INTO test_case_testcase VALUES(714,'{"l1": [6, 1, 7], "l2": [2, 9, 5]}','[9, 1, 2]','{"l1": "list[int]", "l2": "list[int]"}','{"result": "list[int]"}',48);
INSERT INTO test_case_testcase VALUES(715,'{"l1": [4, 3, 2], "l2": [1, 2, 3]}','[5, 5, 5]','{"l1": "list[int]", "l2": "list[int]"}','{"result": "list[int]"}',48);
INSERT INTO test_case_testcase VALUES(716,'{"l1": [0], "l2": [1, 2, 3]}','[1, 2, 3]','{"l1": "list[int]", "l2": "list[int]"}','{"result": "list[int]"}',48);
INSERT INTO test_case_testcase VALUES(717,'{"headA": [4, 1, 8, 4, 5], "headB": [5, 0, 1, 8, 4, 5]}','8','{"headA": "list[int]", "headB": "list[int]"}','{"result": "int"}',49);
INSERT INTO test_case_testcase VALUES(718,'{"headA": [1, 9, 1, 2, 4], "headB": [3, 2, 4]}','2','{"headA": "list[int]", "headB": "list[int]"}','{"result": "int"}',49);
INSERT INTO test_case_testcase VALUES(721,'{"headA": [2, 6, 4], "headB": [1, 5]}','-1','{"headA": "list[int]", "headB": "list[int]"}','{"result": "int"}',49);
INSERT INTO test_case_testcase VALUES(722,'{"headA": [1, 2, 3], "headB": [4, 5, 6, 7, 8]}','-1','{"headA": "list[int]", "headB": "list[int]"}','{"result": "int"}',49);
INSERT INTO test_case_testcase VALUES(723,'{"headA": [0, 9, 1, 2, 4], "headB": [3, 2, 4]}','2','{"headA": "list[int]", "headB": "list[int]"}','{"result": "int"}',49);
INSERT INTO test_case_testcase VALUES(724,'{"headA": [1, 2, 3, 4, 5], "headB": [6, 7, 8, 9, 4, 5]}','4','{"headA": "list[int]", "headB": "list[int]"}','{"result": "int"}',49);
INSERT INTO test_case_testcase VALUES(725,'{"headA": [1, 2], "headB": [2, 1]}','-1','{"headA": "list[int]", "headB": "list[int]"}','{"result": "int"}',49);
INSERT INTO test_case_testcase VALUES(726,'{"headA": [4, 1, 8, 4], "headB": [5, 6, 1, 8, 4]}','8','{"headA": "list[int]", "headB": "list[int]"}','{"result": "int"}',49);
INSERT INTO test_case_testcase VALUES(727,'{"headA": [3, 1, 5], "headB": [2, 4, 5]}','5','{"headA": "list[int]", "headB": "list[int]"}','{"result": "int"}',49);
INSERT INTO test_case_testcase VALUES(728,'{"headA": [1], "headB": [1]}','-1','{"headA": "list[int]", "headB": "list[int]"}','{"result": "int"}',49);
INSERT INTO test_case_testcase VALUES(729,'{"headA": [1, 2, 3], "headB": [4, 5, 3]}','3','{"headA": "list[int]", "headB": "list[int]"}','{"result": "int"}',49);
INSERT INTO test_case_testcase VALUES(730,'{"headA": [2, 3, 4], "headB": [1, 2, 3, 4]}','2','{"headA": "list[int]", "headB": "list[int]"}','{"result": "int"}',49);
INSERT INTO test_case_testcase VALUES(731,'{"headA": [0], "headB": [0]}','-1','{"headA": "list[int]", "headB": "list[int]"}','{"result": "int"}',49);
INSERT INTO test_case_testcase VALUES(732,'{"headA": [5, 6, 7], "headB": [8, 6, 7]}','6','{"headA": "list[int]", "headB": "list[int]"}','{"result": "int"}',49);
INSERT INTO test_case_testcase VALUES(733,'{"headA": [], "headB": []}','-1','{"headA": "list[int]", "headB": "list[int]"}','{"result": "int"}',49);
INSERT INTO test_case_testcase VALUES(734,'{"board": [["A", "B", "C", "E"], ["S", "F", "C", "S"], ["A", "D", "E", "E"]], "word": "ABCCED"}','true','{"board": "list[list[str]]", "word": "str"}','{"result": "bool"}',50);
INSERT INTO test_case_testcase VALUES(735,'{"board": [["A", "B", "C", "E"], ["S", "F", "C", "S"], ["A", "D", "E", "E"]], "word": "SEE"}','true','{"board": "list[list[str]]", "word": "str"}','{"result": "bool"}',50);
INSERT INTO test_case_testcase VALUES(736,'{"board": [["A", "B", "C", "E"], ["S", "F", "C", "S"], ["A", "D", "E", "E"]], "word": "ABCB"}','false','{"board": "list[list[str]]", "word": "str"}','{"result": "bool"}',50);
INSERT INTO test_case_testcase VALUES(737,'{"board": [["C", "A", "A"], ["A", "A", "A"], ["B", "C", "D"]], "word": "AAB"}','true','{"board": "list[list[str]]", "word": "str"}','{"result": "bool"}',50);
INSERT INTO test_case_testcase VALUES(738,'{"board": [["A", "B"], ["C", "D"]], "word": "AC"}','false','{"board": "list[list[str]]", "word": "str"}','{"result": "bool"}',50);
INSERT INTO test_case_testcase VALUES(739,'{"board": [["A"]], "word": "A"}','true','{"board": "list[list[str]]", "word": "str"}','{"result": "bool"}',50);
INSERT INTO test_case_testcase VALUES(740,'{"board": [["A", "A", "A", "A"], ["A", "A", "A", "A"], ["A", "A", "A", "A"]], "word": "AAAAAAAAAAAAA"}','false','{"board": "list[list[str]]", "word": "str"}','{"result": "bool"}',50);
INSERT INTO test_case_testcase VALUES(741,'{"board": [["A", "B", "C", "D"], ["E", "F", "G", "H"], ["I", "J", "K", "L"]], "word": "FJ"}','false','{"board": "list[list[str]]", "word": "str"}','{"result": "bool"}',50);
INSERT INTO test_case_testcase VALUES(742,'{"board": [["A", "B"], ["C", "D"]], "word": "ABCD"}','false','{"board": "list[list[str]]", "word": "str"}','{"result": "bool"}',50);
INSERT INTO test_case_testcase VALUES(743,'{"board": [["A", "B", "C"], ["D", "E", "F"], ["G", "H", "I"]], "word": "AEI"}','true','{"board": "list[list[str]]", "word": "str"}','{"result": "bool"}',50);
INSERT INTO test_case_testcase VALUES(744,'{"board": [["A", "B", "C", "D"], ["E", "F", "G", "H"], ["I", "J", "K", "L"], ["M", "N", "O", "P"]], "word": "BCGH"}','true','{"board": "list[list[str]]", "word": "str"}','{"result": "bool"}',50);
INSERT INTO test_case_testcase VALUES(745,'{"board": [["A", "A", "A"], ["A", "A", "A"], ["A", "A", "A"]], "word": "AAAAA"}','true','{"board": "list[list[str]]", "word": "str"}','{"result": "bool"}',50);
INSERT INTO test_case_testcase VALUES(746,'{"board": [["A", "B", "C"], ["D", "E", "F"], ["G", "H", "I"]], "word": "FG"}','false','{"board": "list[list[str]]", "word": "str"}','{"result": "bool"}',50);
INSERT INTO test_case_testcase VALUES(747,'{"board": [["C", "A", "A"], ["A", "A", "A"], ["B", "C", "D"]], "word": "CDA"}','true','{"board": "list[list[str]]", "word": "str"}','{"result": "bool"}',50);
INSERT INTO test_case_testcase VALUES(748,'{"board": [["A", "B", "C"], ["D", "E", "F"], ["G", "H", "I"]], "word": "ABCDE"}','false','{"board": "list[list[str]]", "word": "str"}','{"result": "bool"}',50);
INSERT INTO test_case_testcase VALUES(764,'{"nums": [2, 7, 11, 15], "target": 9}','[0, 1]','{"nums": "list[int]", "target": "int"}','{"result": "list[int]"}',1);
INSERT INTO test_case_testcase VALUES(765,'{"nums": [3, 2, 4], "target": 6}','[1, 2]','{"nums": "list[int]", "target": "int"}','{"result": "list[int]"}',1);
INSERT INTO test_case_testcase VALUES(766,'{"nums": [3, 3], "target": 6}','[0, 1]','{"nums": "list[int]", "target": "int"}','{"result": "list[int]"}',1);
INSERT INTO test_case_testcase VALUES(767,'{"nums": [1, 2, 3, 4, 5], "target": 9}','[3, 4]','{"nums": "list[int]", "target": "int"}','{"result": "list[int]"}',1);
INSERT INTO test_case_testcase VALUES(768,'{"nums": [5, 5, 11, 3], "target": 10}','[0, 1]','{"nums": "list[int]", "target": "int"}','{"result": "list[int]"}',1);
INSERT INTO test_case_testcase VALUES(769,'{"nums": [0, 4, 3, 0], "target": 0}','[0, 3]','{"nums": "list[int]", "target": "int"}','{"result": "list[int]"}',1);
INSERT INTO test_case_testcase VALUES(770,'{"nums": [-3, 4, 3, 90], "target": 0}','[0, 2]','{"nums": "list[int]", "target": "int"}','{"result": "list[int]"}',1);
INSERT INTO test_case_testcase VALUES(771,'{"nums": [1, 5, 3, 7, 2, 8], "target": 10}','[2, 3]','{"nums": "list[int]", "target": "int"}','{"result": "list[int]"}',1);
INSERT INTO test_case_testcase VALUES(772,'{"nums": [3, 5, 7, 8, 4, 2], "target": 9}','[1, 4]','{"nums": "list[int]", "target": "int"}','{"result": "list[int]"}',1);
INSERT INTO test_case_testcase VALUES(773,'{"nums": [1, 2, 3, 4, 5, 6, 7], "target": 13}','[5, 6]','{"nums": "list[int]", "target": "int"}','{"result": "list[int]"}',1);
INSERT INTO test_case_testcase VALUES(774,'{"nums": [10, 20, 10, 40, 50, 30, 70], "target": 110}','[3, 6]','{"nums": "list[int]", "target": "int"}','{"result": "list[int]"}',1);
INSERT INTO test_case_testcase VALUES(775,'{"nums": [1, 1, 1, 1, 1, 1], "target": 2}','[0, 1]','{"nums": "list[int]", "target": "int"}','{"result": "list[int]"}',1);
INSERT INTO test_case_testcase VALUES(776,'{"nums": [-1, -2, -3, -4, -5], "target": -8}','[2, 4]','{"nums": "list[int]", "target": "int"}','{"result": "list[int]"}',1);
INSERT INTO test_case_testcase VALUES(777,'{"nums": [2, 5, 5, 11, 1], "target": 10}','[1, 2]','{"nums": "list[int]", "target": "int"}','{"result": "list[int]"}',1);
INSERT INTO test_case_testcase VALUES(778,'{"nums": [1, 3, 3, 6, 10], "target": 9}','[2, 3]','{"nums": "list[int]", "target": "int"}','{"result": "list[int]"}',1);
INSERT INTO test_case_testcase VALUES(779,'{"nums": []}','[[]]','{"nums": "list[int]"}','{"result": "list[list[int]]"}',51);
INSERT INTO test_case_testcase VALUES(780,'{"nums": [1]}','[[], [1]]','{"nums": "list[int]"}','{"result": "list[list[int]]"}',51);
INSERT INTO test_case_testcase VALUES(781,'{"nums": [1, 2]}','[[], [1], [2], [1, 2]]','{"nums": "list[int]"}','{"result": "list[list[int]]"}',51);
INSERT INTO test_case_testcase VALUES(782,'{"nums": [1, 2, 3]}','[[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]','{"nums": "list[int]"}','{"result": "list[list[int]]"}',51);
INSERT INTO test_case_testcase VALUES(783,'{"nums": [1, 2, 2]}','[[], [1], [2], [1, 2], [2, 2], [1, 2, 2]]','{"nums": "list[int]"}','{"result": "list[list[int]]"}',51);
INSERT INTO test_case_testcase VALUES(784,'{"nums": [1, 2, 3, 4]}','[[], [1], [2], [3], [4], [1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4], [1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4], [1, 2, 3, 4]]','{"nums": "list[int]"}','{"result": "list[list[int]]"}',51);
INSERT INTO test_case_testcase VALUES(785,'{"nums": [0, -1, 2]}','[[], [0], [-1], [2], [0, -1], [0, 2], [-1, 2], [0, -1, 2]]','{"nums": "list[int]"}','{"result": "list[list[int]]"}',51);
INSERT INTO test_case_testcase VALUES(786,'{"nums": [1, 1, 1]}','[[], [1], [1, 1], [1, 1, 1]]','{"nums": "list[int]"}','{"result": "list[list[int]]"}',51);
INSERT INTO test_case_testcase VALUES(787,'{"nums": [-5, -10, 0, 5]}','[[], [-5], [-10], [0], [5], [-5, -10], [-5, 0], [-5, 5], [-10, 0], [-10, 5], [0, 5], [-5, -10, 0], [-5, -10, 5], [-5, 0, 5], [-10, 0, 5], [-5, -10, 0, 5]]','{"nums": "list[int]"}','{"result": "list[list[int]]"}',51);
INSERT INTO test_case_testcase VALUES(788,'{"nums": [10, 20, 30, 40, 50]}','[[], [10], [20], [30], [40], [50], [10, 20], [10, 30], [10, 40], [10, 50], [20, 30], [20, 40], [20, 50], [30, 40], [30, 50], [40, 50], [10, 20, 30], [10, 20, 30, 40, 50]]','{"nums": "list[int]"}','{"result": "list[list[int]]"}',51);
INSERT INTO test_case_testcase VALUES(789,'{"nums": [1, 2, 3, 2, 1]}','[[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3], [2, 2], [1, 1], [1, 2, 2], [2, 2, 3], [1, 2, 3, 2, 1]]','{"nums": "list[int]"}','{"result": "list[list[int]]"}',51);
INSERT INTO test_case_testcase VALUES(790,'{"nums": [1, 2, 3, 4, 5], "k": 2}','[4, 5, 1, 2, 3]','{"nums": "list", "k": "int"}','{"result": "list"}',4);
INSERT INTO test_case_testcase VALUES(791,'{"nums": [-1, -100, 3, 99], "k": 2}','[3, 99, -1, -100]','{"nums": "list", "k": "int"}','{"result": "list"}',4);
INSERT INTO test_case_testcase VALUES(792,'{"nums": [1, 2], "k": 3}','[2, 1]','{"nums": "list", "k": "int"}','{"result": "list"}',4);
INSERT INTO test_case_testcase VALUES(793,'{"nums": [1], "k": 0}','[1]','{"nums": "list", "k": "int"}','{"result": "list"}',4);
INSERT INTO test_case_testcase VALUES(794,'{"nums": [1, 2, 3], "k": 1}','[3, 1, 2]','{"nums": "list", "k": "int"}','{"result": "list"}',4);
INSERT INTO test_case_testcase VALUES(795,'{"nums": [5, 6, 7], "k": 4}','[7, 5, 6]','{"nums": "list", "k": "int"}','{"result": "list"}',4);
INSERT INTO test_case_testcase VALUES(796,'{"nums": [10, 20, 30, 40, 50], "k": 2}','[40, 50, 10, 20, 30]','{"nums": "list", "k": "int"}','{"result": "list"}',4);
INSERT INTO test_case_testcase VALUES(797,'{"nums": [1, 2, 3, 4, 5, 6, 7], "k": 3}','[5, 6, 7, 1, 2, 3, 4]','{"nums": "list", "k": "int"}','{"result": "list"}',4);
INSERT INTO test_case_testcase VALUES(798,'{"nums": [1, 2, 3, 4], "k": 5}','[4, 1, 2, 3]','{"nums": "list", "k": "int"}','{"result": "list"}',4);
INSERT INTO test_case_testcase VALUES(799,'{"nums": [0, 1, 2], "k": 2}','[1, 2, 0]','{"nums": "list", "k": "int"}','{"result": "list"}',4);
INSERT INTO test_case_testcase VALUES(800,'{"nums": [1, 2, 3, 4, 5, 6], "k": 7}','[6, 1, 2, 3, 4, 5]','{"nums": "list", "k": "int"}','{"result": "list"}',4);
INSERT INTO test_case_testcase VALUES(801,'{"nums": [8, 9, 10, 11], "k": 2}','[10, 11, 8, 9]','{"nums": "list", "k": "int"}','{"result": "list"}',4);
INSERT INTO test_case_testcase VALUES(802,'{"nums": [4, 5, 6], "k": 0}','[4, 5, 6]','{"nums": "list", "k": "int"}','{"result": "list"}',4);
INSERT INTO test_case_testcase VALUES(803,'{"nums": [], "k": 1}','[]','{"nums": "list", "k": "int"}','{"result": "list"}',4);
INSERT INTO test_case_testcase VALUES(832,'{"s": "abc@123!xyz"}','"zyx!321@cba"','{"s": "str"}','{"result": "str"}',7);
INSERT INTO test_case_testcase VALUES(833,'{"s": "A man a plan a canal Panama"}','"amanaP lanac a nalp a nam A"','{"s": "str"}','{"result": "str"}',7);
INSERT INTO test_case_testcase VALUES(834,'{"s": "racecar"}','"racecar"','{"s": "str"}','{"result": "str"}',7);
INSERT INTO test_case_testcase VALUES(835,'{"s": "1234567890"}','"0987654321"','{"s": "str"}','{"result": "str"}',7);
INSERT INTO test_case_testcase VALUES(836,'{"s": "test@#$%^"}','"^%$#@tset"','{"s": "str"}','{"result": "str"}',7);
INSERT INTO test_case_testcase VALUES(837,'{"s": "word space check"}','"kcehc ecaps drow"','{"s": "str"}','{"result": "str"}',7);
INSERT INTO test_case_testcase VALUES(838,'{"s": "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"}','"ZYXWVUTSRQPONMLKJIHGFEDCBAzyxwvutsrqponmlkjihgfedcba"','{"s": "str"}','{"result": "str"}',7);
INSERT INTO test_case_testcase VALUES(839,'{"s": "No spaces in this string"}','"gnirts siht ni secaps oN"','{"s": "str"}','{"result": "str"}',7);
INSERT INTO test_case_testcase VALUES(840,'{"s": "!"}','"!"','{"s": "str"}','{"result": "str"}',7);
INSERT INTO test_case_testcase VALUES(841,'{"s": "wordwithnewlines"}','"senilwenhtiwdrow"','{"s": "str"}','{"result": "str"}',7);
INSERT INTO test_case_testcase VALUES(842,'{"s": "aaaaaaaaaaaaaaaaa"}','"aaaaaaaaaaaaaaaaa"','{"s": "str"}','{"result": "str"}',7);
INSERT INTO test_case_testcase VALUES(843,'{"s": "1 2 3 4 5 6 7 8 9 0"}','"0 9 8 7 6 5 4 3 2 1"','{"s": "str"}','{"result": "str"}',7);
INSERT INTO test_case_testcase VALUES(844,'{"s": "Some random text with spaces"}','"secaps htiw txet modnar emoS"','{"s": "str"}','{"result": "str"}',7);
INSERT INTO test_case_testcase VALUES(845,'{"s": "reverse  "}','"  esrever"','{"s": "str"}','{"result": "str"}',7);
INSERT INTO test_case_testcase VALUES(846,'{"s": "anagram", "t": "nagaram"}','true','{"s": "str", "t": "str"}','{"result": "bool"}',8);
INSERT INTO test_case_testcase VALUES(847,'{"s": "rat", "t": "car"}','false','{"s": "str", "t": "str"}','{"result": "bool"}',8);
INSERT INTO test_case_testcase VALUES(848,'{"s": "listen", "t": "silent"}','true','{"s": "str", "t": "str"}','{"result": "bool"}',8);
INSERT INTO test_case_testcase VALUES(849,'{"s": "hello", "t": "world"}','false','{"s": "str", "t": "str"}','{"result": "bool"}',8);
INSERT INTO test_case_testcase VALUES(850,'{"s": "a", "t": "a"}','true','{"s": "str", "t": "str"}','{"result": "bool"}',8);
INSERT INTO test_case_testcase VALUES(851,'{"s": "abc", "t": "cba"}','true','{"s": "str", "t": "str"}','{"result": "bool"}',8);
INSERT INTO test_case_testcase VALUES(852,'{"s": "abc", "t": "def"}','false','{"s": "str", "t": "str"}','{"result": "bool"}',8);
INSERT INTO test_case_testcase VALUES(853,'{"s": "", "t": ""}','true','{"s": "str", "t": "str"}','{"result": "bool"}',8);
INSERT INTO test_case_testcase VALUES(854,'{"s": "night", "t": "thing"}','true','{"s": "str", "t": "str"}','{"result": "bool"}',8);
INSERT INTO test_case_testcase VALUES(855,'{"s": "racecar", "t": "racecar"}','true','{"s": "str", "t": "str"}','{"result": "bool"}',8);
INSERT INTO test_case_testcase VALUES(856,'{"s": "god", "t": "dog"}','true','{"s": "str", "t": "str"}','{"result": "bool"}',8);
INSERT INTO test_case_testcase VALUES(857,'{"s": "evil", "t": "vile"}','true','{"s": "str", "t": "str"}','{"result": "bool"}',8);
INSERT INTO test_case_testcase VALUES(858,'{"s": "evil", "t": "live"}','true','{"s": "str", "t": "str"}','{"result": "bool"}',8);
INSERT INTO test_case_testcase VALUES(859,'{"s": "abcd", "t": "abdc"}','true','{"s": "str", "t": "str"}','{"result": "bool"}',8);
INSERT INTO test_case_testcase VALUES(860,'{"s": "12345", "t": "54321"}','true','{"s": "str", "t": "str"}','{"result": "bool"}',8);
INSERT INTO test_case_testcase VALUES(861,'{"s": "aabbcc", "t": "abcabc"}','true','{"s": "str", "t": "str"}','{"result": "bool"}',8);
INSERT INTO test_case_testcase VALUES(862,'{"prices": [7, 1, 5, 3, 6, 4]}','5','{"prices": "List[int]"}','{"result": "int"}',14);
INSERT INTO test_case_testcase VALUES(863,'{"prices": [7, 6, 4, 3, 1]}','0','{"prices": "List[int]"}','{"result": "int"}',14);
INSERT INTO test_case_testcase VALUES(864,'{"prices": [1, 2, 3, 4, 5, 6, 7, 8, 9]}','8','{"prices": "List[int]"}','{"result": "int"}',14);
INSERT INTO test_case_testcase VALUES(865,'{"prices": [9, 8, 7, 6, 5, 4, 3, 2, 1]}','0','{"prices": "List[int]"}','{"result": "int"}',14);
INSERT INTO test_case_testcase VALUES(866,'{"prices": [2, 4, 1]}','2','{"prices": "List[int]"}','{"result": "int"}',14);
INSERT INTO test_case_testcase VALUES(867,'{"prices": [1, 2, 4, 2, 5, 7, 2, 4, 9, 0]}','8','{"prices": "List[int]"}','{"result": "int"}',14);
INSERT INTO test_case_testcase VALUES(868,'{"prices": [3, 3, 5, 0, 0, 3, 1, 4]}','4','{"prices": "List[int]"}','{"result": "int"}',14);
INSERT INTO test_case_testcase VALUES(869,'{"prices": [7, 2, 5, 3, 6, 1, 4]}','4','{"prices": "List[int]"}','{"result": "int"}',14);
INSERT INTO test_case_testcase VALUES(870,'{"prices": [7, 1, 5, 3, 6, 4, 8]}','7','{"prices": "List[int]"}','{"result": "int"}',14);
INSERT INTO test_case_testcase VALUES(871,'{"prices": [1, 3, 2, 8, 4, 9]}','8','{"prices": "List[int]"}','{"result": "int"}',14);
INSERT INTO test_case_testcase VALUES(872,'{"prices": [5, 4, 3, 2, 1, 10]}','9','{"prices": "List[int]"}','{"result": "int"}',14);
INSERT INTO test_case_testcase VALUES(873,'{"prices": [8, 1, 2, 4, 6, 3, 9]}','8','{"prices": "List[int]"}','{"result": "int"}',14);
INSERT INTO test_case_testcase VALUES(874,'{"prices": [3, 6, 1, 3, 4, 8, 2, 9]}','8','{"prices": "List[int]"}','{"result": "int"}',14);
INSERT INTO test_case_testcase VALUES(875,'{"prices": [1, 9, 6, 4, 3, 1, 8]}','8','{"prices": "List[int]"}','{"result": "int"}',14);
INSERT INTO test_case_testcase VALUES(876,'{"prices": [1, 6, 7, 9, 5, 3, 8]}','8','{"prices": "List[int]"}','{"result": "int"}',14);
INSERT INTO test_case_testcase VALUES(877,'{"nums": [3, 0, 1]}','2','{"nums": "List[int]"}','{"result": "int"}',16);
INSERT INTO test_case_testcase VALUES(878,'{"nums": [0, 1]}','2','{"nums": "List[int]"}','{"result": "int"}',16);
INSERT INTO test_case_testcase VALUES(879,'{"nums": [9, 6, 4, 2, 3, 5, 7, 0, 1]}','8','{"nums": "List[int]"}','{"result": "int"}',16);
INSERT INTO test_case_testcase VALUES(880,'{"nums": [0]}','1','{"nums": "List[int]"}','{"result": "int"}',16);
INSERT INTO test_case_testcase VALUES(881,'{"nums": [1]}','0','{"nums": "List[int]"}','{"result": "int"}',16);
INSERT INTO test_case_testcase VALUES(882,'{"nums": [3, 7, 1, 2, 8, 4, 5, 0]}','6','{"nums": "List[int]"}','{"result": "int"}',16);
INSERT INTO test_case_testcase VALUES(883,'{"nums": [45, 35, 44, 30, 40, 33, 36, 43, 41, 32, 31, 29, 42, 38, 37, 34, 46, 39, 47, 48]}','49','{"nums": "List[int]"}','{"result": "int"}',16);
INSERT INTO test_case_testcase VALUES(884,'{"nums": [10000, 0, 9998, 9999, 1, 3, 9997, 9996, 9995, 2]}','4','{"nums": "List[int]"}','{"result": "int"}',16);
INSERT INTO test_case_testcase VALUES(885,'{"nums": [0, 3, 4, 2]}','1','{"nums": "List[int]"}','{"result": "int"}',16);
INSERT INTO test_case_testcase VALUES(886,'{"nums": [5, 4, 3, 1, 2, 0, 7, 8, 9]}','6','{"nums": "List[int]"}','{"result": "int"}',16);
INSERT INTO test_case_testcase VALUES(887,'{"nums": [8, 6, 4, 3, 7, 1, 0, 2, 5]}','9','{"nums": "List[int]"}','{"result": "int"}',16);
INSERT INTO test_case_testcase VALUES(888,'{"nums": [0, 5, 3, 1, 2, 4, 6, 8, 7, 10]}','9','{"nums": "List[int]"}','{"result": "int"}',16);
INSERT INTO test_case_testcase VALUES(889,'{"nums": [0, 2, 3, 1, 5]}','4','{"nums": "List[int]"}','{"result": "int"}',16);
INSERT INTO test_case_testcase VALUES(890,'{"nums": [100000, 99998, 99997, 99996, 99999, 100001]}','99995','{"nums": "List[int]"}','{"result": "int"}',16);
INSERT INTO test_case_testcase VALUES(891,'{"nums": [100000, 99999, 100001, 100002]}','99998','{"nums": "List[int]"}','{"result": "int"}',16);
INSERT INTO test_case_testcase VALUES(902,'{"nums": [2, 0, 2, 1, 1, 0]}','[0, 0, 1, 1, 2, 2]','{"nums": "list[int]"}','{"result": "list[int]"}',52);
INSERT INTO test_case_testcase VALUES(903,'{"nums": [0, 0, 1, 1, 2, 2]}','[0, 0, 1, 1, 2, 2]','{"nums": "list[int]"}','{"result": "list[int]"}',52);
INSERT INTO test_case_testcase VALUES(904,'{"nums": [2, 2, 1, 1, 0, 0]}','[0, 0, 1, 1, 2, 2]','{"nums": "list[int]"}','{"result": "list[int]"}',52);
INSERT INTO test_case_testcase VALUES(905,'{"nums": [0, 0, 0]}','[0, 0, 0]','{"nums": "list[int]"}','{"result": "list[int]"}',52);
INSERT INTO test_case_testcase VALUES(906,'{"nums": [1]}','[1]','{"nums": "list[int]"}','{"result": "list[int]"}',52);
INSERT INTO test_case_testcase VALUES(907,'{"nums": []}','[]','{"nums": "list[int]"}','{"result": "list[int]"}',52);
INSERT INTO test_case_testcase VALUES(908,'{"nums": [2, 1, 2, 0, 1, 0, 2, 0]}','[0, 0, 0, 1, 1, 2, 2, 2]','{"nums": "list[int]"}','{"result": "list[int]"}',52);
INSERT INTO test_case_testcase VALUES(909,'{"nums": [2, 2, 1, 0]}','[0, 1, 2, 2]','{"nums": "list[int]"}','{"result": "list[int]"}',52);
INSERT INTO test_case_testcase VALUES(910,'{"nums": [0, 1, 2]}','[0, 1, 2]','{"nums": "list[int]"}','{"result": "list[int]"}',52);
INSERT INTO test_case_testcase VALUES(911,'{"nums": [2, 2, 2, 0, 2, 1]}','[0, 1, 2, 2, 2, 2]','{"nums": "list[int]"}','{"result": "list[int]"}',52);
INSERT INTO test_case_testcase VALUES(912,'{"nums": [3, 2, 1, 5, 6, 4], "k": 2}','5','{"nums": "list[int]", "k": "int"}','{"result": "int"}',53);
INSERT INTO test_case_testcase VALUES(913,'{"nums": [3, 2, 3, 1, 2, 4, 5, 5, 6], "k": 4}','4','{"nums": "list[int]", "k": "int"}','{"result": "int"}',53);
INSERT INTO test_case_testcase VALUES(914,'{"nums": [1], "k": 1}','1','{"nums": "list[int]", "k": "int"}','{"result": "int"}',53);
INSERT INTO test_case_testcase VALUES(915,'{"nums": [1, 2, 3, 4, 5], "k": 1}','5','{"nums": "list[int]", "k": "int"}','{"result": "int"}',53);
INSERT INTO test_case_testcase VALUES(916,'{"nums": [5, 4, 3, 2, 1], "k": 3}','3','{"nums": "list[int]", "k": "int"}','{"result": "int"}',53);
INSERT INTO test_case_testcase VALUES(917,'{"nums": [1, 1, 1, 1, 1], "k": 2}','1','{"nums": "list[int]", "k": "int"}','{"result": "int"}',53);
INSERT INTO test_case_testcase VALUES(918,'{"nums": [10, 20, 30, 40, 50], "k": 5}','10','{"nums": "list[int]", "k": "int"}','{"result": "int"}',53);
INSERT INTO test_case_testcase VALUES(919,'{"nums": [-1, -2, -3, -4, -5], "k": 3}','-3','{"nums": "list[int]", "k": "int"}','{"result": "int"}',53);
INSERT INTO test_case_testcase VALUES(920,'{"nums": [100, 90, 80, 70, 60, 50], "k": 4}','70','{"nums": "list[int]", "k": "int"}','{"result": "int"}',53);
INSERT INTO test_case_testcase VALUES(921,'{"nums": [1, 2, 2, 3, 3, 4, 5], "k": 2}','4','{"nums": "list[int]", "k": "int"}','{"result": "int"}',53);
INSERT INTO test_case_testcase VALUES(932,'{"nums": [1, 2, 3, 1]}','2','{"nums": "list[int]"}','{"result": "int"}',54);
INSERT INTO test_case_testcase VALUES(933,'{"nums": [1, 2, 1, 3, 5, 6, 4]}','5','{"nums": "list[int]"}','{"result": "int"}',54);
INSERT INTO test_case_testcase VALUES(934,'{"nums": [1]}','0','{"nums": "list[int]"}','{"result": "int"}',54);
INSERT INTO test_case_testcase VALUES(935,'{"nums": [2, 3, 1]}','1','{"nums": "list[int]"}','{"result": "int"}',54);
INSERT INTO test_case_testcase VALUES(936,'{"nums": [1, 2]}','1','{"nums": "list[int]"}','{"result": "int"}',54);
INSERT INTO test_case_testcase VALUES(937,'{"nums": [1, 3, 2, 4, 1]}','3','{"nums": "list[int]"}','{"result": "int"}',54);
INSERT INTO test_case_testcase VALUES(938,'{"nums": [5, 10, 20, 15]}','2','{"nums": "list[int]"}','{"result": "int"}',54);
INSERT INTO test_case_testcase VALUES(939,'{"nums": [1, 2, 3, 4, 5, 6, 7]}','6','{"nums": "list[int]"}','{"result": "int"}',54);
INSERT INTO test_case_testcase VALUES(940,'{"nums": [7, 6, 5, 4, 3, 2, 1]}','0','{"nums": "list[int]"}','{"result": "int"}',54);
INSERT INTO test_case_testcase VALUES(941,'{"nums": [1, 3, 20, 4, 1]}','2','{"nums": "list[int]"}','{"result": "int"}',54);
INSERT INTO test_case_testcase VALUES(942,'{"dividend": 10, "divisor": 3}','3','{"dividend": "int", "divisor": "int"}','{"result": "int"}',54);
INSERT INTO test_case_testcase VALUES(943,'{"dividend": 10, "divisor": 2}','5','{"dividend": "int", "divisor": "int"}','{"result": "int"}',54);
INSERT INTO test_case_testcase VALUES(944,'{"dividend": -10, "divisor": 3}','-3','{"dividend": "int", "divisor": "int"}','{"result": "int"}',54);
INSERT INTO test_case_testcase VALUES(945,'{"dividend": -10, "divisor": -3}','3','{"dividend": "int", "divisor": "int"}','{"result": "int"}',54);
INSERT INTO test_case_testcase VALUES(946,'{"dividend": 3, "divisor": 5}','0','{"dividend": "int", "divisor": "int"}','{"result": "int"}',54);
INSERT INTO test_case_testcase VALUES(947,'{"dividend": 7, "divisor": 1}','7','{"dividend": "int", "divisor": "int"}','{"result": "int"}',54);
INSERT INTO test_case_testcase VALUES(948,'{"dividend": 7, "divisor": -1}','-7','{"dividend": "int", "divisor": "int"}','{"result": "int"}',54);
INSERT INTO test_case_testcase VALUES(949,'{"dividend": -2147483648, "divisor": -1}','2147483647','{"dividend": "int", "divisor": "int"}','{"result": "int"}',54);
INSERT INTO test_case_testcase VALUES(950,'{"dividend": -2147483648, "divisor": 1}','-2147483648','{"dividend": "int", "divisor": "int"}','{"result": "int"}',54);
INSERT INTO test_case_testcase VALUES(951,'{"dividend": 10, "divisor": 0}','"Error"','{"dividend": "int", "divisor": "int"}','{"result": "str"}',54);
INSERT INTO test_case_testcase VALUES(952,'{"dividend": 10, "divisor": 3}','3','{"dividend": "int", "divisor": "int"}','{"result": "int"}',55);
INSERT INTO test_case_testcase VALUES(953,'{"dividend": 10, "divisor": 2}','5','{"dividend": "int", "divisor": "int"}','{"result": "int"}',55);
INSERT INTO test_case_testcase VALUES(954,'{"dividend": -10, "divisor": 3}','-3','{"dividend": "int", "divisor": "int"}','{"result": "int"}',55);
INSERT INTO test_case_testcase VALUES(955,'{"dividend": -10, "divisor": -3}','3','{"dividend": "int", "divisor": "int"}','{"result": "int"}',55);
INSERT INTO test_case_testcase VALUES(956,'{"dividend": 3, "divisor": 5}','0','{"dividend": "int", "divisor": "int"}','{"result": "int"}',55);
INSERT INTO test_case_testcase VALUES(957,'{"dividend": 7, "divisor": 1}','7','{"dividend": "int", "divisor": "int"}','{"result": "int"}',55);
INSERT INTO test_case_testcase VALUES(958,'{"dividend": 7, "divisor": -1}','-7','{"dividend": "int", "divisor": "int"}','{"result": "int"}',55);
INSERT INTO test_case_testcase VALUES(959,'{"dividend": -2147483648, "divisor": -1}','2147483647','{"dividend": "int", "divisor": "int"}','{"result": "int"}',55);
INSERT INTO test_case_testcase VALUES(960,'{"dividend": -2147483648, "divisor": 1}','-2147483648','{"dividend": "int", "divisor": "int"}','{"result": "int"}',55);
INSERT INTO test_case_testcase VALUES(961,'{"dividend": 10, "divisor": 0}','"Error"','{"dividend": "int", "divisor": "int"}','{"result": "str"}',55);
INSERT INTO test_case_testcase VALUES(962,'{"a": 1, "b": 2}','3','{"a": "int", "b": "int"}','{"result": "int"}',56);
INSERT INTO test_case_testcase VALUES(963,'{"a": -1, "b": 1}','0','{"a": "int", "b": "int"}','{"result": "int"}',56);
INSERT INTO test_case_testcase VALUES(964,'{"a": 0, "b": 0}','0','{"a": "int", "b": "int"}','{"result": "int"}',56);
INSERT INTO test_case_testcase VALUES(965,'{"a": -5, "b": -7}','-12','{"a": "int", "b": "int"}','{"result": "int"}',56);
INSERT INTO test_case_testcase VALUES(966,'{"a": 123, "b": 456}','579','{"a": "int", "b": "int"}','{"result": "int"}',56);
INSERT INTO test_case_testcase VALUES(967,'{"a": -2147483648, "b": 2147483647}','-1','{"a": "int", "b": "int"}','{"result": "int"}',56);
INSERT INTO test_case_testcase VALUES(968,'{"a": 0, "b": -100}','-100','{"a": "int", "b": "int"}','{"result": "int"}',56);
INSERT INTO test_case_testcase VALUES(969,'{"a": 1000, "b": 2000}','3000','{"a": "int", "b": "int"}','{"result": "int"}',56);
INSERT INTO test_case_testcase VALUES(970,'{"a": -100, "b": 50}','-50','{"a": "int", "b": "int"}','{"result": "int"}',56);
INSERT INTO test_case_testcase VALUES(971,'{"a": 2147483647, "b": 1}','-2147483648','{"a": "int", "b": "int"}','{"result": "int"}',56);
INSERT INTO test_case_testcase VALUES(972,'{"nums": [3, 2, 3]}','3','{"nums": "list[int]"}','{"result": "int"}',57);
INSERT INTO test_case_testcase VALUES(973,'{"nums": [2, 2, 1, 1, 1, 2, 2]}','2','{"nums": "list[int]"}','{"result": "int"}',57);
INSERT INTO test_case_testcase VALUES(974,'{"nums": [1]}','1','{"nums": "list[int]"}','{"result": "int"}',57);
INSERT INTO test_case_testcase VALUES(975,'{"nums": [1, 1, 2]}','1','{"nums": "list[int]"}','{"result": "int"}',57);
INSERT INTO test_case_testcase VALUES(976,'{"nums": [5, 5, 5, 2, 3, 5, 5]}','5','{"nums": "list[int]"}','{"result": "int"}',57);
INSERT INTO test_case_testcase VALUES(977,'{"nums": [8, 8, 8, 1, 2, 3, 8, 8, 8]}','8','{"nums": "list[int]"}','{"result": "int"}',57);
INSERT INTO test_case_testcase VALUES(978,'{"nums": [10, 10, 10, 10, 1, 2, 3]}','10','{"nums": "list[int]"}','{"result": "int"}',57);
INSERT INTO test_case_testcase VALUES(979,'{"nums": [9, 9, 9, 9, 9, 3, 3, 3]}','9','{"nums": "list[int]"}','{"result": "int"}',57);
INSERT INTO test_case_testcase VALUES(980,'{"nums": [6, 6, 6, 7, 7, 7, 7]}','7','{"nums": "list[int]"}','{"result": "int"}',57);
INSERT INTO test_case_testcase VALUES(981,'{"nums": [1, 2, 3, 2, 2, 2, 2]}','2','{"nums": "list[int]"}','{"result": "int"}',57);
INSERT INTO test_case_testcase VALUES(982,'{"root": {"val": 3, "left": {"val": 1, "left": null, "right": {"val": 2, "left": null, "right": null}}, "right": {"val": 4, "left": null, "right": null}}, "k": 1}','1','{"root": "TreeNode", "k": "int"}','{"result": "int"}',58);
INSERT INTO test_case_testcase VALUES(983,'{"root": {"val": 5, "left": {"val": 3, "left": {"val": 2, "left": {"val": 1, "left": null, "right": null}, "right": null}, "right": null}, "right": {"val": 6, "left": null, "right": null}}, "k": 3}','3','{"root": "TreeNode", "k": "int"}','{"result": "int"}',58);
INSERT INTO test_case_testcase VALUES(984,'{"root": {"val": 7, "left": {"val": 5, "left": {"val": 3, "left": {"val": 2, "left": null, "right": null}, "right": null}, "right": {"val": 6, "left": null, "right": null}}, "right": {"val": 9, "left": {"val": 8, "left": null, "right": null}, "right": null}}, "k": 4}','5','{"root": "TreeNode", "k": "int"}','{"result": "int"}',58);
INSERT INTO test_case_testcase VALUES(985,'{"root": {"val": 1, "left": null, "right": {"val": 2, "left": null, "right": {"val": 3, "left": null, "right": null}}}, "k": 2}','2','{"root": "TreeNode", "k": "int"}','{"result": "int"}',58);
INSERT INTO test_case_testcase VALUES(986,'{"root": {"val": 10, "left": {"val": 5, "left": {"val": 3, "left": {"val": 2, "left": null, "right": null}, "right": null}, "right": {"val": 7, "left": {"val": 6, "left": null, "right": null}, "right": null}}, "right": {"val": 15, "left": {"val": 13, "left": null, "right": {"val": 14, "left": null, "right": null}}, "right": {"val": 20, "left": null, "right": null}}}, "k": 6}','10','{"root": "TreeNode", "k": "int"}','{"result": "int"}',58);
INSERT INTO test_case_testcase VALUES(987,'{"root": {"val": 8, "left": {"val": 5, "left": {"val": 2, "left": null, "right": null}, "right": {"val": 6, "left": null, "right": null}}, "right": {"val": 10, "left": {"val": 9, "left": null, "right": null}, "right": null}}, "k": 2}','6','{"root": "TreeNode", "k": "int"}','{"result": "int"}',58);
INSERT INTO test_case_testcase VALUES(988,'{"root": {"val": 20, "left": {"val": 10, "left": {"val": 5, "left": {"val": 3, "left": null, "right": null}, "right": null}, "right": {"val": 15, "left": null, "right": null}}, "right": {"val": 30, "left": {"val": 25, "left": null, "right": null}, "right": {"val": 35, "left": null, "right": null}}}, "k": 5}','15','{"root": "TreeNode", "k": "int"}','{"result": "int"}',58);
INSERT INTO test_case_testcase VALUES(989,'{"root": {"val": 12, "left": {"val": 7, "left": {"val": 5, "left": null, "right": null}, "right": {"val": 10, "left": null, "right": null}}, "right": {"val": 15, "left": {"val": 14, "left": null, "right": null}, "right": {"val": 18, "left": null, "right": null}}}, "k": 4}','12','{"root": "TreeNode", "k": "int"}','{"result": "int"}',58);
INSERT INTO test_case_testcase VALUES(990,'{"root": {"val": 50, "left": {"val": 30, "left": {"val": 20, "left": null, "right": null}, "right": {"val": 40, "left": null, "right": null}}, "right": {"val": 70, "left": {"val": 60, "left": null, "right": null}, "right": {"val": 80, "left": null, "right": null}}}, "k": 7}','70','{"root": "TreeNode", "k": "int"}','{"result": "int"}',58);
INSERT INTO test_case_testcase VALUES(991,'{"root": {"val": 50, "left": {"val": 30, "left": {"val": 20, "left": null, "right": null}, "right": {"val": 40, "left": null, "right": null}}, "right": {"val": 70, "left": {"val": 60, "left": null, "right": null}, "right": {"val": 80, "left": null, "right": null}}}, "k": 7}','80','{"root": "TreeNode", "k": "int"}','{"result": "int"}',58);
DELETE FROM sqlite_sequence;
INSERT INTO sqlite_sequence VALUES('django_migrations',37);
INSERT INTO sqlite_sequence VALUES('django_admin_log',0);
INSERT INTO sqlite_sequence VALUES('django_content_type',10);
INSERT INTO sqlite_sequence VALUES('auth_permission',40);
INSERT INTO sqlite_sequence VALUES('auth_group',0);
INSERT INTO sqlite_sequence VALUES('auth_user',1);
INSERT INTO sqlite_sequence VALUES('task_task',105);
INSERT INTO sqlite_sequence VALUES('test_case_testcase',991);
CREATE UNIQUE INDEX "auth_group_permissions_group_id_permission_id_0cd325b0_uniq" ON "auth_group_permissions" ("group_id", "permission_id");
CREATE INDEX "auth_group_permissions_group_id_b120cbf9" ON "auth_group_permissions" ("group_id");
CREATE INDEX "auth_group_permissions_permission_id_84c5c92e" ON "auth_group_permissions" ("permission_id");
CREATE UNIQUE INDEX "auth_user_groups_user_id_group_id_94350c0c_uniq" ON "auth_user_groups" ("user_id", "group_id");
CREATE INDEX "auth_user_groups_user_id_6a12ed8b" ON "auth_user_groups" ("user_id");
CREATE INDEX "auth_user_groups_group_id_97559544" ON "auth_user_groups" ("group_id");
CREATE UNIQUE INDEX "auth_user_user_permissions_user_id_permission_id_14a6b632_uniq" ON "auth_user_user_permissions" ("user_id", "permission_id");
CREATE INDEX "auth_user_user_permissions_user_id_a95ead1b" ON "auth_user_user_permissions" ("user_id");
CREATE INDEX "auth_user_user_permissions_permission_id_1fbb5f2c" ON "auth_user_user_permissions" ("permission_id");
CREATE INDEX "django_admin_log_content_type_id_c4bce8eb" ON "django_admin_log" ("content_type_id");
CREATE INDEX "django_admin_log_user_id_c564eba6" ON "django_admin_log" ("user_id");
CREATE UNIQUE INDEX "django_content_type_app_label_model_76bd3d3b_uniq" ON "django_content_type" ("app_label", "model");
CREATE UNIQUE INDEX "auth_permission_content_type_id_codename_01ab375a_uniq" ON "auth_permission" ("content_type_id", "codename");
CREATE INDEX "auth_permission_content_type_id_2f476e4b" ON "auth_permission" ("content_type_id");
CREATE INDEX "django_session_expire_date_a5c62663" ON "django_session" ("expire_date");
CREATE INDEX "test_case_testcase_task_id_66840980" ON "test_case_testcase" ("task_id");
COMMIT;
